{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1745848057856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745848071114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n 基于 Node.js + Express + Sequelize + SQL Server 的 CRM 权限管理基础模块，支持 RBAC 权限模型、JWT 双 Token 认证、无限级分类。\r\n \r\n ## 技术栈\r\n+\r\n - Node.js\r\n - Express\r\n - Sequelize (ORM)\r\n - SQL Server (MSSQL)\r\n@@ -11,8 +12,9 @@\n - bcryptjs\r\n - dotenv\r\n \r\n ## 目录结构\r\n+\r\n ```\r\n ├── .env\r\n ├── .gitignore\r\n ├── package.json\r\n@@ -47,18 +49,21 @@\n │   └── response.js\r\n ```\r\n \r\n ## 环境配置\r\n+\r\n 1. 安装依赖：`npm install`\r\n 2. 配置 `.env` 文件，填写数据库和 JWT 密钥等信息\r\n 3. 启动 SQL Server 并创建数据库\r\n \r\n ## 启动方式\r\n+\r\n ```bash\r\n npm start\r\n ```\r\n \r\n ## 主要接口\r\n+\r\n - `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n - `POST /api/auth/refresh` 刷新 accessToken\r\n - `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n - `POST /api/category` 新建分类（需认证）\r\n@@ -66,7 +71,8 @@\n \r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.0\r\n+\r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n\\ No newline at end of file\n-- 实现基础认证、分类接口 \n+- 实现基础认证、分类接口\r\n"
                },
                {
                    "date": 1745880148112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,19 +60,140 @@\n ```bash\r\n npm start\r\n ```\r\n \r\n-## 主要接口\r\n+## API 接口文档\r\n \r\n-- `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n-- `POST /api/auth/refresh` 刷新 accessToken\r\n-- `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n-- `POST /api/category` 新建分类（需认证）\r\n-- `GET /api/category` 获取分类树（需认证）\r\n+### 认证接口\r\n \r\n+#### 1. 用户登录\r\n+- **接口**：`POST /api/auth/login`\r\n+- **描述**：用户登录，返回访问令牌和刷新令牌\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"accessToken\": \"string\",\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"User not found\" / \"Invalid password\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 刷新令牌\r\n+- **接口**：`POST /api/auth/refresh`\r\n+- **描述**：使用刷新令牌获取新的访问令牌\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"accessToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No refresh token\" / \"Invalid refresh token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 3. 注销登录\r\n+- **接口**：`POST /api/auth/logout`\r\n+- **描述**：注销用户并使刷新令牌失效\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"message\": \"Logged out\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No refresh token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+### 分类接口\r\n+\r\n+#### 1. 创建分类\r\n+- **接口**：`POST /api/category`\r\n+- **描述**：创建新的分类（支持无限级嵌套）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"parentId\": \"number | null\",\r\n+    \"description\": \"string | null\"\r\n+  }\r\n+  ```\r\n+- **响应**：返回创建的分类对象\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"name\": \"string\",\r\n+    \"parentId\": \"number | null\",\r\n+    \"description\": \"string | null\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 获取分类树\r\n+- **接口**：`GET /api/category`\r\n+- **描述**：获取完整的分类树结构\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：返回树形结构的分类列表\r\n+  ```json\r\n+  [\r\n+    {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"parentId\": null,\r\n+      \"description\": \"string\",\r\n+      \"children\": [\r\n+        {\r\n+          \"id\": \"number\",\r\n+          \"name\": \"string\",\r\n+          \"parentId\": \"number\",\r\n+          \"description\": \"string\",\r\n+          \"children\": []\r\n+        }\r\n+      ]\r\n+    }\r\n+  ]\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n - 实现基础认证、分类接口\r\n+- 添加详细的 API 接口文档\r\n"
                },
                {
                    "date": 1745880200907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n \r\n ### 认证接口\r\n \r\n #### 1. 用户登录\r\n+\r\n - **接口**：`POST /api/auth/login`\r\n - **描述**：用户登录，返回访问令牌和刷新令牌\r\n - **请求体**：\r\n   ```json\r\n@@ -86,8 +87,9 @@\n   - 401: \"User not found\" / \"Invalid password\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 2. 刷新令牌\r\n+\r\n - **接口**：`POST /api/auth/refresh`\r\n - **描述**：使用刷新令牌获取新的访问令牌\r\n - **请求体**：\r\n   ```json\r\n@@ -105,8 +107,9 @@\n   - 401: \"No refresh token\" / \"Invalid refresh token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 3. 注销登录\r\n+\r\n - **接口**：`POST /api/auth/logout`\r\n - **描述**：注销用户并使刷新令牌失效\r\n - **请求体**：\r\n   ```json\r\n@@ -126,8 +129,9 @@\n \r\n ### 分类接口\r\n \r\n #### 1. 创建分类\r\n+\r\n - **接口**：`POST /api/category`\r\n - **描述**：创建新的分类（支持无限级嵌套）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n@@ -157,8 +161,9 @@\n   - 401: \"No token provided\" / \"Invalid or expired token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 2. 获取分类树\r\n+\r\n - **接口**：`GET /api/category`\r\n - **描述**：获取完整的分类树结构\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n@@ -195,5 +200,5 @@\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n - 实现基础认证、分类接口\r\n-- 添加详细的 API 接口文档\n\\ No newline at end of file\n+- 添加详细的 API 接口文档\r\n"
                },
                {
                    "date": 1745880471940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,13 @@\n │   ├── refreshToken.model.js\r\n │   └── tokenBlacklist.model.js\r\n ├── controllers/\r\n │   ├── auth.controller.js\r\n+│   ├── user.controller.js\r\n │   ├── category.controller.js\r\n ├── routes/\r\n │   ├── auth.routes.js\r\n+│   ├── user.routes.js\r\n │   ├── category.routes.js\r\n │   └── index.js\r\n ├── middlewares/\r\n │   ├── auth.js\r\n@@ -46,8 +48,10 @@\n │   └── rbac.service.js\r\n ├── utils/\r\n │   ├── jwt.js\r\n │   └── response.js\r\n+├── seeders/\r\n+│   └── init.js\r\n ```\r\n \r\n ## 环境配置\r\n \r\n@@ -60,8 +64,13 @@\n ```bash\r\n npm start\r\n ```\r\n \r\n+## 默认账户\r\n+\r\n+- 管理员账号：admin\r\n+- 管理员密码：admin123\r\n+\r\n ## API 接口文档\r\n \r\n ### 认证接口\r\n \r\n@@ -126,8 +135,176 @@\n - **错误**：\r\n   - 401: \"No refresh token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n+### 用户管理接口\r\n+\r\n+#### 1. 创建用户\r\n+\r\n+- **接口**：`POST /api/users`\r\n+- **描述**：创建新用户（需要 create_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"roleIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"username\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\",\r\n+    \"Roles\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"name\": \"string\",\r\n+        \"description\": \"string\"\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 400: \"Username already exists\"\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 获取用户列表\r\n+\r\n+- **接口**：`GET /api/users`\r\n+- **描述**：获取用户列表（需要 view_users 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **查询参数**：\r\n+  - page: 页码（默认：1）\r\n+  - limit: 每页数量（默认：10）\r\n+  - search: 搜索关键词\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"total\": \"number\",\r\n+    \"pages\": \"number\",\r\n+    \"currentPage\": \"number\",\r\n+    \"data\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"username\": \"string\",\r\n+        \"email\": \"string\",\r\n+        \"status\": \"boolean\",\r\n+        \"createdAt\": \"string\",\r\n+        \"updatedAt\": \"string\",\r\n+        \"Roles\": [\r\n+          {\r\n+            \"id\": \"number\",\r\n+            \"name\": \"string\",\r\n+            \"description\": \"string\"\r\n+          }\r\n+        ]\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 3. 获取单个用户\r\n+\r\n+- **接口**：`GET /api/users/:id`\r\n+- **描述**：获取指定用户信息（需要 view_users 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"username\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\",\r\n+    \"Roles\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"name\": \"string\",\r\n+        \"description\": \"string\"\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 4. 更新用户\r\n+\r\n+- **接口**：`PUT /api/users/:id`\r\n+- **描述**：更新指定用户信息（需要 update_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"roleIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：与获取单个用户接口相同\r\n+- **错误**：\r\n+  - 400: \"Username already exists\"\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 5. 删除用户\r\n+\r\n+- **接口**：`DELETE /api/users/:id`\r\n+- **描述**：删除指定用户（需要 delete_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"message\": \"User deleted successfully\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n ### 分类接口\r\n \r\n #### 1. 创建分类\r\n \r\n@@ -195,8 +372,15 @@\n   - 500: \"Internal Server Error\"\r\n \r\n ## 更新日志（Changelog）\r\n \r\n+### v1.0.1 (2024-03-19)\r\n+\r\n+- 添加用户管理模块（CRUD接口）\r\n+- 实现数据库初始化脚本\r\n+- 添加默认管理员账户\r\n+- 完善接口文档\r\n+\r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n"
                }
            ],
            "date": 1745848057855,
            "name": "Commit-0",
            "content": "# CRM Server\r\n\r\n基于 Node.js + Express + Sequelize + SQL Server 的 CRM 权限管理基础模块，支持 RBAC 权限模型、JWT 双 Token 认证、无限级分类。\r\n\r\n## 技术栈\r\n- Node.js\r\n- Express\r\n- Sequelize (ORM)\r\n- SQL Server (MSSQL)\r\n- JWT (jsonwebtoken)\r\n- bcryptjs\r\n- dotenv\r\n\r\n## 目录结构\r\n```\r\n├── .env\r\n├── .gitignore\r\n├── package.json\r\n├── app.js\r\n├── config/\r\n│   ├── database.js\r\n│   └── auth.js\r\n├── models/\r\n│   ├── index.js\r\n│   ├── user.model.js\r\n│   ├── role.model.js\r\n│   ├── permission.model.js\r\n│   ├── category.model.js\r\n│   ├── refreshToken.model.js\r\n│   └── tokenBlacklist.model.js\r\n├── controllers/\r\n│   ├── auth.controller.js\r\n│   ├── category.controller.js\r\n├── routes/\r\n│   ├── auth.routes.js\r\n│   ├── category.routes.js\r\n│   └── index.js\r\n├── middlewares/\r\n│   ├── auth.js\r\n│   ├── rbac.js\r\n│   └── errorHandler.js\r\n├── services/\r\n│   ├── auth.service.js\r\n│   └── rbac.service.js\r\n├── utils/\r\n│   ├── jwt.js\r\n│   └── response.js\r\n```\r\n\r\n## 环境配置\r\n1. 安装依赖：`npm install`\r\n2. 配置 `.env` 文件，填写数据库和 JWT 密钥等信息\r\n3. 启动 SQL Server 并创建数据库\r\n\r\n## 启动方式\r\n```bash\r\nnpm start\r\n```\r\n\r\n## 主要接口\r\n- `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n- `POST /api/auth/refresh` 刷新 accessToken\r\n- `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n- `POST /api/category` 新建分类（需认证）\r\n- `GET /api/category` 获取分类树（需认证）\r\n\r\n## 更新日志（Changelog）\r\n\r\n### v1.0.0\r\n- 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n- 支持用户、角色、权限、分类、Token 等基础模型\r\n- 实现基础认证、分类接口 "
        }
    ]
}