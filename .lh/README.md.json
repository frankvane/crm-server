{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1745848057856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745848071114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n 基于 Node.js + Express + Sequelize + SQL Server 的 CRM 权限管理基础模块，支持 RBAC 权限模型、JWT 双 Token 认证、无限级分类。\r\n \r\n ## 技术栈\r\n+\r\n - Node.js\r\n - Express\r\n - Sequelize (ORM)\r\n - SQL Server (MSSQL)\r\n@@ -11,8 +12,9 @@\n - bcryptjs\r\n - dotenv\r\n \r\n ## 目录结构\r\n+\r\n ```\r\n ├── .env\r\n ├── .gitignore\r\n ├── package.json\r\n@@ -47,18 +49,21 @@\n │   └── response.js\r\n ```\r\n \r\n ## 环境配置\r\n+\r\n 1. 安装依赖：`npm install`\r\n 2. 配置 `.env` 文件，填写数据库和 JWT 密钥等信息\r\n 3. 启动 SQL Server 并创建数据库\r\n \r\n ## 启动方式\r\n+\r\n ```bash\r\n npm start\r\n ```\r\n \r\n ## 主要接口\r\n+\r\n - `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n - `POST /api/auth/refresh` 刷新 accessToken\r\n - `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n - `POST /api/category` 新建分类（需认证）\r\n@@ -66,7 +71,8 @@\n \r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.0\r\n+\r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n\\ No newline at end of file\n-- 实现基础认证、分类接口 \n+- 实现基础认证、分类接口\r\n"
                },
                {
                    "date": 1745880148112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,19 +60,140 @@\n ```bash\r\n npm start\r\n ```\r\n \r\n-## 主要接口\r\n+## API 接口文档\r\n \r\n-- `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n-- `POST /api/auth/refresh` 刷新 accessToken\r\n-- `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n-- `POST /api/category` 新建分类（需认证）\r\n-- `GET /api/category` 获取分类树（需认证）\r\n+### 认证接口\r\n \r\n+#### 1. 用户登录\r\n+- **接口**：`POST /api/auth/login`\r\n+- **描述**：用户登录，返回访问令牌和刷新令牌\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"accessToken\": \"string\",\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"User not found\" / \"Invalid password\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 刷新令牌\r\n+- **接口**：`POST /api/auth/refresh`\r\n+- **描述**：使用刷新令牌获取新的访问令牌\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"accessToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No refresh token\" / \"Invalid refresh token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 3. 注销登录\r\n+- **接口**：`POST /api/auth/logout`\r\n+- **描述**：注销用户并使刷新令牌失效\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"refreshToken\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"message\": \"Logged out\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No refresh token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+### 分类接口\r\n+\r\n+#### 1. 创建分类\r\n+- **接口**：`POST /api/category`\r\n+- **描述**：创建新的分类（支持无限级嵌套）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"parentId\": \"number | null\",\r\n+    \"description\": \"string | null\"\r\n+  }\r\n+  ```\r\n+- **响应**：返回创建的分类对象\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"name\": \"string\",\r\n+    \"parentId\": \"number | null\",\r\n+    \"description\": \"string | null\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 获取分类树\r\n+- **接口**：`GET /api/category`\r\n+- **描述**：获取完整的分类树结构\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：返回树形结构的分类列表\r\n+  ```json\r\n+  [\r\n+    {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"parentId\": null,\r\n+      \"description\": \"string\",\r\n+      \"children\": [\r\n+        {\r\n+          \"id\": \"number\",\r\n+          \"name\": \"string\",\r\n+          \"parentId\": \"number\",\r\n+          \"description\": \"string\",\r\n+          \"children\": []\r\n+        }\r\n+      ]\r\n+    }\r\n+  ]\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n - 实现基础认证、分类接口\r\n+- 添加详细的 API 接口文档\r\n"
                },
                {
                    "date": 1745880200907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n \r\n ### 认证接口\r\n \r\n #### 1. 用户登录\r\n+\r\n - **接口**：`POST /api/auth/login`\r\n - **描述**：用户登录，返回访问令牌和刷新令牌\r\n - **请求体**：\r\n   ```json\r\n@@ -86,8 +87,9 @@\n   - 401: \"User not found\" / \"Invalid password\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 2. 刷新令牌\r\n+\r\n - **接口**：`POST /api/auth/refresh`\r\n - **描述**：使用刷新令牌获取新的访问令牌\r\n - **请求体**：\r\n   ```json\r\n@@ -105,8 +107,9 @@\n   - 401: \"No refresh token\" / \"Invalid refresh token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 3. 注销登录\r\n+\r\n - **接口**：`POST /api/auth/logout`\r\n - **描述**：注销用户并使刷新令牌失效\r\n - **请求体**：\r\n   ```json\r\n@@ -126,8 +129,9 @@\n \r\n ### 分类接口\r\n \r\n #### 1. 创建分类\r\n+\r\n - **接口**：`POST /api/category`\r\n - **描述**：创建新的分类（支持无限级嵌套）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n@@ -157,8 +161,9 @@\n   - 401: \"No token provided\" / \"Invalid or expired token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n #### 2. 获取分类树\r\n+\r\n - **接口**：`GET /api/category`\r\n - **描述**：获取完整的分类树结构\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n@@ -195,5 +200,5 @@\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n - 实现基础认证、分类接口\r\n-- 添加详细的 API 接口文档\n\\ No newline at end of file\n+- 添加详细的 API 接口文档\r\n"
                },
                {
                    "date": 1745880471940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,13 @@\n │   ├── refreshToken.model.js\r\n │   └── tokenBlacklist.model.js\r\n ├── controllers/\r\n │   ├── auth.controller.js\r\n+│   ├── user.controller.js\r\n │   ├── category.controller.js\r\n ├── routes/\r\n │   ├── auth.routes.js\r\n+│   ├── user.routes.js\r\n │   ├── category.routes.js\r\n │   └── index.js\r\n ├── middlewares/\r\n │   ├── auth.js\r\n@@ -46,8 +48,10 @@\n │   └── rbac.service.js\r\n ├── utils/\r\n │   ├── jwt.js\r\n │   └── response.js\r\n+├── seeders/\r\n+│   └── init.js\r\n ```\r\n \r\n ## 环境配置\r\n \r\n@@ -60,8 +64,13 @@\n ```bash\r\n npm start\r\n ```\r\n \r\n+## 默认账户\r\n+\r\n+- 管理员账号：admin\r\n+- 管理员密码：admin123\r\n+\r\n ## API 接口文档\r\n \r\n ### 认证接口\r\n \r\n@@ -126,8 +135,176 @@\n - **错误**：\r\n   - 401: \"No refresh token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n+### 用户管理接口\r\n+\r\n+#### 1. 创建用户\r\n+\r\n+- **接口**：`POST /api/users`\r\n+- **描述**：创建新用户（需要 create_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"roleIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"username\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\",\r\n+    \"Roles\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"name\": \"string\",\r\n+        \"description\": \"string\"\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 400: \"Username already exists\"\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 2. 获取用户列表\r\n+\r\n+- **接口**：`GET /api/users`\r\n+- **描述**：获取用户列表（需要 view_users 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **查询参数**：\r\n+  - page: 页码（默认：1）\r\n+  - limit: 每页数量（默认：10）\r\n+  - search: 搜索关键词\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"total\": \"number\",\r\n+    \"pages\": \"number\",\r\n+    \"currentPage\": \"number\",\r\n+    \"data\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"username\": \"string\",\r\n+        \"email\": \"string\",\r\n+        \"status\": \"boolean\",\r\n+        \"createdAt\": \"string\",\r\n+        \"updatedAt\": \"string\",\r\n+        \"Roles\": [\r\n+          {\r\n+            \"id\": \"number\",\r\n+            \"name\": \"string\",\r\n+            \"description\": \"string\"\r\n+          }\r\n+        ]\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 3. 获取单个用户\r\n+\r\n+- **接口**：`GET /api/users/:id`\r\n+- **描述**：获取指定用户信息（需要 view_users 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"id\": \"number\",\r\n+    \"username\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"createdAt\": \"string\",\r\n+    \"updatedAt\": \"string\",\r\n+    \"Roles\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"name\": \"string\",\r\n+        \"description\": \"string\"\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 4. 更新用户\r\n+\r\n+- **接口**：`PUT /api/users/:id`\r\n+- **描述**：更新指定用户信息（需要 update_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"username\": \"string\",\r\n+    \"password\": \"string\",\r\n+    \"email\": \"string\",\r\n+    \"status\": \"boolean\",\r\n+    \"roleIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：与获取单个用户接口相同\r\n+- **错误**：\r\n+  - 400: \"Username already exists\"\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n+#### 5. 删除用户\r\n+\r\n+- **接口**：`DELETE /api/users/:id`\r\n+- **描述**：删除指定用户（需要 delete_user 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"message\": \"User deleted successfully\"\r\n+  }\r\n+  ```\r\n+- **错误**：\r\n+  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n+  - 403: \"Forbidden\"\r\n+  - 404: \"User not found\"\r\n+  - 500: \"Internal Server Error\"\r\n+\r\n ### 分类接口\r\n \r\n #### 1. 创建分类\r\n \r\n@@ -195,8 +372,15 @@\n   - 500: \"Internal Server Error\"\r\n \r\n ## 更新日志（Changelog）\r\n \r\n+### v1.0.1 (2024-03-19)\r\n+\r\n+- 添加用户管理模块（CRUD接口）\r\n+- 实现数据库初始化脚本\r\n+- 添加默认管理员账户\r\n+- 完善接口文档\r\n+\r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n"
                },
                {
                    "date": 1745880496456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,9 @@\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.1 (2024-03-19)\r\n \r\n-- 添加用户管理模块（CRUD接口）\r\n+- 添加用户管理模块（CRUD 接口）\r\n - 实现数据库初始化脚本\r\n - 添加默认管理员账户\r\n - 完善接口文档\r\n \r\n"
                },
                {
                    "date": 1745881604778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,8 +370,41 @@\n - **错误**：\r\n   - 401: \"No token provided\" / \"Invalid or expired token\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n+## RBAC 权限管理\r\n+\r\n+### 权限检查流程\r\n+\r\n+1. 用户登录后获取访问令牌（Access Token）\r\n+2. 访问需要权限的接口时，需要在请求头中携带访问令牌\r\n+3. 系统会自动检查用户是否具有所需权限：\r\n+   - 通过 Token 解析用户身份\r\n+   - 查询用户关联的角色\r\n+   - 检查角色是否具有所需权限\r\n+   - 如果没有权限，返回 403 错误\r\n+\r\n+### 默认权限列表\r\n+\r\n+| 权限名称 | 描述 | 所属角色 |\r\n+|---------|------|---------|\r\n+| create_user | 创建用户 | admin |\r\n+| view_users | 查看用户 | admin, user |\r\n+| update_user | 更新用户 | admin |\r\n+| delete_user | 删除用户 | admin |\r\n+| manage_roles | 管理角色 | admin |\r\n+| manage_categories | 管理分类 | admin |\r\n+\r\n+### 默认角色\r\n+\r\n+1. **管理员(admin)**\r\n+   - 拥有所有权限\r\n+   - 可以管理用户、角色、权限和分类\r\n+\r\n+2. **普通用户(user)**\r\n+   - 仅拥有查看权限\r\n+   - 可以查看用户列表和用户详情\r\n+\r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.1 (2024-03-19)\r\n \r\n@@ -379,8 +412,15 @@\n - 实现数据库初始化脚本\r\n - 添加默认管理员账户\r\n - 完善接口文档\r\n \r\n+### v1.0.2 (2024-03-19)\r\n+\r\n+- 优化 RBAC 权限管理模块\r\n+- 修复数据库同步问题\r\n+- 完善权限检查机制\r\n+- 更新文档，添加 RBAC 权限管理说明\r\n+\r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n"
                },
                {
                    "date": 1745923811916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -384,20 +384,21 @@\n    - 如果没有权限，返回 403 错误\r\n \r\n ### 默认权限列表\r\n \r\n-| 权限名称 | 描述 | 所属角色 |\r\n-|---------|------|---------|\r\n-| create_user | 创建用户 | admin |\r\n-| view_users | 查看用户 | admin, user |\r\n-| update_user | 更新用户 | admin |\r\n-| delete_user | 删除用户 | admin |\r\n-| manage_roles | 管理角色 | admin |\r\n-| manage_categories | 管理分类 | admin |\r\n+| 权限名称          | 描述     | 所属角色    |\r\n+| ----------------- | -------- | ----------- |\r\n+| create_user       | 创建用户 | admin       |\r\n+| view_users        | 查看用户 | admin, user |\r\n+| update_user       | 更新用户 | admin       |\r\n+| delete_user       | 删除用户 | admin       |\r\n+| manage_roles      | 管理角色 | admin       |\r\n+| manage_categories | 管理分类 | admin       |\r\n \r\n ### 默认角色\r\n \r\n 1. **管理员(admin)**\r\n+\r\n    - 拥有所有权限\r\n    - 可以管理用户、角色、权限和分类\r\n \r\n 2. **普通用户(user)**\r\n"
                },
                {
                    "date": 1745923823639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,8 +404,61 @@\n 2. **普通用户(user)**\r\n    - 仅拥有查看权限\r\n    - 可以查看用户列表和用户详情\r\n \r\n+## 接口响应格式\r\n+\r\n+### 成功响应\r\n+\r\n+```json\r\n+{\r\n+  \"code\": 200,\r\n+  \"message\": \"Success\",\r\n+  \"data\": {\r\n+    // 响应数据\r\n+  }\r\n+}\r\n+```\r\n+\r\n+### 分页响应\r\n+\r\n+```json\r\n+{\r\n+  \"code\": 200,\r\n+  \"message\": \"Success\",\r\n+  \"data\": {\r\n+    \"list\": [\r\n+      // 数据列表\r\n+    ],\r\n+    \"pagination\": {\r\n+      \"total\": 100,      // 总记录数\r\n+      \"current\": 1,      // 当前页码\r\n+      \"pageSize\": 10,    // 每页大小\r\n+      \"totalPages\": 10   // 总页数\r\n+    }\r\n+  }\r\n+}\r\n+```\r\n+\r\n+### 错误响应\r\n+\r\n+```json\r\n+{\r\n+  \"code\": 400,          // 错误码\r\n+  \"message\": \"错误信息\",  // 错误描述\r\n+  \"data\": null\r\n+}\r\n+```\r\n+\r\n+### 常见错误码\r\n+\r\n+- 200: 成功\r\n+- 400: 请求参数错误\r\n+- 401: 未认证或认证失败\r\n+- 403: 权限不足\r\n+- 404: 资源不存在\r\n+- 500: 服务器内部错误\r\n+\r\n ## 更新日志（Changelog）\r\n \r\n ### v1.0.1 (2024-03-19)\r\n \r\n@@ -420,8 +473,15 @@\n - 修复数据库同步问题\r\n - 完善权限检查机制\r\n - 更新文档，添加 RBAC 权限管理说明\r\n \r\n+### v1.0.3 (2024-03-19)\r\n+\r\n+- 统一接口响应格式\r\n+- 添加分页响应格式\r\n+- 完善错误处理机制\r\n+- 更新接口文档\r\n+\r\n ### v1.0.0\r\n \r\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n"
                },
                {
                    "date": 1745923835909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,12 +429,12 @@\n     \"list\": [\r\n       // 数据列表\r\n     ],\r\n     \"pagination\": {\r\n-      \"total\": 100,      // 总记录数\r\n-      \"current\": 1,      // 当前页码\r\n-      \"pageSize\": 10,    // 每页大小\r\n-      \"totalPages\": 10   // 总页数\r\n+      \"total\": 100, // 总记录数\r\n+      \"current\": 1, // 当前页码\r\n+      \"pageSize\": 10, // 每页大小\r\n+      \"totalPages\": 10 // 总页数\r\n     }\r\n   }\r\n }\r\n ```\r\n@@ -442,10 +442,10 @@\n ### 错误响应\r\n \r\n ```json\r\n {\r\n-  \"code\": 400,          // 错误码\r\n-  \"message\": \"错误信息\",  // 错误描述\r\n+  \"code\": 400, // 错误码\r\n+  \"message\": \"错误信息\", // 错误描述\r\n   \"data\": null\r\n }\r\n ```\r\n \r\n"
                },
                {
                    "date": 1745923959890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,15 +87,45 @@\n   ```\r\n - **响应**：\r\n   ```json\r\n   {\r\n-    \"accessToken\": \"string\",\r\n-    \"refreshToken\": \"string\"\r\n+    \"code\": 200,\r\n+    \"message\": \"Login successful\",\r\n+    \"data\": {\r\n+      \"user\": {\r\n+        \"id\": \"number\",\r\n+        \"username\": \"string\",\r\n+        \"email\": \"string\",\r\n+        \"status\": \"boolean\",\r\n+        \"roles\": [\r\n+          {\r\n+            \"id\": \"number\",\r\n+            \"name\": \"string\",\r\n+            \"description\": \"string\",\r\n+            \"Permissions\": [\r\n+              {\r\n+                \"id\": \"number\",\r\n+                \"name\": \"string\",\r\n+                \"action\": \"string\",\r\n+                \"resource\": \"string\"\r\n+              }\r\n+            ]\r\n+          }\r\n+        ]\r\n+      },\r\n+      \"accessToken\": \"string\",\r\n+      \"refreshToken\": \"string\"\r\n+    }\r\n   }\r\n   ```\r\n-- **错误**：\r\n-  - 401: \"User not found\" / \"Invalid password\"\r\n-  - 500: \"Internal Server Error\"\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 401,\r\n+    \"message\": \"User not found\" | \"Invalid password\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n \r\n #### 2. 刷新令牌\r\n \r\n - **接口**：`POST /api/auth/refresh`\r\n@@ -108,14 +138,23 @@\n   ```\r\n - **响应**：\r\n   ```json\r\n   {\r\n-    \"accessToken\": \"string\"\r\n+    \"code\": 200,\r\n+    \"message\": \"Token refreshed successfully\",\r\n+    \"data\": {\r\n+      \"accessToken\": \"string\"\r\n+    }\r\n   }\r\n   ```\r\n-- **错误**：\r\n-  - 401: \"No refresh token\" / \"Invalid refresh token\"\r\n-  - 500: \"Internal Server Error\"\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 401,\r\n+    \"message\": \"No refresh token provided\" | \"Invalid refresh token\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n \r\n #### 3. 注销登录\r\n \r\n - **接口**：`POST /api/auth/logout`\r\n@@ -128,14 +167,21 @@\n   ```\r\n - **响应**：\r\n   ```json\r\n   {\r\n-    \"message\": \"Logged out\"\r\n+    \"code\": 200,\r\n+    \"message\": \"Logged out successfully\",\r\n+    \"data\": null\r\n   }\r\n   ```\r\n-- **错误**：\r\n-  - 401: \"No refresh token\"\r\n-  - 500: \"Internal Server Error\"\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 401,\r\n+    \"message\": \"No refresh token provided\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n \r\n ### 用户管理接口\r\n \r\n #### 1. 创建用户\r\n"
                },
                {
                    "date": 1745925615606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,12 +351,12 @@\n   - 500: \"Internal Server Error\"\r\n \r\n ### 分类接口\r\n \r\n-#### 1. 创建分类\r\n+#### 1. 创建分类类型\r\n \r\n-- **接口**：`POST /api/category`\r\n-- **描述**：创建新的分类（支持无限级嵌套）\r\n+- **接口**：`POST /api/category-types`\r\n+- **描述**：创建新的分类类型（需要 manage_categories 权限）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n   ```\r\n   Authorization: Bearer <accessToken>\r\n@@ -364,60 +364,223 @@\n - **请求体**：\r\n   ```json\r\n   {\r\n     \"name\": \"string\",\r\n-    \"parentId\": \"number | null\",\r\n-    \"description\": \"string | null\"\r\n+    \"code\": \"string\",\r\n+    \"description\": \"string\",\r\n+    \"status\": \"boolean\"\r\n   }\r\n   ```\r\n-- **响应**：返回创建的分类对象\r\n+- **响应**：\r\n   ```json\r\n   {\r\n-    \"id\": \"number\",\r\n-    \"name\": \"string\",\r\n-    \"parentId\": \"number | null\",\r\n-    \"description\": \"string | null\",\r\n-    \"createdAt\": \"string\",\r\n-    \"updatedAt\": \"string\"\r\n+    \"code\": 200,\r\n+    \"message\": \"Category type created successfully\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"code\": \"string\",\r\n+      \"description\": \"string\",\r\n+      \"status\": \"boolean\",\r\n+      \"createdAt\": \"string\",\r\n+      \"updatedAt\": \"string\"\r\n+    }\r\n   }\r\n   ```\r\n-- **错误**：\r\n-  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n-  - 500: \"Internal Server Error\"\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"Category type code already exists\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n \r\n-#### 2. 获取分类树\r\n+#### 2. 获取分类类型列表\r\n \r\n-- **接口**：`GET /api/category`\r\n-- **描述**：获取完整的分类树结构\r\n+- **接口**：`GET /api/category-types`\r\n+- **描述**：获取所有分类类型\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n   ```\r\n   Authorization: Bearer <accessToken>\r\n   ```\r\n-- **响应**：返回树形结构的分类列表\r\n+- **查询参数**：\r\n+  - `page`: 页码（默认：1）\r\n+  - `pageSize`: 每页数量（默认：10）\r\n+  - `status`: 状态过滤（可选）\r\n+- **响应**：\r\n   ```json\r\n-  [\r\n-    {\r\n-      \"id\": \"number\",\r\n-      \"name\": \"string\",\r\n-      \"parentId\": null,\r\n-      \"description\": \"string\",\r\n-      \"children\": [\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Success\",\r\n+    \"data\": {\r\n+      \"total\": \"number\",\r\n+      \"items\": [\r\n         {\r\n           \"id\": \"number\",\r\n           \"name\": \"string\",\r\n-          \"parentId\": \"number\",\r\n+          \"code\": \"string\",\r\n           \"description\": \"string\",\r\n-          \"children\": []\r\n+          \"status\": \"boolean\",\r\n+          \"createdAt\": \"string\",\r\n+          \"updatedAt\": \"string\"\r\n         }\r\n       ]\r\n     }\r\n-  ]\r\n+  }\r\n   ```\r\n-- **错误**：\r\n-  - 401: \"No token provided\" / \"Invalid or expired token\"\r\n-  - 500: \"Internal Server Error\"\r\n \r\n+#### 3. 创建分类\r\n+\r\n+- **接口**：`POST /api/categories`\r\n+- **描述**：创建新的分类（需要 manage_categories 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"code\": \"string\",\r\n+    \"typeId\": \"number\",\r\n+    \"parentId\": \"number\",\r\n+    \"sort\": \"number\",\r\n+    \"description\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Category created successfully\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"code\": \"string\",\r\n+      \"typeId\": \"number\",\r\n+      \"parentId\": \"number\",\r\n+      \"sort\": \"number\",\r\n+      \"description\": \"string\",\r\n+      \"createdAt\": \"string\",\r\n+      \"updatedAt\": \"string\"\r\n+    }\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"Category code already exists under the same type\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 4. 获取分类树\r\n+\r\n+- **接口**：`GET /api/categories/tree`\r\n+- **描述**：获取指定类型的分类树结构\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **查询参数**：\r\n+  - `typeId`: 分类类型ID（必填）\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Success\",\r\n+    \"data\": [\r\n+      {\r\n+        \"id\": \"number\",\r\n+        \"name\": \"string\",\r\n+        \"code\": \"string\",\r\n+        \"typeId\": \"number\",\r\n+        \"sort\": \"number\",\r\n+        \"description\": \"string\",\r\n+        \"children\": [\r\n+          {\r\n+            \"id\": \"number\",\r\n+            \"name\": \"string\",\r\n+            \"code\": \"string\",\r\n+            \"typeId\": \"number\",\r\n+            \"parentId\": \"number\",\r\n+            \"sort\": \"number\",\r\n+            \"description\": \"string\"\r\n+          }\r\n+        ]\r\n+      }\r\n+    ]\r\n+  }\r\n+  ```\r\n+\r\n+#### 5. 更新分类\r\n+\r\n+- **接口**：`PUT /api/categories/:id`\r\n+- **描述**：更新指定分类（需要 manage_categories 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"code\": \"string\",\r\n+    \"parentId\": \"number\",\r\n+    \"sort\": \"number\",\r\n+    \"description\": \"string\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Category updated successfully\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"code\": \"string\",\r\n+      \"typeId\": \"number\",\r\n+      \"parentId\": \"number\",\r\n+      \"sort\": \"number\",\r\n+      \"description\": \"string\",\r\n+      \"updatedAt\": \"string\"\r\n+    }\r\n+  }\r\n+  ```\r\n+\r\n+#### 6. 删除分类\r\n+\r\n+- **接口**：`DELETE /api/categories/:id`\r\n+- **描述**：删除指定分类（需要 manage_categories 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Category deleted successfully\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"Cannot delete category with children\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n ## RBAC 权限管理\r\n \r\n ### 权限检查流程\r\n \r\n@@ -532,4 +695,21 @@\n - 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n - 支持用户、角色、权限、分类、Token 等基础模型\r\n - 实现基础认证、分类接口\r\n - 添加详细的 API 接口文档\r\n+\r\n+### v0.2.0 (2024-03-xx)\r\n+- 新增分类管理功能\r\n+  - 支持分类类型管理\r\n+  - 支持无限级分类\r\n+  - 分类代码唯一性校验\r\n+  - 分类树形结构查询\r\n+- 完善 API 文档\r\n+  - 新增分类管理接口文档\r\n+  - 更新用户管理接口文档\r\n+\r\n+### v0.1.0 (2024-03-xx)\r\n+- 初始版本\r\n+  - 基础 RBAC 权限模型\r\n+  - JWT 双 Token 认证\r\n+  - 用户管理功能\r\n+  - 角色权限管理\r\n"
                },
                {
                    "date": 1745925654764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -486,9 +486,9 @@\n   ```\r\n   Authorization: Bearer <accessToken>\r\n   ```\r\n - **查询参数**：\r\n-  - `typeId`: 分类类型ID（必填）\r\n+  - `typeId`: 分类类型 ID（必填）\r\n - **响应**：\r\n   ```json\r\n   {\r\n     \"code\": 200,\r\n@@ -697,8 +697,9 @@\n - 实现基础认证、分类接口\r\n - 添加详细的 API 接口文档\r\n \r\n ### v0.2.0 (2024-03-xx)\r\n+\r\n - 新增分类管理功能\r\n   - 支持分类类型管理\r\n   - 支持无限级分类\r\n   - 分类代码唯一性校验\r\n@@ -707,8 +708,9 @@\n   - 新增分类管理接口文档\r\n   - 更新用户管理接口文档\r\n \r\n ### v0.1.0 (2024-03-xx)\r\n+\r\n - 初始版本\r\n   - 基础 RBAC 权限模型\r\n   - JWT 双 Token 认证\r\n   - 用户管理功能\r\n"
                },
                {
                    "date": 1745926326936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,9 +349,9 @@\n   - 403: \"Forbidden\"\r\n   - 404: \"User not found\"\r\n   - 500: \"Internal Server Error\"\r\n \r\n-### 分类接口\r\n+### 分类类型接口\r\n \r\n #### 1. 创建分类类型\r\n \r\n - **接口**：`POST /api/category-types`\r\n@@ -406,9 +406,9 @@\n   ```\r\n - **查询参数**：\r\n   - `page`: 页码（默认：1）\r\n   - `pageSize`: 每页数量（默认：10）\r\n-  - `status`: 状态过滤（可选）\r\n+  - `status`: 状态过滤（可选，true/false）\r\n - **响应**：\r\n   ```json\r\n   {\r\n     \"code\": 200,\r\n@@ -424,15 +424,138 @@\n           \"status\": \"boolean\",\r\n           \"createdAt\": \"string\",\r\n           \"updatedAt\": \"string\"\r\n         }\r\n-      ]\r\n+      ],\r\n+      \"currentPage\": \"number\",\r\n+      \"pageSize\": \"number\",\r\n+      \"totalPages\": \"number\"\r\n     }\r\n   }\r\n   ```\r\n \r\n-#### 3. 创建分类\r\n+#### 3. 获取单个分类类型\r\n \r\n+- **接口**：`GET /api/category-types/:id`\r\n+- **描述**：获取指定分类类型的详细信息\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Success\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"code\": \"string\",\r\n+      \"description\": \"string\",\r\n+      \"status\": \"boolean\",\r\n+      \"createdAt\": \"string\",\r\n+      \"updatedAt\": \"string\"\r\n+    }\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"Category type not found\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 4. 更新分类类型\r\n+\r\n+- **接口**：`PUT /api/category-types/:id`\r\n+- **描述**：更新指定分类类型（需要 manage_categories 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"code\": \"string\",\r\n+    \"description\": \"string\",\r\n+    \"status\": \"boolean\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Category type updated successfully\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"code\": \"string\",\r\n+      \"description\": \"string\",\r\n+      \"status\": \"boolean\",\r\n+      \"updatedAt\": \"string\"\r\n+    }\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"Category type code already exists\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+  或\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"Category type not found\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 5. 删除分类类型\r\n+\r\n+- **接口**：`DELETE /api/category-types/:id`\r\n+- **描述**：删除指定分类类型（需要 manage_categories 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"Category type deleted successfully\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"Cannot delete category type with associated categories\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+  或\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"Category type not found\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+### 分类接口\r\n+\r\n+#### 1. 创建分类\r\n+\r\n - **接口**：`POST /api/categories`\r\n - **描述**：创建新的分类（需要 manage_categories 权限）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n@@ -476,9 +599,9 @@\n     \"data\": null\r\n   }\r\n   ```\r\n \r\n-#### 4. 获取分类树\r\n+#### 2. 获取分类树\r\n \r\n - **接口**：`GET /api/categories/tree`\r\n - **描述**：获取指定类型的分类树结构\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n@@ -516,9 +639,9 @@\n     ]\r\n   }\r\n   ```\r\n \r\n-#### 5. 更新分类\r\n+#### 3. 更新分类\r\n \r\n - **接口**：`PUT /api/categories/:id`\r\n - **描述**：更新指定分类（需要 manage_categories 权限）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n@@ -553,9 +676,9 @@\n     }\r\n   }\r\n   ```\r\n \r\n-#### 6. 删除分类\r\n+#### 4. 删除分类\r\n \r\n - **接口**：`DELETE /api/categories/:id`\r\n - **描述**：删除指定分类（需要 manage_categories 权限）\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n"
                },
                {
                    "date": 1745936363434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,10 +608,14 @@\n - **请求头**：\r\n   ```\r\n   Authorization: Bearer <accessToken>\r\n   ```\r\n-- **查询参数**：\r\n-  - `typeId`: 分类类型 ID（必填）\r\n+- **请求参数**：\r\n+  - `typeId`: 分类类型 ID（必填，需要在URL中指定）\r\n+- **示例请求**：\r\n+  ```\r\n+  GET /api/categories/tree?typeId=1\r\n+  ```\r\n - **响应**：\r\n   ```json\r\n   {\r\n     \"code\": 200,\r\n@@ -638,8 +642,16 @@\n       }\r\n     ]\r\n   }\r\n   ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"TypeId is required\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n \r\n #### 3. 更新分类\r\n \r\n - **接口**：`PUT /api/categories/:id`\r\n"
                },
                {
                    "date": 1745936410287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -601,9 +601,9 @@\n   ```\r\n \r\n #### 2. 获取分类树\r\n \r\n-- **接口**：`GET /api/categories/tree`\r\n+- **接口**：`GET /api/categories/tree?typeId={typeId}`\r\n - **描述**：获取指定类型的分类树结构\r\n - **认证**：需要有效的访问令牌（Bearer Token）\r\n - **请求头**：\r\n   ```\r\n"
                },
                {
                    "date": 1745936418900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -609,9 +609,9 @@\n   ```\r\n   Authorization: Bearer <accessToken>\r\n   ```\r\n - **请求参数**：\r\n-  - `typeId`: 分类类型 ID（必填，需要在URL中指定）\r\n+  - `typeId`: 分类类型 ID（必填，需要在 URL 中指定）\r\n - **示例请求**：\r\n   ```\r\n   GET /api/categories/tree?typeId=1\r\n   ```\r\n"
                },
                {
                    "date": 1745936774062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -714,8 +714,210 @@\n     \"data\": null\r\n   }\r\n   ```\r\n \r\n+### 角色管理接口\r\n+\r\n+#### 1. 创建角色\r\n+\r\n+- **接口**：`POST /api/roles`\r\n+- **描述**：创建新角色（需要 manage_roles 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"description\": \"string\",\r\n+    \"permissionIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"角色创建成功\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"description\": \"string\",\r\n+      \"createdAt\": \"string\",\r\n+      \"updatedAt\": \"string\",\r\n+      \"Permissions\": [\r\n+        {\r\n+          \"id\": \"number\",\r\n+          \"name\": \"string\",\r\n+          \"action\": \"string\",\r\n+          \"resource\": \"string\"\r\n+        }\r\n+      ]\r\n+    }\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"角色名已存在\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 2. 获取角色列表\r\n+\r\n+- **接口**：`GET /api/roles`\r\n+- **描述**：获取角色列表（需要 view_roles 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **查询参数**：\r\n+  - `page`: 页码（默认：1）\r\n+  - `limit`: 每页数量（默认：10）\r\n+  - `search`: 搜索关键词\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"获取角色列表成功\",\r\n+    \"data\": {\r\n+      \"total\": \"number\",\r\n+      \"pages\": \"number\",\r\n+      \"currentPage\": \"number\",\r\n+      \"data\": [\r\n+        {\r\n+          \"id\": \"number\",\r\n+          \"name\": \"string\",\r\n+          \"description\": \"string\",\r\n+          \"createdAt\": \"string\",\r\n+          \"updatedAt\": \"string\",\r\n+          \"Permissions\": [\r\n+            {\r\n+              \"id\": \"number\",\r\n+              \"name\": \"string\",\r\n+              \"action\": \"string\",\r\n+              \"resource\": \"string\"\r\n+            }\r\n+          ]\r\n+        }\r\n+      ]\r\n+    }\r\n+  }\r\n+  ```\r\n+\r\n+#### 3. 获取单个角色\r\n+\r\n+- **接口**：`GET /api/roles/:id`\r\n+- **描述**：获取指定角色信息（需要 view_roles 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"获取角色成功\",\r\n+    \"data\": {\r\n+      \"id\": \"number\",\r\n+      \"name\": \"string\",\r\n+      \"description\": \"string\",\r\n+      \"createdAt\": \"string\",\r\n+      \"updatedAt\": \"string\",\r\n+      \"Permissions\": [\r\n+        {\r\n+          \"id\": \"number\",\r\n+          \"name\": \"string\",\r\n+          \"action\": \"string\",\r\n+          \"resource\": \"string\"\r\n+        }\r\n+      ]\r\n+    }\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"角色不存在\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 4. 更新角色\r\n+\r\n+- **接口**：`PUT /api/roles/:id`\r\n+- **描述**：更新指定角色信息（需要 manage_roles 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **请求体**：\r\n+  ```json\r\n+  {\r\n+    \"name\": \"string\",\r\n+    \"description\": \"string\",\r\n+    \"permissionIds\": \"number[]\"\r\n+  }\r\n+  ```\r\n+- **响应**：与获取单个角色接口相同\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"角色名已存在\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+  或\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"角色不存在\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n+#### 5. 删除角色\r\n+\r\n+- **接口**：`DELETE /api/roles/:id`\r\n+- **描述**：删除指定角色（需要 manage_roles 权限）\r\n+- **认证**：需要有效的访问令牌（Bearer Token）\r\n+- **请求头**：\r\n+  ```\r\n+  Authorization: Bearer <accessToken>\r\n+  ```\r\n+- **响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 200,\r\n+    \"message\": \"角色删除成功\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+- **错误响应**：\r\n+  ```json\r\n+  {\r\n+    \"code\": 400,\r\n+    \"message\": \"无法删除，该角色下存在用户\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+  或\r\n+  ```json\r\n+  {\r\n+    \"code\": 404,\r\n+    \"message\": \"角色不存在\",\r\n+    \"data\": null\r\n+  }\r\n+  ```\r\n+\r\n ## RBAC 权限管理\r\n \r\n ### 权限检查流程\r\n \r\n"
                }
            ],
            "date": 1745848057855,
            "name": "Commit-0",
            "content": "# CRM Server\r\n\r\n基于 Node.js + Express + Sequelize + SQL Server 的 CRM 权限管理基础模块，支持 RBAC 权限模型、JWT 双 Token 认证、无限级分类。\r\n\r\n## 技术栈\r\n- Node.js\r\n- Express\r\n- Sequelize (ORM)\r\n- SQL Server (MSSQL)\r\n- JWT (jsonwebtoken)\r\n- bcryptjs\r\n- dotenv\r\n\r\n## 目录结构\r\n```\r\n├── .env\r\n├── .gitignore\r\n├── package.json\r\n├── app.js\r\n├── config/\r\n│   ├── database.js\r\n│   └── auth.js\r\n├── models/\r\n│   ├── index.js\r\n│   ├── user.model.js\r\n│   ├── role.model.js\r\n│   ├── permission.model.js\r\n│   ├── category.model.js\r\n│   ├── refreshToken.model.js\r\n│   └── tokenBlacklist.model.js\r\n├── controllers/\r\n│   ├── auth.controller.js\r\n│   ├── category.controller.js\r\n├── routes/\r\n│   ├── auth.routes.js\r\n│   ├── category.routes.js\r\n│   └── index.js\r\n├── middlewares/\r\n│   ├── auth.js\r\n│   ├── rbac.js\r\n│   └── errorHandler.js\r\n├── services/\r\n│   ├── auth.service.js\r\n│   └── rbac.service.js\r\n├── utils/\r\n│   ├── jwt.js\r\n│   └── response.js\r\n```\r\n\r\n## 环境配置\r\n1. 安装依赖：`npm install`\r\n2. 配置 `.env` 文件，填写数据库和 JWT 密钥等信息\r\n3. 启动 SQL Server 并创建数据库\r\n\r\n## 启动方式\r\n```bash\r\nnpm start\r\n```\r\n\r\n## 主要接口\r\n- `POST /api/auth/login` 用户登录，返回 accessToken 和 refreshToken\r\n- `POST /api/auth/refresh` 刷新 accessToken\r\n- `POST /api/auth/logout` 注销并拉黑 refreshToken\r\n- `POST /api/category` 新建分类（需认证）\r\n- `GET /api/category` 获取分类树（需认证）\r\n\r\n## 更新日志（Changelog）\r\n\r\n### v1.0.0\r\n- 项目初始化，完成 RBAC 权限管理、JWT 双 Token 认证、无限级分类基础模块\r\n- 支持用户、角色、权限、分类、Token 等基础模型\r\n- 实现基础认证、分类接口 "
        }
    ]
}