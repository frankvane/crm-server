{
    "sourceFile": "utils/jwt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1745924019557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745924080703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,29 +5,30 @@\n const generateAccessToken = (user) => {\r\n   const payload = {\r\n     id: user.id,\r\n     username: user.username,\r\n-    roles: user.Roles?.map(role => ({\r\n-      id: role.id,\r\n-      name: role.name,\r\n-      permissions: role.Permissions?.map(p => p.name) || []\r\n-    })) || []\r\n+    roles:\r\n+      user.Roles?.map((role) => ({\r\n+        id: role.id,\r\n+        name: role.name,\r\n+        permissions: role.Permissions?.map((p) => p.name) || [],\r\n+      })) || [],\r\n   };\r\n-  \r\n+\r\n   return jwt.sign(payload, config.jwtSecret, {\r\n-    expiresIn: config.jwtExpiration\r\n+    expiresIn: config.jwtExpiration,\r\n   });\r\n };\r\n \r\n // 生成刷新令牌\r\n const generateRefreshToken = (user) => {\r\n   const payload = {\r\n     id: user.id,\r\n-    username: user.username\r\n+    username: user.username,\r\n   };\r\n-  \r\n+\r\n   return jwt.sign(payload, config.refreshTokenSecret, {\r\n-    expiresIn: config.refreshTokenExpiration\r\n+    expiresIn: config.refreshTokenExpiration,\r\n   });\r\n };\r\n \r\n // 验证访问令牌\r\n@@ -43,6 +44,6 @@\n module.exports = {\r\n   generateAccessToken,\r\n   generateRefreshToken,\r\n   verifyAccessToken,\r\n-  verifyRefreshToken\r\n+  verifyRefreshToken,\r\n };\r\n"
                },
                {
                    "date": 1745934657392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,12 @@\n         permissions: role.Permissions?.map((p) => p.name) || [],\r\n       })) || [],\r\n   };\r\n \r\n+  if (!config.jwtSecret) {\r\n+    console.error(\"JWT secret is not defined in configuration!\");\r\n+  }\r\n+\r\n   return jwt.sign(payload, config.jwtSecret, {\r\n     expiresIn: config.jwtExpiration,\r\n   });\r\n };\r\n@@ -25,21 +29,43 @@\n     id: user.id,\r\n     username: user.username,\r\n   };\r\n \r\n+  if (!config.refreshTokenSecret) {\r\n+    console.error(\"JWT refresh token secret is not defined in configuration!\");\r\n+  }\r\n+\r\n   return jwt.sign(payload, config.refreshTokenSecret, {\r\n     expiresIn: config.refreshTokenExpiration,\r\n   });\r\n };\r\n \r\n // 验证访问令牌\r\n const verifyAccessToken = (token) => {\r\n-  return jwt.verify(token, config.jwtSecret);\r\n+  try {\r\n+    if (!config.jwtSecret) {\r\n+      console.error(\"JWT secret is not defined in configuration!\");\r\n+    }\r\n+    \r\n+    return jwt.verify(token, config.jwtSecret);\r\n+  } catch (error) {\r\n+    console.error(\"JWT Token verification failed:\", error.message);\r\n+    throw error;\r\n+  }\r\n };\r\n \r\n // 验证刷新令牌\r\n const verifyRefreshToken = (token) => {\r\n-  return jwt.verify(token, config.refreshTokenSecret);\r\n+  try {\r\n+    if (!config.refreshTokenSecret) {\r\n+      console.error(\"JWT refresh token secret is not defined in configuration!\");\r\n+    }\r\n+    \r\n+    return jwt.verify(token, config.refreshTokenSecret);\r\n+  } catch (error) {\r\n+    console.error(\"JWT Refresh Token verification failed:\", error.message);\r\n+    throw error;\r\n+  }\r\n };\r\n \r\n module.exports = {\r\n   generateAccessToken,\r\n"
                }
            ],
            "date": 1745924019557,
            "name": "Commit-0",
            "content": "const jwt = require(\"jsonwebtoken\");\r\nconst config = require(\"../config/auth\");\r\n\r\n// 生成访问令牌\r\nconst generateAccessToken = (user) => {\r\n  const payload = {\r\n    id: user.id,\r\n    username: user.username,\r\n    roles: user.Roles?.map(role => ({\r\n      id: role.id,\r\n      name: role.name,\r\n      permissions: role.Permissions?.map(p => p.name) || []\r\n    })) || []\r\n  };\r\n  \r\n  return jwt.sign(payload, config.jwtSecret, {\r\n    expiresIn: config.jwtExpiration\r\n  });\r\n};\r\n\r\n// 生成刷新令牌\r\nconst generateRefreshToken = (user) => {\r\n  const payload = {\r\n    id: user.id,\r\n    username: user.username\r\n  };\r\n  \r\n  return jwt.sign(payload, config.refreshTokenSecret, {\r\n    expiresIn: config.refreshTokenExpiration\r\n  });\r\n};\r\n\r\n// 验证访问令牌\r\nconst verifyAccessToken = (token) => {\r\n  return jwt.verify(token, config.jwtSecret);\r\n};\r\n\r\n// 验证刷新令牌\r\nconst verifyRefreshToken = (token) => {\r\n  return jwt.verify(token, config.refreshTokenSecret);\r\n};\r\n\r\nmodule.exports = {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n  verifyAccessToken,\r\n  verifyRefreshToken\r\n};\r\n"
        }
    ]
}