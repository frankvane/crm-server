{
    "sourceFile": "controllers/user.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1745880370778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745923781031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const { User, Role } = require(\"../models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const { Op } = require(\"sequelize\");\r\n+const ResponseUtil = require(\"../utils/response\");\r\n \r\n // 创建用户\r\n exports.create = async (req, res, next) => {\r\n   try {\r\n@@ -9,15 +10,17 @@\n \r\n     // 检查用户名是否已存在\r\n     const existingUser = await User.findOne({ where: { username } });\r\n     if (existingUser) {\r\n-      return res.status(400).json({ message: \"Username already exists\" });\r\n+      return res.status(400).json(\r\n+        ResponseUtil.error(\"Username already exists\", 400)\r\n+      );\r\n     }\r\n \r\n     // 创建用户\r\n     const user = await User.create({\r\n       username,\r\n-      password, // 密码会在model的beforeCreate钩子中自动加密\r\n+      password,\r\n       email,\r\n       status: true,\r\n     });\r\n \r\n@@ -31,19 +34,21 @@\n       include: [{ model: Role, through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n-    res.status(201).json(userWithRoles);\r\n+    res.status(201).json(\r\n+      ResponseUtil.success(userWithRoles, \"User created successfully\")\r\n+    );\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n \r\n // 获取用户列表（支持分页和搜索）\r\n exports.list = async (req, res, next) => {\r\n   try {\r\n-    const { page = 1, limit = 10, search } = req.query;\r\n-    const offset = (page - 1) * limit;\r\n+    const { page = 1, pageSize = 10, search } = req.query;\r\n+    const offset = (page - 1) * pageSize;\r\n \r\n     const where = {};\r\n     if (search) {\r\n       where[Op.or] = [\r\n@@ -56,18 +61,13 @@\n       where,\r\n       include: [{ model: Role, through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n       offset,\r\n-      limit: parseInt(limit),\r\n+      limit: parseInt(pageSize),\r\n       distinct: true,\r\n     });\r\n \r\n-    res.json({\r\n-      total: count,\r\n-      pages: Math.ceil(count / limit),\r\n-      currentPage: parseInt(page),\r\n-      data: rows,\r\n-    });\r\n+    res.json(ResponseUtil.page(rows, count, parseInt(page), parseInt(pageSize)));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -80,12 +80,14 @@\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json(\r\n+        ResponseUtil.error(\"User not found\", 404)\r\n+      );\r\n     }\r\n \r\n-    res.json(user);\r\n+    res.json(ResponseUtil.success(user));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -96,16 +98,20 @@\n     const { username, email, password, roleIds, status } = req.body;\r\n     const user = await User.findByPk(req.params.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json(\r\n+        ResponseUtil.error(\"User not found\", 404)\r\n+      );\r\n     }\r\n \r\n     // 如果要更新用户名，检查是否与其他用户冲突\r\n     if (username && username !== user.username) {\r\n       const existingUser = await User.findOne({ where: { username } });\r\n       if (existingUser) {\r\n-        return res.status(400).json({ message: \"Username already exists\" });\r\n+        return res.status(400).json(\r\n+          ResponseUtil.error(\"Username already exists\", 400)\r\n+        );\r\n       }\r\n       user.username = username;\r\n     }\r\n \r\n@@ -126,9 +132,9 @@\n       include: [{ model: Role, through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n-    res.json(updatedUser);\r\n+    res.json(ResponseUtil.success(updatedUser, \"User updated successfully\"));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -138,13 +144,15 @@\n   try {\r\n     const user = await User.findByPk(req.params.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n+      return res.status(404).json(\r\n+        ResponseUtil.error(\"User not found\", 404)\r\n+      );\r\n     }\r\n \r\n     await user.destroy();\r\n-    res.json({ message: \"User deleted successfully\" });\r\n+    res.json(ResponseUtil.success(null, \"User deleted successfully\"));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1745923812259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n \r\n     // 检查用户名是否已存在\r\n     const existingUser = await User.findOne({ where: { username } });\r\n     if (existingUser) {\r\n-      return res.status(400).json(\r\n-        ResponseUtil.error(\"Username already exists\", 400)\r\n-      );\r\n+      return res\r\n+        .status(400)\r\n+        .json(ResponseUtil.error(\"Username already exists\", 400));\r\n     }\r\n \r\n     // 创建用户\r\n     const user = await User.create({\r\n@@ -34,11 +34,11 @@\n       include: [{ model: Role, through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n-    res.status(201).json(\r\n-      ResponseUtil.success(userWithRoles, \"User created successfully\")\r\n-    );\r\n+    res\r\n+      .status(201)\r\n+      .json(ResponseUtil.success(userWithRoles, \"User created successfully\"));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -65,9 +65,11 @@\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n     });\r\n \r\n-    res.json(ResponseUtil.page(rows, count, parseInt(page), parseInt(pageSize)));\r\n+    res.json(\r\n+      ResponseUtil.page(rows, count, parseInt(page), parseInt(pageSize))\r\n+    );\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -80,11 +82,9 @@\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     if (!user) {\r\n-      return res.status(404).json(\r\n-        ResponseUtil.error(\"User not found\", 404)\r\n-      );\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n     res.json(ResponseUtil.success(user));\r\n   } catch (err) {\r\n@@ -98,20 +98,18 @@\n     const { username, email, password, roleIds, status } = req.body;\r\n     const user = await User.findByPk(req.params.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json(\r\n-        ResponseUtil.error(\"User not found\", 404)\r\n-      );\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n     // 如果要更新用户名，检查是否与其他用户冲突\r\n     if (username && username !== user.username) {\r\n       const existingUser = await User.findOne({ where: { username } });\r\n       if (existingUser) {\r\n-        return res.status(400).json(\r\n-          ResponseUtil.error(\"Username already exists\", 400)\r\n-        );\r\n+        return res\r\n+          .status(400)\r\n+          .json(ResponseUtil.error(\"Username already exists\", 400));\r\n       }\r\n       user.username = username;\r\n     }\r\n \r\n@@ -144,11 +142,9 @@\n   try {\r\n     const user = await User.findByPk(req.params.id);\r\n \r\n     if (!user) {\r\n-      return res.status(404).json(\r\n-        ResponseUtil.error(\"User not found\", 404)\r\n-      );\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n     await user.destroy();\r\n     res.json(ResponseUtil.success(null, \"User deleted successfully\"));\r\n"
                },
                {
                    "date": 1745934292081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,4 +151,98 @@\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n+\r\n+// 修改用户密码\r\n+exports.changePassword = async (req, res, next) => {\r\n+  try {\r\n+    const { currentPassword, newPassword } = req.body;\r\n+    const userId = req.params.id;\r\n+    \r\n+    // 检查是否是用户本人修改密码，或者是管理员\r\n+    const isAdmin = req.user.roles && req.user.roles.some(role => role.name === 'admin');\r\n+    const isSelfUpdate = req.user.id === parseInt(userId);\r\n+    \r\n+    if (!isAdmin && !isSelfUpdate) {\r\n+      return res.status(403).json(\r\n+        ResponseUtil.error(\"You can only change your own password\", 403)\r\n+      );\r\n+    }\r\n+\r\n+    const user = await User.findByPk(userId);\r\n+    if (!user) {\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n+    }\r\n+    \r\n+    // 如果是用户本人修改，需要验证当前密码\r\n+    if (isSelfUpdate && currentPassword) {\r\n+      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\r\n+      if (!isValidPassword) {\r\n+        return res.status(400).json(\r\n+          ResponseUtil.error(\"Current password is incorrect\", 400)\r\n+        );\r\n+      }\r\n+    }\r\n+    \r\n+    // 更新密码\r\n+    user.password = await bcrypt.hash(newPassword, 10);\r\n+    await user.save();\r\n+    \r\n+    res.json(ResponseUtil.success(null, \"Password changed successfully\"));\r\n+  } catch (err) {\r\n+    next(err);\r\n+  }\r\n+};\r\n+\r\n+// 切换用户状态（启用/禁用）\r\n+exports.toggleStatus = async (req, res, next) => {\r\n+  try {\r\n+    const userId = req.params.id;\r\n+    const user = await User.findByPk(userId);\r\n+    \r\n+    if (!user) {\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n+    }\r\n+    \r\n+    // 切换状态\r\n+    user.status = !user.status;\r\n+    await user.save();\r\n+    \r\n+    const statusMessage = user.status ? \"enabled\" : \"disabled\";\r\n+    res.json(\r\n+      ResponseUtil.success(\r\n+        { id: user.id, status: user.status },\r\n+        `User ${statusMessage} successfully`\r\n+      )\r\n+    );\r\n+  } catch (err) {\r\n+    next(err);\r\n+  }\r\n+};\r\n+\r\n+// 批量删除用户\r\n+exports.batchDelete = async (req, res, next) => {\r\n+  try {\r\n+    const { ids } = req.body;\r\n+    \r\n+    if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n+      return res.status(400).json(\r\n+        ResponseUtil.error(\"Invalid user IDs provided\", 400)\r\n+      );\r\n+    }\r\n+    \r\n+    // 批量删除\r\n+    const result = await User.destroy({\r\n+      where: { id: { [Op.in]: ids } }\r\n+    });\r\n+    \r\n+    res.json(\r\n+      ResponseUtil.success(\r\n+        { deletedCount: result },\r\n+        `${result} users deleted successfully`\r\n+      )\r\n+    );\r\n+  } catch (err) {\r\n+    next(err);\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1745935376225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     }\r\n \r\n     // 获取包含角色的完整用户信息\r\n     const userWithRoles = await User.findByPk(user.id, {\r\n-      include: [{ model: Role, through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     res\r\n@@ -58,9 +58,9 @@\n     }\r\n \r\n     const { count, rows } = await User.findAndCountAll({\r\n       where,\r\n-      include: [{ model: Role, through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n@@ -77,9 +77,9 @@\n // 获取单个用户\r\n exports.getById = async (req, res, next) => {\r\n   try {\r\n     const user = await User.findByPk(req.params.id, {\r\n-      include: [{ model: Role, through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     if (!user) {\r\n@@ -126,9 +126,9 @@\n     }\r\n \r\n     // 获取更新后的用户信息（包含角色）\r\n     const updatedUser = await User.findByPk(user.id, {\r\n-      include: [{ model: Role, through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     res.json(ResponseUtil.success(updatedUser, \"User updated successfully\"));\r\n@@ -157,38 +157,42 @@\n exports.changePassword = async (req, res, next) => {\r\n   try {\r\n     const { currentPassword, newPassword } = req.body;\r\n     const userId = req.params.id;\r\n-    \r\n+\r\n     // 检查是否是用户本人修改密码，或者是管理员\r\n-    const isAdmin = req.user.roles && req.user.roles.some(role => role.name === 'admin');\r\n+    const isAdmin =\r\n+      req.user.roles && req.user.roles.some((role) => role.name === \"admin\");\r\n     const isSelfUpdate = req.user.id === parseInt(userId);\r\n-    \r\n+\r\n     if (!isAdmin && !isSelfUpdate) {\r\n-      return res.status(403).json(\r\n-        ResponseUtil.error(\"You can only change your own password\", 403)\r\n-      );\r\n+      return res\r\n+        .status(403)\r\n+        .json(ResponseUtil.error(\"You can only change your own password\", 403));\r\n     }\r\n \r\n     const user = await User.findByPk(userId);\r\n     if (!user) {\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n-    \r\n+\r\n     // 如果是用户本人修改，需要验证当前密码\r\n     if (isSelfUpdate && currentPassword) {\r\n-      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\r\n+      const isValidPassword = await bcrypt.compare(\r\n+        currentPassword,\r\n+        user.password\r\n+      );\r\n       if (!isValidPassword) {\r\n-        return res.status(400).json(\r\n-          ResponseUtil.error(\"Current password is incorrect\", 400)\r\n-        );\r\n+        return res\r\n+          .status(400)\r\n+          .json(ResponseUtil.error(\"Current password is incorrect\", 400));\r\n       }\r\n     }\r\n-    \r\n+\r\n     // 更新密码\r\n     user.password = await bcrypt.hash(newPassword, 10);\r\n     await user.save();\r\n-    \r\n+\r\n     res.json(ResponseUtil.success(null, \"Password changed successfully\"));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n@@ -198,17 +202,17 @@\n exports.toggleStatus = async (req, res, next) => {\r\n   try {\r\n     const userId = req.params.id;\r\n     const user = await User.findByPk(userId);\r\n-    \r\n+\r\n     if (!user) {\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n-    \r\n+\r\n     // 切换状态\r\n     user.status = !user.status;\r\n     await user.save();\r\n-    \r\n+\r\n     const statusMessage = user.status ? \"enabled\" : \"disabled\";\r\n     res.json(\r\n       ResponseUtil.success(\r\n         { id: user.id, status: user.status },\r\n@@ -223,20 +227,20 @@\n // 批量删除用户\r\n exports.batchDelete = async (req, res, next) => {\r\n   try {\r\n     const { ids } = req.body;\r\n-    \r\n+\r\n     if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n-      return res.status(400).json(\r\n-        ResponseUtil.error(\"Invalid user IDs provided\", 400)\r\n-      );\r\n+      return res\r\n+        .status(400)\r\n+        .json(ResponseUtil.error(\"Invalid user IDs provided\", 400));\r\n     }\r\n-    \r\n+\r\n     // 批量删除\r\n     const result = await User.destroy({\r\n-      where: { id: { [Op.in]: ids } }\r\n+      where: { id: { [Op.in]: ids } },\r\n     });\r\n-    \r\n+\r\n     res.json(\r\n       ResponseUtil.success(\r\n         { deletedCount: result },\r\n         `${result} users deleted successfully`\r\n"
                },
                {
                    "date": 1746011210314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,33 @@\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n     });\r\n \r\n-    res.json(\r\n-      ResponseUtil.page(rows, count, parseInt(page), parseInt(pageSize))\r\n-    );\r\n+    // 格式化用户数据\r\n+    const formattedUsers = rows.map(user => ({\r\n+      id: user.id,\r\n+      username: user.username,\r\n+      email: user.email,\r\n+      status: user.status ? 1 : 0, // 将布尔值转换为数字\r\n+      roles: user.Roles.map(role => ({\r\n+        id: role.id,\r\n+        name: role.name\r\n+      })),\r\n+      createdAt: user.createdAt,\r\n+      updatedAt: user.updatedAt\r\n+    }));\r\n+\r\n+    // 构建分页响应\r\n+    const response = {\r\n+      list: formattedUsers,\r\n+      pagination: {\r\n+        current: parseInt(page),\r\n+        pageSize: parseInt(pageSize),\r\n+        total: count\r\n+      }\r\n+    };\r\n+\r\n+    res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1746011246409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,29 +66,29 @@\n       distinct: true,\r\n     });\r\n \r\n     // 格式化用户数据\r\n-    const formattedUsers = rows.map(user => ({\r\n+    const formattedUsers = rows.map((user) => ({\r\n       id: user.id,\r\n       username: user.username,\r\n       email: user.email,\r\n       status: user.status ? 1 : 0, // 将布尔值转换为数字\r\n-      roles: user.Roles.map(role => ({\r\n+      roles: user.Roles.map((role) => ({\r\n         id: role.id,\r\n-        name: role.name\r\n+        name: role.name,\r\n       })),\r\n       createdAt: user.createdAt,\r\n-      updatedAt: user.updatedAt\r\n+      updatedAt: user.updatedAt,\r\n     }));\r\n \r\n     // 构建分页响应\r\n     const response = {\r\n       list: formattedUsers,\r\n       pagination: {\r\n         current: parseInt(page),\r\n         pageSize: parseInt(pageSize),\r\n-        total: count\r\n-      }\r\n+        total: count,\r\n+      },\r\n     };\r\n \r\n     res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1746016143412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     }\r\n \r\n     // 获取包含角色的完整用户信息\r\n     const userWithRoles = await User.findByPk(user.id, {\r\n-      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     res\r\n@@ -58,9 +58,9 @@\n     }\r\n \r\n     const { count, rows } = await User.findAndCountAll({\r\n       where,\r\n-      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n@@ -71,9 +71,9 @@\n       id: user.id,\r\n       username: user.username,\r\n       email: user.email,\r\n       status: user.status ? 1 : 0, // 将布尔值转换为数字\r\n-      roles: user.Roles.map((role) => ({\r\n+      roles: user.roles.map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n       })),\r\n       createdAt: user.createdAt,\r\n@@ -99,9 +99,9 @@\n // 获取单个用户\r\n exports.getById = async (req, res, next) => {\r\n   try {\r\n     const user = await User.findByPk(req.params.id, {\r\n-      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     if (!user) {\r\n@@ -148,9 +148,9 @@\n     }\r\n \r\n     // 获取更新后的用户信息（包含角色）\r\n     const updatedUser = await User.findByPk(user.id, {\r\n-      include: [{ model: Role, as: \"Roles\", through: { attributes: [] } }],\r\n+      include: [{ model: Role, as: \"roles\", through: { attributes: [] } }],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     res.json(ResponseUtil.success(updatedUser, \"User updated successfully\"));\r\n"
                },
                {
                    "date": 1746017045960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     const user = await User.create({\r\n       username,\r\n       password,\r\n       email,\r\n-      status: true,\r\n+      status: 1,\r\n     });\r\n \r\n     // 如果提供了角色ID，则关联角色\r\n     if (roleIds && roleIds.length > 0) {\r\n@@ -70,9 +70,9 @@\n     const formattedUsers = rows.map((user) => ({\r\n       id: user.id,\r\n       username: user.username,\r\n       email: user.email,\r\n-      status: user.status ? 1 : 0, // 将布尔值转换为数字\r\n+      status: user.status,\r\n       roles: user.roles.map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n       })),\r\n@@ -230,12 +230,12 @@\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n     // 切换状态\r\n-    user.status = !user.status;\r\n+    user.status = user.status === 1 ? 0 : 1;\r\n     await user.save();\r\n \r\n-    const statusMessage = user.status ? \"enabled\" : \"disabled\";\r\n+    const statusMessage = user.status === 1 ? \"enabled\" : \"disabled\";\r\n     res.json(\r\n       ResponseUtil.success(\r\n         { id: user.id, status: user.status },\r\n         `User ${statusMessage} successfully`\r\n"
                },
                {
                    "date": 1746032025126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,4 +271,79 @@\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n+\r\n+// 获取当前登录用户信息（含角色、菜单、按钮权限）\r\n+exports.me = async (req, res, next) => {\r\n+  try {\r\n+    const userId = req.user.id;\r\n+    const { User, Role, Permission, Resource, ResourceAction } = require(\"../models\");\r\n+\r\n+    // 查询用户及角色\r\n+    const user = await User.findByPk(userId, {\r\n+      include: [\r\n+        {\r\n+          model: Role,\r\n+          as: \"roles\",\r\n+          include: [\r\n+            {\r\n+              model: Permission,\r\n+              as: \"Permissions\",\r\n+              through: { attributes: [] },\r\n+            },\r\n+            {\r\n+              model: Resource,\r\n+              as: \"Resources\",\r\n+              through: { attributes: [] },\r\n+            },\r\n+          ],\r\n+          through: { attributes: [] },\r\n+        },\r\n+      ],\r\n+      attributes: { exclude: [\"password\"] },\r\n+    });\r\n+    if (!user) {\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n+    }\r\n+\r\n+    // 角色清单\r\n+    const roles = user.roles.map((role) => role.code);\r\n+\r\n+    // 菜单资源（合并所有角色的资源，去重）\r\n+    const resourceMap = {};\r\n+    user.roles.forEach((role) => {\r\n+      (role.Resources || []).forEach((r) => {\r\n+        resourceMap[r.id] = r;\r\n+      });\r\n+    });\r\n+    const routes = Object.values(resourceMap);\r\n+\r\n+    // 按钮权限（合并所有角色的权限，去重，提取 action/code）\r\n+    const permSet = new Set();\r\n+    user.roles.forEach((role) => {\r\n+      (role.Permissions || []).forEach((p) => {\r\n+        permSet.add(p.name);\r\n+      });\r\n+    });\r\n+    // 也可根据 ResourceAction 进一步细化按钮权限\r\n+    // const actions = await ResourceAction.findAll();\r\n+    // ...\r\n+    const permissions = Array.from(permSet);\r\n+\r\n+    res.json(\r\n+      ResponseUtil.success({\r\n+        user: {\r\n+          id: user.id,\r\n+          username: user.username,\r\n+          email: user.email,\r\n+          status: user.status,\r\n+        },\r\n+        roles,\r\n+        routes,\r\n+        permissions,\r\n+      })\r\n+    );\r\n+  } catch (err) {\r\n+    next(err);\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1746032064385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,15 @@\n // 获取当前登录用户信息（含角色、菜单、按钮权限）\r\n exports.me = async (req, res, next) => {\r\n   try {\r\n     const userId = req.user.id;\r\n-    const { User, Role, Permission, Resource, ResourceAction } = require(\"../models\");\r\n+    const {\r\n+      User,\r\n+      Role,\r\n+      Permission,\r\n+      Resource,\r\n+      ResourceAction,\r\n+    } = require(\"../models\");\r\n \r\n     // 查询用户及角色\r\n     const user = await User.findByPk(userId, {\r\n       include: [\r\n"
                },
                {
                    "date": 1746032656918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,8 +307,10 @@\n         },\r\n       ],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n+\r\n+    console.log(user);\r\n     if (!user) {\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n"
                },
                {
                    "date": 1746032775635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n       Permission,\r\n       Resource,\r\n       ResourceAction,\r\n     } = require(\"../models\");\r\n-\r\n+    console.log(userId,\"<<<\");\r\n     // 查询用户及角色\r\n     const user = await User.findByPk(userId, {\r\n       include: [\r\n         {\r\n"
                },
                {
                    "date": 1746032836965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,16 +276,17 @@\n // 获取当前登录用户信息（含角色、菜单、按钮权限）\r\n exports.me = async (req, res, next) => {\r\n   try {\r\n     const userId = req.user.id;\r\n+    console.log(userId, \"<<<\");\r\n+\r\n     const {\r\n       User,\r\n       Role,\r\n       Permission,\r\n       Resource,\r\n       ResourceAction,\r\n     } = require(\"../models\");\r\n-    console.log(userId,\"<<<\");\r\n     // 查询用户及角色\r\n     const user = await User.findByPk(userId, {\r\n       include: [\r\n         {\r\n"
                },
                {
                    "date": 1746032849597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,8 @@\n exports.me = async (req, res, next) => {\r\n   try {\r\n     const userId = req.user.id;\r\n     console.log(userId, \"<<<\");\r\n-\r\n     const {\r\n       User,\r\n       Role,\r\n       Permission,\r\n"
                },
                {
                    "date": 1746032868110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,16 +276,19 @@\n // 获取当前登录用户信息（含角色、菜单、按钮权限）\r\n exports.me = async (req, res, next) => {\r\n   try {\r\n     const userId = req.user.id;\r\n-    console.log(userId, \"<<<\");\r\n+    console.log(\"step 1\");\r\n+\r\n     const {\r\n       User,\r\n       Role,\r\n       Permission,\r\n       Resource,\r\n       ResourceAction,\r\n     } = require(\"../models\");\r\n+    console.log(\"step 2\");\r\n+\r\n     // 查询用户及角色\r\n     const user = await User.findByPk(userId, {\r\n       include: [\r\n         {\r\n"
                },
                {
                    "date": 1746053541088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,18 +276,16 @@\n // 获取当前登录用户信息（含角色、菜单、按钮权限）\r\n exports.me = async (req, res, next) => {\r\n   try {\r\n     const userId = req.user.id;\r\n-    console.log(\"step 1\");\r\n \r\n     const {\r\n       User,\r\n       Role,\r\n       Permission,\r\n       Resource,\r\n       ResourceAction,\r\n     } = require(\"../models\");\r\n-    console.log(\"step 2\");\r\n \r\n     // 查询用户及角色\r\n     const user = await User.findByPk(userId, {\r\n       include: [\r\n@@ -311,35 +309,61 @@\n       ],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n-    console.log(user);\r\n     if (!user) {\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n-    // 角色清单\r\n-    const roles = user.roles.map((role) => role.code);\r\n+    // 角色清单（过滤掉null值）\r\n+    const roles = user.roles\r\n+      .filter(role => role !== null)\r\n+      .map(role => ({\r\n+        id: role.id,\r\n+        name: role.name,\r\n+        code: role.code\r\n+      }));\r\n \r\n-    // 菜单资源（合并所有角色的资源，去重）\r\n-    const resourceMap = {};\r\n-    user.roles.forEach((role) => {\r\n-      (role.Resources || []).forEach((r) => {\r\n-        resourceMap[r.id] = r;\r\n-      });\r\n+    // 构建资源树\r\n+    const buildResourceTree = (resources, parentId = null) => {\r\n+      return resources\r\n+        .filter(resource => resource.parentId === parentId)\r\n+        .map(resource => ({\r\n+          ...resource.toJSON(),\r\n+          children: buildResourceTree(resources, resource.id)\r\n+        }))\r\n+        .filter(node => node.children.length > 0 || !node.hidden);\r\n+    };\r\n+\r\n+    // 获取所有资源并构建树形结构\r\n+    const allResources = [];\r\n+    user.roles.forEach(role => {\r\n+      if (role && role.Resources) {\r\n+        role.Resources.forEach(resource => {\r\n+          if (!allResources.find(r => r.id === resource.id)) {\r\n+            allResources.push(resource);\r\n+          }\r\n+        });\r\n+      }\r\n     });\r\n-    const routes = Object.values(resourceMap);\r\n+    const routes = buildResourceTree(allResources);\r\n \r\n-    // 按钮权限（合并所有角色的权限，去重，提取 action/code）\r\n+    // 权限列表（只包含权限，不包含菜单名称）\r\n     const permSet = new Set();\r\n-    user.roles.forEach((role) => {\r\n-      (role.Permissions || []).forEach((p) => {\r\n-        permSet.add(p.name);\r\n-      });\r\n+    user.roles.forEach(role => {\r\n+      if (role && role.Permissions) {\r\n+        role.Permissions.forEach(permission => {\r\n+          // 只添加以特定前缀开头的权限\r\n+          if (permission.name.startsWith('create_') || \r\n+              permission.name.startsWith('view_') || \r\n+              permission.name.startsWith('update_') || \r\n+              permission.name.startsWith('delete_') || \r\n+              permission.name.startsWith('manage_')) {\r\n+            permSet.add(permission.name);\r\n+          }\r\n+        });\r\n+      }\r\n     });\r\n-    // 也可根据 ResourceAction 进一步细化按钮权限\r\n-    // const actions = await ResourceAction.findAll();\r\n-    // ...\r\n     const permissions = Array.from(permSet);\r\n \r\n     res.json(\r\n       ResponseUtil.success({\r\n"
                },
                {
                    "date": 1746053597272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,32 +315,32 @@\n     }\r\n \r\n     // 角色清单（过滤掉null值）\r\n     const roles = user.roles\r\n-      .filter(role => role !== null)\r\n-      .map(role => ({\r\n+      .filter((role) => role !== null)\r\n+      .map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n-        code: role.code\r\n+        code: role.code,\r\n       }));\r\n \r\n     // 构建资源树\r\n     const buildResourceTree = (resources, parentId = null) => {\r\n       return resources\r\n-        .filter(resource => resource.parentId === parentId)\r\n-        .map(resource => ({\r\n+        .filter((resource) => resource.parentId === parentId)\r\n+        .map((resource) => ({\r\n           ...resource.toJSON(),\r\n-          children: buildResourceTree(resources, resource.id)\r\n+          children: buildResourceTree(resources, resource.id),\r\n         }))\r\n-        .filter(node => node.children.length > 0 || !node.hidden);\r\n+        .filter((node) => node.children.length > 0 || !node.hidden);\r\n     };\r\n \r\n     // 获取所有资源并构建树形结构\r\n     const allResources = [];\r\n-    user.roles.forEach(role => {\r\n+    user.roles.forEach((role) => {\r\n       if (role && role.Resources) {\r\n-        role.Resources.forEach(resource => {\r\n-          if (!allResources.find(r => r.id === resource.id)) {\r\n+        role.Resources.forEach((resource) => {\r\n+          if (!allResources.find((r) => r.id === resource.id)) {\r\n             allResources.push(resource);\r\n           }\r\n         });\r\n       }\r\n@@ -348,17 +348,19 @@\n     const routes = buildResourceTree(allResources);\r\n \r\n     // 权限列表（只包含权限，不包含菜单名称）\r\n     const permSet = new Set();\r\n-    user.roles.forEach(role => {\r\n+    user.roles.forEach((role) => {\r\n       if (role && role.Permissions) {\r\n-        role.Permissions.forEach(permission => {\r\n+        role.Permissions.forEach((permission) => {\r\n           // 只添加以特定前缀开头的权限\r\n-          if (permission.name.startsWith('create_') || \r\n-              permission.name.startsWith('view_') || \r\n-              permission.name.startsWith('update_') || \r\n-              permission.name.startsWith('delete_') || \r\n-              permission.name.startsWith('manage_')) {\r\n+          if (\r\n+            permission.name.startsWith(\"create_\") ||\r\n+            permission.name.startsWith(\"view_\") ||\r\n+            permission.name.startsWith(\"update_\") ||\r\n+            permission.name.startsWith(\"delete_\") ||\r\n+            permission.name.startsWith(\"manage_\")\r\n+          ) {\r\n             permSet.add(permission.name);\r\n           }\r\n         });\r\n       }\r\n"
                },
                {
                    "date": 1746053790850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const { User, Role } = require(\"../models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const { Op } = require(\"sequelize\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n+const { PERMISSION_RULES } = require(\"../config/permissions\");\r\n \r\n // 创建用户\r\n exports.create = async (req, res, next) => {\r\n   try {\r\n@@ -346,21 +347,14 @@\n       }\r\n     });\r\n     const routes = buildResourceTree(allResources);\r\n \r\n-    // 权限列表（只包含权限，不包含菜单名称）\r\n+    // 权限列表（使用配置的规则验证权限）\r\n     const permSet = new Set();\r\n     user.roles.forEach((role) => {\r\n       if (role && role.Permissions) {\r\n         role.Permissions.forEach((permission) => {\r\n-          // 只添加以特定前缀开头的权限\r\n-          if (\r\n-            permission.name.startsWith(\"create_\") ||\r\n-            permission.name.startsWith(\"view_\") ||\r\n-            permission.name.startsWith(\"update_\") ||\r\n-            permission.name.startsWith(\"delete_\") ||\r\n-            permission.name.startsWith(\"manage_\")\r\n-          ) {\r\n+          if (PERMISSION_RULES.isValidPermission(permission.name)) {\r\n             permSet.add(permission.name);\r\n           }\r\n         });\r\n       }\r\n"
                },
                {
                    "date": 1746057198452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,87 +294,78 @@\n           model: Role,\r\n           as: \"roles\",\r\n           include: [\r\n             {\r\n-              model: Permission,\r\n-              as: \"Permissions\",\r\n-              through: { attributes: [] },\r\n-            },\r\n-            {\r\n               model: Resource,\r\n-              as: \"Resources\",\r\n-              through: { attributes: [] },\r\n-            },\r\n-          ],\r\n-          through: { attributes: [] },\r\n-        },\r\n+              as: \"resources\",\r\n+              include: [\r\n+                {\r\n+                  model: ResourceAction,\r\n+                  as: \"actions\",\r\n+                  include: [\r\n+                    {\r\n+                      model: Permission,\r\n+                      as: \"permission\"\r\n+                    }\r\n+                  ]\r\n+                }\r\n+              ]\r\n+            }\r\n+          ]\r\n+        }\r\n       ],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n     if (!user) {\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n-    // 角色清单（过滤掉null值）\r\n-    const roles = user.roles\r\n-      .filter((role) => role !== null)\r\n-      .map((role) => ({\r\n+    // 构建用户信息响应\r\n+    const response = {\r\n+      user: {\r\n+        id: user.id,\r\n+        username: user.username,\r\n+        email: user.email,\r\n+        status: user.status\r\n+      },\r\n+      roles: user.roles.map(role => ({\r\n         id: role.id,\r\n         name: role.name,\r\n-        code: role.code,\r\n-      }));\r\n-\r\n-    // 构建资源树\r\n-    const buildResourceTree = (resources, parentId = null) => {\r\n-      return resources\r\n-        .filter((resource) => resource.parentId === parentId)\r\n-        .map((resource) => ({\r\n-          ...resource.toJSON(),\r\n-          children: buildResourceTree(resources, resource.id),\r\n-        }))\r\n-        .filter((node) => node.children.length > 0 || !node.hidden);\r\n-    };\r\n-\r\n-    // 获取所有资源并构建树形结构\r\n-    const allResources = [];\r\n-    user.roles.forEach((role) => {\r\n-      if (role && role.Resources) {\r\n-        role.Resources.forEach((resource) => {\r\n-          if (!allResources.find((r) => r.id === resource.id)) {\r\n-            allResources.push(resource);\r\n+        code: role.code\r\n+      })),\r\n+      resources: user.roles.reduce((acc, role) => {\r\n+        role.resources.forEach(resource => {\r\n+          if (!acc.find(r => r.id === resource.id)) {\r\n+            acc.push({\r\n+              id: resource.id,\r\n+              name: resource.name,\r\n+              code: resource.code,\r\n+              type: resource.type,\r\n+              path: resource.path,\r\n+              component: resource.component,\r\n+              meta: resource.meta,\r\n+              actions: resource.actions.map(action => ({\r\n+                id: action.id,\r\n+                name: action.name,\r\n+                code: action.code,\r\n+                icon: action.icon,\r\n+                needConfirm: action.needConfirm,\r\n+                confirmMessage: action.confirmMessage,\r\n+                permission: action.permission ? {\r\n+                  id: action.permission.id,\r\n+                  name: action.permission.name,\r\n+                  code: action.permission.code\r\n+                } : null\r\n+              }))\r\n+            });\r\n           }\r\n         });\r\n-      }\r\n-    });\r\n-    const routes = buildResourceTree(allResources);\r\n+        return acc;\r\n+      }, [])\r\n+    };\r\n \r\n-    // 权限列表（使用配置的规则验证权限）\r\n-    const permSet = new Set();\r\n-    user.roles.forEach((role) => {\r\n-      if (role && role.Permissions) {\r\n-        role.Permissions.forEach((permission) => {\r\n-          if (PERMISSION_RULES.isValidPermission(permission.name)) {\r\n-            permSet.add(permission.name);\r\n-          }\r\n-        });\r\n-      }\r\n-    });\r\n-    const permissions = Array.from(permSet);\r\n-\r\n-    res.json(\r\n-      ResponseUtil.success({\r\n-        user: {\r\n-          id: user.id,\r\n-          username: user.username,\r\n-          email: user.email,\r\n-          status: user.status,\r\n-        },\r\n-        roles,\r\n-        routes,\r\n-        permissions,\r\n-      })\r\n-    );\r\n+    res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1746057307061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,16 +303,16 @@\n                   as: \"actions\",\r\n                   include: [\r\n                     {\r\n                       model: Permission,\r\n-                      as: \"permission\"\r\n-                    }\r\n-                  ]\r\n-                }\r\n-              ]\r\n-            }\r\n-          ]\r\n-        }\r\n+                      as: \"permission\",\r\n+                    },\r\n+                  ],\r\n+                },\r\n+              ],\r\n+            },\r\n+          ],\r\n+        },\r\n       ],\r\n       attributes: { exclude: [\"password\"] },\r\n     });\r\n \r\n@@ -325,44 +325,46 @@\n       user: {\r\n         id: user.id,\r\n         username: user.username,\r\n         email: user.email,\r\n-        status: user.status\r\n+        status: user.status,\r\n       },\r\n-      roles: user.roles.map(role => ({\r\n+      roles: user.roles.map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n-        code: role.code\r\n+        code: role.code,\r\n       })),\r\n       resources: user.roles.reduce((acc, role) => {\r\n-        role.resources.forEach(resource => {\r\n-          if (!acc.find(r => r.id === resource.id)) {\r\n+        role.resources.forEach((resource) => {\r\n+          if (!acc.find((r) => r.id === resource.id)) {\r\n             acc.push({\r\n               id: resource.id,\r\n               name: resource.name,\r\n               code: resource.code,\r\n               type: resource.type,\r\n               path: resource.path,\r\n               component: resource.component,\r\n               meta: resource.meta,\r\n-              actions: resource.actions.map(action => ({\r\n+              actions: resource.actions.map((action) => ({\r\n                 id: action.id,\r\n                 name: action.name,\r\n                 code: action.code,\r\n                 icon: action.icon,\r\n                 needConfirm: action.needConfirm,\r\n                 confirmMessage: action.confirmMessage,\r\n-                permission: action.permission ? {\r\n-                  id: action.permission.id,\r\n-                  name: action.permission.name,\r\n-                  code: action.permission.code\r\n-                } : null\r\n-              }))\r\n+                permission: action.permission\r\n+                  ? {\r\n+                      id: action.permission.id,\r\n+                      name: action.permission.name,\r\n+                      code: action.permission.code,\r\n+                    }\r\n+                  : null,\r\n+              })),\r\n             });\r\n           }\r\n         });\r\n         return acc;\r\n-      }, [])\r\n+      }, []),\r\n     };\r\n \r\n     res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1746073204909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n const { User, Role } = require(\"../models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const { Op } = require(\"sequelize\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n-const { PERMISSION_RULES } = require(\"../config/permissions\");\r\n \r\n // 创建用户\r\n exports.create = async (req, res, next) => {\r\n   try {\r\n@@ -294,8 +293,12 @@\n           model: Role,\r\n           as: \"roles\",\r\n           include: [\r\n             {\r\n+              model: Permission,\r\n+              as: \"permissions\",\r\n+            },\r\n+            {\r\n               model: Resource,\r\n               as: \"resources\",\r\n               include: [\r\n                 {\r\n@@ -331,8 +334,13 @@\n       roles: user.roles.map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n         code: role.code,\r\n+        permissions: role.permissions.map((permission) => ({\r\n+          id: permission.id,\r\n+          name: permission.name,\r\n+          code: permission.code,\r\n+        })),\r\n       })),\r\n       resources: user.roles.reduce((acc, role) => {\r\n         role.resources.forEach((resource) => {\r\n           if (!acc.find((r) => r.id === resource.id)) {\r\n"
                },
                {
                    "date": 1746097166749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const { User, Role } = require(\"../models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n const { Op } = require(\"sequelize\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n+const { sequelize } = require(\"../models\");\r\n \r\n // 创建用户\r\n exports.create = async (req, res, next) => {\r\n   try {\r\n@@ -160,18 +161,28 @@\n };\r\n \r\n // 删除用户\r\n exports.delete = async (req, res, next) => {\r\n+  const transaction = await sequelize.transaction();\r\n   try {\r\n     const user = await User.findByPk(req.params.id);\r\n \r\n     if (!user) {\r\n+      await transaction.rollback();\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n-    await user.destroy();\r\n+    // First delete related records\r\n+    await user.setRoles([], { transaction });\r\n+    await user.setRefreshTokens([], { transaction });\r\n+\r\n+    // Then delete the user\r\n+    await user.destroy({ transaction });\r\n+\r\n+    await transaction.commit();\r\n     res.json(ResponseUtil.success(null, \"User deleted successfully\"));\r\n   } catch (err) {\r\n+    await transaction.rollback();\r\n     next(err);\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1746097939160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,28 +232,32 @@\n };\r\n \r\n // 切换用户状态（启用/禁用）\r\n exports.toggleStatus = async (req, res, next) => {\r\n+  const transaction = await sequelize.transaction();\r\n   try {\r\n     const userId = req.params.id;\r\n     const user = await User.findByPk(userId);\r\n \r\n     if (!user) {\r\n+      await transaction.rollback();\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n     // 切换状态\r\n     user.status = user.status === 1 ? 0 : 1;\r\n-    await user.save();\r\n+    await user.save({ transaction });\r\n \r\n+    await transaction.commit();\r\n     const statusMessage = user.status === 1 ? \"enabled\" : \"disabled\";\r\n     res.json(\r\n       ResponseUtil.success(\r\n         { id: user.id, status: user.status },\r\n         `User ${statusMessage} successfully`\r\n       )\r\n     );\r\n   } catch (err) {\r\n+    await transaction.rollback();\r\n     next(err);\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1746142602151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,50 +46,86 @@\n \r\n // 获取用户列表（支持分页和搜索）\r\n exports.list = async (req, res, next) => {\r\n   try {\r\n-    const { page = 1, pageSize = 10, search } = req.query;\r\n+    const {\r\n+      page = 1,\r\n+      pageSize = 10,\r\n+      search,\r\n+      username,\r\n+      email,\r\n+      status,\r\n+      roleId\r\n+    } = req.query;\r\n+\r\n     const offset = (page - 1) * pageSize;\r\n+    const where = {};\r\n \r\n-    const where = {};\r\n+    // 状态查询\r\n+    if (status !== undefined) {\r\n+      where.status = status === \"true\" || status === \"1\" ? 1 : 0;\r\n+    }\r\n+\r\n+    // 关键字搜索（支持用户名、邮箱的模糊查询）\r\n     if (search) {\r\n       where[Op.or] = [\r\n         { username: { [Op.like]: `%${search}%` } },\r\n-        { email: { [Op.like]: `%${search}%` } },\r\n+        { email: { [Op.like]: `%${search}%` } }\r\n       ];\r\n     }\r\n \r\n-    const { count, rows } = await User.findAndCountAll({\r\n+    // 指定字段搜索\r\n+    if (username) {\r\n+      where.username = { [Op.like]: `%${username}%` };\r\n+    }\r\n+    if (email) {\r\n+      where.email = { [Op.like]: `%${email}%` };\r\n+    }\r\n+\r\n+    // 构建查询选项\r\n+    const queryOptions = {\r\n       where,\r\n-      include: [{ model: Role, as: \"roles\", through: { attributes: [] } }],\r\n+      include: [{\r\n+        model: Role,\r\n+        as: \"roles\",\r\n+        through: { attributes: [] },\r\n+        // 如果指定了角色ID，只查询具有该角色的用户\r\n+        ...(roleId && {\r\n+          where: { id: roleId }\r\n+        })\r\n+      }],\r\n       attributes: { exclude: [\"password\"] },\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n-    });\r\n+      order: [[\"createdAt\", \"DESC\"]]\r\n+    };\r\n \r\n+    const { count, rows } = await User.findAndCountAll(queryOptions);\r\n+\r\n     // 格式化用户数据\r\n-    const formattedUsers = rows.map((user) => ({\r\n+    const formattedUsers = rows.map(user => ({\r\n       id: user.id,\r\n       username: user.username,\r\n       email: user.email,\r\n       status: user.status,\r\n-      roles: user.roles.map((role) => ({\r\n+      roles: user.roles.map(role => ({\r\n         id: role.id,\r\n         name: role.name,\r\n+        code: role.code\r\n       })),\r\n       createdAt: user.createdAt,\r\n-      updatedAt: user.updatedAt,\r\n+      updatedAt: user.updatedAt\r\n     }));\r\n \r\n     // 构建分页响应\r\n     const response = {\r\n       list: formattedUsers,\r\n       pagination: {\r\n         current: parseInt(page),\r\n         pageSize: parseInt(pageSize),\r\n-        total: count,\r\n-      },\r\n+        total: count\r\n+      }\r\n     };\r\n \r\n     res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1746142660700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n       search,\r\n       username,\r\n       email,\r\n       status,\r\n-      roleId\r\n+      roleId,\r\n     } = req.query;\r\n \r\n     const offset = (page - 1) * pageSize;\r\n     const where = {};\r\n@@ -68,9 +68,9 @@\n     // 关键字搜索（支持用户名、邮箱的模糊查询）\r\n     if (search) {\r\n       where[Op.or] = [\r\n         { username: { [Op.like]: `%${search}%` } },\r\n-        { email: { [Op.like]: `%${search}%` } }\r\n+        { email: { [Op.like]: `%${search}%` } },\r\n       ];\r\n     }\r\n \r\n     // 指定字段搜索\r\n@@ -83,49 +83,51 @@\n \r\n     // 构建查询选项\r\n     const queryOptions = {\r\n       where,\r\n-      include: [{\r\n-        model: Role,\r\n-        as: \"roles\",\r\n-        through: { attributes: [] },\r\n-        // 如果指定了角色ID，只查询具有该角色的用户\r\n-        ...(roleId && {\r\n-          where: { id: roleId }\r\n-        })\r\n-      }],\r\n+      include: [\r\n+        {\r\n+          model: Role,\r\n+          as: \"roles\",\r\n+          through: { attributes: [] },\r\n+          // 如果指定了角色ID，只查询具有该角色的用户\r\n+          ...(roleId && {\r\n+            where: { id: roleId },\r\n+          }),\r\n+        },\r\n+      ],\r\n       attributes: { exclude: [\"password\"] },\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       distinct: true,\r\n-      order: [[\"createdAt\", \"DESC\"]]\r\n+      order: [[\"createdAt\", \"DESC\"]],\r\n     };\r\n \r\n     const { count, rows } = await User.findAndCountAll(queryOptions);\r\n \r\n     // 格式化用户数据\r\n-    const formattedUsers = rows.map(user => ({\r\n+    const formattedUsers = rows.map((user) => ({\r\n       id: user.id,\r\n       username: user.username,\r\n       email: user.email,\r\n       status: user.status,\r\n-      roles: user.roles.map(role => ({\r\n+      roles: user.roles.map((role) => ({\r\n         id: role.id,\r\n         name: role.name,\r\n-        code: role.code\r\n+        code: role.code,\r\n       })),\r\n       createdAt: user.createdAt,\r\n-      updatedAt: user.updatedAt\r\n+      updatedAt: user.updatedAt,\r\n     }));\r\n \r\n     // 构建分页响应\r\n     const response = {\r\n       list: formattedUsers,\r\n       pagination: {\r\n         current: parseInt(page),\r\n         pageSize: parseInt(pageSize),\r\n-        total: count\r\n-      }\r\n+        total: count,\r\n+      },\r\n     };\r\n \r\n     res.json(ResponseUtil.success(response));\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1746143912846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,8 +298,45 @@\n     next(err);\r\n   }\r\n };\r\n \r\n+// 分配角色\r\n+exports.assignRoles = async (req, res, next) => {\r\n+  const transaction = await sequelize.transaction();\r\n+  try {\r\n+    const { roleIds } = req.body;\r\n+    const userId = req.params.id;\r\n+\r\n+    const user = await User.findByPk(userId);\r\n+    if (!user) {\r\n+      await transaction.rollback();\r\n+      return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n+    }\r\n+\r\n+    // 更新用户的角色\r\n+    await user.setRoles(roleIds, { transaction });\r\n+\r\n+    // 获取更新后的用户信息（包含角色）\r\n+    const updatedUser = await User.findByPk(userId, {\r\n+      include: [\r\n+        {\r\n+          model: Role,\r\n+          as: \"roles\",\r\n+          through: { attributes: [] },\r\n+          attributes: [\"id\", \"name\", \"code\", \"status\"],\r\n+        },\r\n+      ],\r\n+      attributes: { exclude: [\"password\"] },\r\n+    });\r\n+\r\n+    await transaction.commit();\r\n+    res.json(ResponseUtil.success(updatedUser, \"Roles assigned successfully\"));\r\n+  } catch (err) {\r\n+    await transaction.rollback();\r\n+    next(err);\r\n+  }\r\n+};\r\n+\r\n // 批量删除用户\r\n exports.batchDelete = async (req, res, next) => {\r\n   try {\r\n     const { ids } = req.body;\r\n"
                },
                {
                    "date": 1746144272857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,14 +305,35 @@\n   try {\r\n     const { roleIds } = req.body;\r\n     const userId = req.params.id;\r\n \r\n+    // 验证角色ID数组\r\n+    if (!roleIds || !Array.isArray(roleIds) || roleIds.length === 0) {\r\n+      await transaction.rollback();\r\n+      return res.status(400).json(ResponseUtil.error(\"Invalid role IDs\", 400));\r\n+    }\r\n+\r\n+    // 验证用户是否存在\r\n     const user = await User.findByPk(userId);\r\n     if (!user) {\r\n       await transaction.rollback();\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n \r\n+    // 验证所有角色是否存在\r\n+    const roles = await Role.findAll({\r\n+      where: {\r\n+        id: { [Op.in]: roleIds },\r\n+      },\r\n+    });\r\n+\r\n+    if (roles.length !== roleIds.length) {\r\n+      await transaction.rollback();\r\n+      return res\r\n+        .status(400)\r\n+        .json(ResponseUtil.error(\"Some role IDs are invalid\", 400));\r\n+    }\r\n+\r\n     // 更新用户的角色\r\n     await user.setRoles(roleIds, { transaction });\r\n \r\n     // 获取更新后的用户信息（包含角色）\r\n@@ -331,9 +352,12 @@\n     await transaction.commit();\r\n     res.json(ResponseUtil.success(updatedUser, \"Roles assigned successfully\"));\r\n   } catch (err) {\r\n     await transaction.rollback();\r\n-    next(err);\r\n+    console.error(\"分配角色失败:\", err);\r\n+    return res\r\n+      .status(500)\r\n+      .json(ResponseUtil.error(\"Failed to assign roles\", 500));\r\n   }\r\n };\r\n \r\n // 批量删除用户\r\n"
                },
                {
                    "date": 1746144419256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,10 +311,13 @@\n       await transaction.rollback();\r\n       return res.status(400).json(ResponseUtil.error(\"Invalid role IDs\", 400));\r\n     }\r\n \r\n-    // 验证用户是否存在\r\n-    const user = await User.findByPk(userId);\r\n+    // 验证用户是否存在，同时获取基本信息\r\n+    const user = await User.findByPk(userId, {\r\n+      attributes: [\"id\", \"username\", \"email\", \"status\"],\r\n+    });\r\n+\r\n     if (!user) {\r\n       await transaction.rollback();\r\n       return res.status(404).json(ResponseUtil.error(\"User not found\", 404));\r\n     }\r\n@@ -323,8 +326,9 @@\n     const roles = await Role.findAll({\r\n       where: {\r\n         id: { [Op.in]: roleIds },\r\n       },\r\n+      attributes: [\"id\", \"name\", \"code\", \"status\"],\r\n     });\r\n \r\n     if (roles.length !== roleIds.length) {\r\n       await transaction.rollback();\r\n@@ -335,26 +339,34 @@\n \r\n     // 更新用户的角色\r\n     await user.setRoles(roleIds, { transaction });\r\n \r\n-    // 获取更新后的用户信息（包含角色）\r\n-    const updatedUser = await User.findByPk(userId, {\r\n-      include: [\r\n-        {\r\n-          model: Role,\r\n-          as: \"roles\",\r\n-          through: { attributes: [] },\r\n-          attributes: [\"id\", \"name\", \"code\", \"status\"],\r\n-        },\r\n-      ],\r\n-      attributes: { exclude: [\"password\"] },\r\n-    });\r\n+    // 构建响应数据\r\n+    const responseData = {\r\n+      ...user.toJSON(),\r\n+      roles: roles.map((role) => ({\r\n+        id: role.id,\r\n+        name: role.name,\r\n+        code: role.code,\r\n+        status: role.status,\r\n+      })),\r\n+    };\r\n \r\n     await transaction.commit();\r\n-    res.json(ResponseUtil.success(updatedUser, \"Roles assigned successfully\"));\r\n+    res.json(ResponseUtil.success(responseData, \"Roles assigned successfully\"));\r\n   } catch (err) {\r\n     await transaction.rollback();\r\n     console.error(\"分配角色失败:\", err);\r\n+    // 检查是否是超时错误\r\n+    if (\r\n+      err.name === \"SequelizeDatabaseError\" &&\r\n+      err.parent &&\r\n+      err.parent.code === \"ETIMEOUT\"\r\n+    ) {\r\n+      return res\r\n+        .status(504)\r\n+        .json(ResponseUtil.error(\"Request timeout while assigning roles\", 504));\r\n+    }\r\n     return res\r\n       .status(500)\r\n       .json(ResponseUtil.error(\"Failed to assign roles\", 500));\r\n   }\r\n"
                }
            ],
            "date": 1745880370778,
            "name": "Commit-0",
            "content": "const { User, Role } = require(\"../models\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst { Op } = require(\"sequelize\");\r\n\r\n// 创建用户\r\nexports.create = async (req, res, next) => {\r\n  try {\r\n    const { username, password, email, roleIds } = req.body;\r\n\r\n    // 检查用户名是否已存在\r\n    const existingUser = await User.findOne({ where: { username } });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: \"Username already exists\" });\r\n    }\r\n\r\n    // 创建用户\r\n    const user = await User.create({\r\n      username,\r\n      password, // 密码会在model的beforeCreate钩子中自动加密\r\n      email,\r\n      status: true,\r\n    });\r\n\r\n    // 如果提供了角色ID，则关联角色\r\n    if (roleIds && roleIds.length > 0) {\r\n      await user.setRoles(roleIds);\r\n    }\r\n\r\n    // 获取包含角色的完整用户信息\r\n    const userWithRoles = await User.findByPk(user.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    res.status(201).json(userWithRoles);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取用户列表（支持分页和搜索）\r\nexports.list = async (req, res, next) => {\r\n  try {\r\n    const { page = 1, limit = 10, search } = req.query;\r\n    const offset = (page - 1) * limit;\r\n\r\n    const where = {};\r\n    if (search) {\r\n      where[Op.or] = [\r\n        { username: { [Op.like]: `%${search}%` } },\r\n        { email: { [Op.like]: `%${search}%` } },\r\n      ];\r\n    }\r\n\r\n    const { count, rows } = await User.findAndCountAll({\r\n      where,\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n      offset,\r\n      limit: parseInt(limit),\r\n      distinct: true,\r\n    });\r\n\r\n    res.json({\r\n      total: count,\r\n      pages: Math.ceil(count / limit),\r\n      currentPage: parseInt(page),\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取单个用户\r\nexports.getById = async (req, res, next) => {\r\n  try {\r\n    const user = await User.findByPk(req.params.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    res.json(user);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 更新用户\r\nexports.update = async (req, res, next) => {\r\n  try {\r\n    const { username, email, password, roleIds, status } = req.body;\r\n    const user = await User.findByPk(req.params.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    // 如果要更新用户名，检查是否与其他用户冲突\r\n    if (username && username !== user.username) {\r\n      const existingUser = await User.findOne({ where: { username } });\r\n      if (existingUser) {\r\n        return res.status(400).json({ message: \"Username already exists\" });\r\n      }\r\n      user.username = username;\r\n    }\r\n\r\n    // 更新其他字段\r\n    if (email) user.email = email;\r\n    if (password) user.password = await bcrypt.hash(password, 10);\r\n    if (typeof status !== \"undefined\") user.status = status;\r\n\r\n    await user.save();\r\n\r\n    // 如果提供了角色ID，则更新角色\r\n    if (roleIds) {\r\n      await user.setRoles(roleIds);\r\n    }\r\n\r\n    // 获取更新后的用户信息（包含角色）\r\n    const updatedUser = await User.findByPk(user.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    res.json(updatedUser);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 删除用户\r\nexports.delete = async (req, res, next) => {\r\n  try {\r\n    const user = await User.findByPk(req.params.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    await user.destroy();\r\n    res.json({ message: \"User deleted successfully\" });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n"
        }
    ]
}