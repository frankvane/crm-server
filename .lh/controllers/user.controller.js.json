{
    "sourceFile": "controllers/user.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745880370778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745880370778,
            "name": "Commit-0",
            "content": "const { User, Role } = require(\"../models\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst { Op } = require(\"sequelize\");\r\n\r\n// 创建用户\r\nexports.create = async (req, res, next) => {\r\n  try {\r\n    const { username, password, email, roleIds } = req.body;\r\n\r\n    // 检查用户名是否已存在\r\n    const existingUser = await User.findOne({ where: { username } });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: \"Username already exists\" });\r\n    }\r\n\r\n    // 创建用户\r\n    const user = await User.create({\r\n      username,\r\n      password, // 密码会在model的beforeCreate钩子中自动加密\r\n      email,\r\n      status: true,\r\n    });\r\n\r\n    // 如果提供了角色ID，则关联角色\r\n    if (roleIds && roleIds.length > 0) {\r\n      await user.setRoles(roleIds);\r\n    }\r\n\r\n    // 获取包含角色的完整用户信息\r\n    const userWithRoles = await User.findByPk(user.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    res.status(201).json(userWithRoles);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取用户列表（支持分页和搜索）\r\nexports.list = async (req, res, next) => {\r\n  try {\r\n    const { page = 1, limit = 10, search } = req.query;\r\n    const offset = (page - 1) * limit;\r\n\r\n    const where = {};\r\n    if (search) {\r\n      where[Op.or] = [\r\n        { username: { [Op.like]: `%${search}%` } },\r\n        { email: { [Op.like]: `%${search}%` } },\r\n      ];\r\n    }\r\n\r\n    const { count, rows } = await User.findAndCountAll({\r\n      where,\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n      offset,\r\n      limit: parseInt(limit),\r\n      distinct: true,\r\n    });\r\n\r\n    res.json({\r\n      total: count,\r\n      pages: Math.ceil(count / limit),\r\n      currentPage: parseInt(page),\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取单个用户\r\nexports.getById = async (req, res, next) => {\r\n  try {\r\n    const user = await User.findByPk(req.params.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    res.json(user);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 更新用户\r\nexports.update = async (req, res, next) => {\r\n  try {\r\n    const { username, email, password, roleIds, status } = req.body;\r\n    const user = await User.findByPk(req.params.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    // 如果要更新用户名，检查是否与其他用户冲突\r\n    if (username && username !== user.username) {\r\n      const existingUser = await User.findOne({ where: { username } });\r\n      if (existingUser) {\r\n        return res.status(400).json({ message: \"Username already exists\" });\r\n      }\r\n      user.username = username;\r\n    }\r\n\r\n    // 更新其他字段\r\n    if (email) user.email = email;\r\n    if (password) user.password = await bcrypt.hash(password, 10);\r\n    if (typeof status !== \"undefined\") user.status = status;\r\n\r\n    await user.save();\r\n\r\n    // 如果提供了角色ID，则更新角色\r\n    if (roleIds) {\r\n      await user.setRoles(roleIds);\r\n    }\r\n\r\n    // 获取更新后的用户信息（包含角色）\r\n    const updatedUser = await User.findByPk(user.id, {\r\n      include: [{ model: Role, through: { attributes: [] } }],\r\n      attributes: { exclude: [\"password\"] },\r\n    });\r\n\r\n    res.json(updatedUser);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 删除用户\r\nexports.delete = async (req, res, next) => {\r\n  try {\r\n    const user = await User.findByPk(req.params.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    await user.destroy();\r\n    res.json({ message: \"User deleted successfully\" });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n"
        }
    ]
}