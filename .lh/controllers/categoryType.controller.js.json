{
    "sourceFile": "controllers/categoryType.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1745926065976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745926358203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-const { CategoryType } = require('../models');\r\n-const { Op } = require('sequelize');\r\n+const { CategoryType } = require(\"../models\");\r\n+const { Op } = require(\"sequelize\");\r\n \r\n // 创建分类类型\r\n exports.create = async (req, res) => {\r\n   try {\r\n@@ -10,31 +10,31 @@\n     const existing = await CategoryType.findOne({ where: { code } });\r\n     if (existing) {\r\n       return res.status(400).json({\r\n         code: 400,\r\n-        message: 'Category type code already exists',\r\n-        data: null\r\n+        message: \"Category type code already exists\",\r\n+        data: null,\r\n       });\r\n     }\r\n \r\n     const categoryType = await CategoryType.create({\r\n       name,\r\n       code,\r\n       description,\r\n-      status: status !== undefined ? status : true\r\n+      status: status !== undefined ? status : true,\r\n     });\r\n \r\n     res.json({\r\n       code: 200,\r\n-      message: 'Category type created successfully',\r\n-      data: categoryType\r\n+      message: \"Category type created successfully\",\r\n+      data: categoryType,\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error creating category type:', error);\r\n+    console.error(\"Error creating category type:\", error);\r\n     res.status(500).json({\r\n       code: 500,\r\n-      message: 'Internal server error',\r\n-      data: null\r\n+      message: \"Internal server error\",\r\n+      data: null,\r\n     });\r\n   }\r\n };\r\n \r\n@@ -45,35 +45,35 @@\n     const offset = (page - 1) * pageSize;\r\n     const where = {};\r\n \r\n     if (status !== undefined) {\r\n-      where.status = status === 'true';\r\n+      where.status = status === \"true\";\r\n     }\r\n \r\n     const { count, rows } = await CategoryType.findAndCountAll({\r\n       where,\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n-      order: [['createdAt', 'DESC']]\r\n+      order: [[\"createdAt\", \"DESC\"]],\r\n     });\r\n \r\n     res.json({\r\n       code: 200,\r\n-      message: 'Success',\r\n+      message: \"Success\",\r\n       data: {\r\n         total: count,\r\n         items: rows,\r\n         currentPage: parseInt(page),\r\n         pageSize: parseInt(pageSize),\r\n-        totalPages: Math.ceil(count / pageSize)\r\n-      }\r\n+        totalPages: Math.ceil(count / pageSize),\r\n+      },\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error getting category types:', error);\r\n+    console.error(\"Error getting category types:\", error);\r\n     res.status(500).json({\r\n       code: 500,\r\n-      message: 'Internal server error',\r\n-      data: null\r\n+      message: \"Internal server error\",\r\n+      data: null,\r\n     });\r\n   }\r\n };\r\n \r\n@@ -83,24 +83,24 @@\n     const categoryType = await CategoryType.findByPk(req.params.id);\r\n     if (!categoryType) {\r\n       return res.status(404).json({\r\n         code: 404,\r\n-        message: 'Category type not found',\r\n-        data: null\r\n+        message: \"Category type not found\",\r\n+        data: null,\r\n       });\r\n     }\r\n \r\n     res.json({\r\n       code: 200,\r\n-      message: 'Success',\r\n-      data: categoryType\r\n+      message: \"Success\",\r\n+      data: categoryType,\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error getting category type:', error);\r\n+    console.error(\"Error getting category type:\", error);\r\n     res.status(500).json({\r\n       code: 500,\r\n-      message: 'Internal server error',\r\n-      data: null\r\n+      message: \"Internal server error\",\r\n+      data: null,\r\n     });\r\n   }\r\n };\r\n \r\n@@ -112,48 +112,49 @@\n \r\n     if (!categoryType) {\r\n       return res.status(404).json({\r\n         code: 404,\r\n-        message: 'Category type not found',\r\n-        data: null\r\n+        message: \"Category type not found\",\r\n+        data: null,\r\n       });\r\n     }\r\n \r\n     // 如果要更改code，检查新code是否已存在\r\n     if (code && code !== categoryType.code) {\r\n       const existing = await CategoryType.findOne({\r\n         where: {\r\n           code,\r\n-          id: { [Op.ne]: req.params.id }\r\n-        }\r\n+          id: { [Op.ne]: req.params.id },\r\n+        },\r\n       });\r\n       if (existing) {\r\n         return res.status(400).json({\r\n           code: 400,\r\n-          message: 'Category type code already exists',\r\n-          data: null\r\n+          message: \"Category type code already exists\",\r\n+          data: null,\r\n         });\r\n       }\r\n     }\r\n \r\n     await categoryType.update({\r\n       name: name || categoryType.name,\r\n       code: code || categoryType.code,\r\n-      description: description !== undefined ? description : categoryType.description,\r\n-      status: status !== undefined ? status : categoryType.status\r\n+      description:\r\n+        description !== undefined ? description : categoryType.description,\r\n+      status: status !== undefined ? status : categoryType.status,\r\n     });\r\n \r\n     res.json({\r\n       code: 200,\r\n-      message: 'Category type updated successfully',\r\n-      data: categoryType\r\n+      message: \"Category type updated successfully\",\r\n+      data: categoryType,\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error updating category type:', error);\r\n+    console.error(\"Error updating category type:\", error);\r\n     res.status(500).json({\r\n       code: 500,\r\n-      message: 'Internal server error',\r\n-      data: null\r\n+      message: \"Internal server error\",\r\n+      data: null,\r\n     });\r\n   }\r\n };\r\n \r\n@@ -163,34 +164,34 @@\n     const categoryType = await CategoryType.findByPk(req.params.id);\r\n     if (!categoryType) {\r\n       return res.status(404).json({\r\n         code: 404,\r\n-        message: 'Category type not found',\r\n-        data: null\r\n+        message: \"Category type not found\",\r\n+        data: null,\r\n       });\r\n     }\r\n \r\n     // TODO: 检查是否有关联的分类，如果有则不允许删除\r\n     const categories = await categoryType.getCategories();\r\n     if (categories.length > 0) {\r\n       return res.status(400).json({\r\n         code: 400,\r\n-        message: 'Cannot delete category type with associated categories',\r\n-        data: null\r\n+        message: \"Cannot delete category type with associated categories\",\r\n+        data: null,\r\n       });\r\n     }\r\n \r\n     await categoryType.destroy();\r\n     res.json({\r\n       code: 200,\r\n-      message: 'Category type deleted successfully',\r\n-      data: null\r\n+      message: \"Category type deleted successfully\",\r\n+      data: null,\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error deleting category type:', error);\r\n+    console.error(\"Error deleting category type:\", error);\r\n\\ No newline at end of file\n     res.status(500).json({\r\n       code: 500,\r\n-      message: 'Internal server error',\r\n-      data: null\r\n+      message: \"Internal server error\",\r\n+      data: null,\r\n     });\r\n   }\r\n-};\n+};\r\n"
                },
                {
                    "date": 1746100931059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n       message: \"Internal server error\",\r\n       data: null,\r\n     });\r\n   }\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1746101103881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const { CategoryType } = require(\"../models\");\r\n const { Op } = require(\"sequelize\");\r\n+const ResponseUtil = require(\"../utils/ResponseUtil\");\r\n \r\n // 创建分类类型\r\n exports.create = async (req, res) => {\r\n   try {\r\n@@ -38,43 +39,34 @@\n   }\r\n };\r\n \r\n // 获取分类类型列表\r\n-exports.findAll = async (req, res) => {\r\n+exports.list = async (req, res) => {\r\n   try {\r\n     const { page = 1, pageSize = 10, status } = req.query;\r\n     const offset = (page - 1) * pageSize;\r\n     const where = {};\r\n-\r\n     if (status !== undefined) {\r\n       where.status = status === \"true\";\r\n     }\r\n-\r\n     const { count, rows } = await CategoryType.findAndCountAll({\r\n       where,\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       order: [[\"createdAt\", \"DESC\"]],\r\n     });\r\n-\r\n-    res.json({\r\n-      code: 200,\r\n-      message: \"Success\",\r\n-      data: {\r\n+    const response = {\r\n+      list: rows,\r\n+      pagination: {\r\n+        current: parseInt(page),\r\n+        pageSize: parseInt(pageSize),\r\n         total: count,\r\n-        items: rows,\r\n-        currentPage: parseInt(page),\r\n-        pageSize: parseInt(pageSize),\r\n-        totalPages: Math.ceil(count / pageSize),\r\n       },\r\n-    });\r\n+    };\r\n+    res.json(ResponseUtil.success(response));\r\n   } catch (error) {\r\n     console.error(\"Error getting category types:\", error);\r\n-    res.status(500).json({\r\n-      code: 500,\r\n-      message: \"Internal server error\",\r\n-      data: null,\r\n-    });\r\n+    res.status(500).json(ResponseUtil.error(\"Internal server error\", 500));\r\n   }\r\n };\r\n \r\n // 获取单个分类类型\r\n"
                },
                {
                    "date": 1746101172715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const { CategoryType } = require(\"../models\");\r\n const { Op } = require(\"sequelize\");\r\n-const ResponseUtil = require(\"../utils/ResponseUtil\");\r\n+const ResponseUtil = require(\"../utils/response\");\r\n \r\n // 创建分类类型\r\n exports.create = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1746101335852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,36 +7,33 @@\n   try {\r\n     const { name, code, description, status } = req.body;\r\n \r\n     // 检查code是否已存在\r\n-    const existing = await CategoryType.findOne({ where: { code } });\r\n-    if (existing) {\r\n-      return res.status(400).json({\r\n-        code: 400,\r\n-        message: \"Category type code already exists\",\r\n-        data: null,\r\n-      });\r\n+    const existingCode = await CategoryType.findOne({ where: { code } });\r\n+    if (existingCode) {\r\n+      return res.status(400).json(ResponseUtil.error(\"Category type code already exists\", 400));\r\n     }\r\n \r\n+    // 检查name是否已存在\r\n+    const existingName = await CategoryType.findOne({ where: { name } });\r\n+    if (existingName) {\r\n+      return res.status(400).json(ResponseUtil.error(\"Category type name already exists\", 400));\r\n+    }\r\n+\r\n     const categoryType = await CategoryType.create({\r\n       name,\r\n       code,\r\n       description,\r\n       status: status !== undefined ? status : true,\r\n     });\r\n \r\n-    res.json({\r\n-      code: 200,\r\n-      message: \"Category type created successfully\",\r\n-      data: categoryType,\r\n-    });\r\n+    res.status(201).json(ResponseUtil.success(categoryType, \"Category type created successfully\"));\r\n   } catch (error) {\r\n+    if (error.name === \"SequelizeUniqueConstraintError\") {\r\n+      return res.status(400).json(ResponseUtil.error(\"Category type name or code must be unique\", 400));\r\n+    }\r\n     console.error(\"Error creating category type:\", error);\r\n-    res.status(500).json({\r\n-      code: 500,\r\n-      message: \"Internal server error\",\r\n-      data: null,\r\n-    });\r\n+    res.status(500).json(ResponseUtil.error(\"Internal server error\", 500));\r\n   }\r\n };\r\n \r\n // 获取分类类型列表\r\n"
                },
                {
                    "date": 1746101345591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,19 @@\n \r\n     // 检查code是否已存在\r\n     const existingCode = await CategoryType.findOne({ where: { code } });\r\n     if (existingCode) {\r\n-      return res.status(400).json(ResponseUtil.error(\"Category type code already exists\", 400));\r\n+      return res\r\n+        .status(400)\r\n+        .json(ResponseUtil.error(\"Category type code already exists\", 400));\r\n     }\r\n \r\n     // 检查name是否已存在\r\n     const existingName = await CategoryType.findOne({ where: { name } });\r\n     if (existingName) {\r\n-      return res.status(400).json(ResponseUtil.error(\"Category type name already exists\", 400));\r\n+      return res\r\n+        .status(400)\r\n+        .json(ResponseUtil.error(\"Category type name already exists\", 400));\r\n     }\r\n \r\n     const categoryType = await CategoryType.create({\r\n       name,\r\n@@ -25,12 +29,20 @@\n       description,\r\n       status: status !== undefined ? status : true,\r\n     });\r\n \r\n-    res.status(201).json(ResponseUtil.success(categoryType, \"Category type created successfully\"));\r\n+    res\r\n+      .status(201)\r\n+      .json(\r\n+        ResponseUtil.success(categoryType, \"Category type created successfully\")\r\n+      );\r\n   } catch (error) {\r\n     if (error.name === \"SequelizeUniqueConstraintError\") {\r\n-      return res.status(400).json(ResponseUtil.error(\"Category type name or code must be unique\", 400));\r\n+      return res\r\n+        .status(400)\r\n+        .json(\r\n+          ResponseUtil.error(\"Category type name or code must be unique\", 400)\r\n+        );\r\n     }\r\n     console.error(\"Error creating category type:\", error);\r\n     res.status(500).json(ResponseUtil.error(\"Internal server error\", 500));\r\n   }\r\n"
                },
                {
                    "date": 1746138518619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,4 +195,23 @@\n       data: null,\r\n     });\r\n   }\r\n };\r\n+\r\n+// 获取所有分类类型（不分页）\r\n+exports.listAll = async (req, res) => {\r\n+  try {\r\n+    const { status } = req.query;\r\n+    const where = {};\r\n+    if (status !== undefined) {\r\n+      where.status = status === \"true\";\r\n+    }\r\n+    const categoryTypes = await CategoryType.findAll({\r\n+      where,\r\n+      order: [[\"createdAt\", \"DESC\"]],\r\n+    });\r\n+    res.json(ResponseUtil.success(categoryTypes));\r\n+  } catch (error) {\r\n+    console.error(\"Error getting all category types:\", error);\r\n+    res.status(500).json(ResponseUtil.error(\"Internal server error\", 500));\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1746139887789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,20 +50,33 @@\n \r\n // 获取分类类型列表\r\n exports.list = async (req, res) => {\r\n   try {\r\n-    const { page = 1, pageSize = 10, status } = req.query;\r\n+    const { page = 1, pageSize = 10, status, search } = req.query;\r\n     const offset = (page - 1) * pageSize;\r\n     const where = {};\r\n+\r\n+    // 状态查询\r\n     if (status !== undefined) {\r\n       where.status = status === \"true\";\r\n     }\r\n+\r\n+    // 关键字搜索（支持名称、代码、描述模糊查询）\r\n+    if (search) {\r\n+      where[Op.or] = [\r\n+        { name: { [Op.like]: `%${search}%` } },\r\n+        { code: { [Op.like]: `%${search}%` } },\r\n+        { description: { [Op.like]: `%${search}%` } },\r\n+      ];\r\n+    }\r\n+\r\n     const { count, rows } = await CategoryType.findAndCountAll({\r\n       where,\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n       order: [[\"createdAt\", \"DESC\"]],\r\n     });\r\n+\r\n     const response = {\r\n       list: rows,\r\n       pagination: {\r\n         current: parseInt(page),\r\n"
                },
                {
                    "date": 1746140001838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,17 @@\n \r\n // 获取分类类型列表\r\n exports.list = async (req, res) => {\r\n   try {\r\n-    const { page = 1, pageSize = 10, status, search } = req.query;\r\n+    const {\r\n+      page = 1,\r\n+      pageSize = 10,\r\n+      status,\r\n+      search,\r\n+      name,\r\n+      code,\r\n+      description,\r\n+    } = req.query;\r\n     const offset = (page - 1) * pageSize;\r\n     const where = {};\r\n \r\n     // 状态查询\r\n@@ -68,8 +76,19 @@\n         { description: { [Op.like]: `%${search}%` } },\r\n       ];\r\n     }\r\n \r\n+    // 指定字段搜索\r\n+    if (name) {\r\n+      where.name = { [Op.like]: `%${name}%` };\r\n+    }\r\n+    if (code) {\r\n+      where.code = { [Op.like]: `%${code}%` };\r\n+    }\r\n+    if (description) {\r\n+      where.description = { [Op.like]: `%${description}%` };\r\n+    }\r\n+\r\n     const { count, rows } = await CategoryType.findAndCountAll({\r\n       where,\r\n       offset,\r\n       limit: parseInt(pageSize),\r\n"
                },
                {
                    "date": 1746141787310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,24 +202,38 @@\n         data: null,\r\n       });\r\n     }\r\n \r\n-    // TODO: 检查是否有关联的分类，如果有则不允许删除\r\n+    // 获取关联的分类\r\n     const categories = await categoryType.getCategories();\r\n-    if (categories.length > 0) {\r\n-      return res.status(400).json({\r\n-        code: 400,\r\n-        message: \"Cannot delete category type with associated categories\",\r\n+\r\n+    // 开启事务以确保数据一致性\r\n+    const t = await CategoryType.sequelize.transaction();\r\n+\r\n+    try {\r\n+      // 先删除所有关联的分类\r\n+      if (categories.length > 0) {\r\n+        await Promise.all(\r\n+          categories.map((category) => category.destroy({ transaction: t }))\r\n+        );\r\n+      }\r\n+\r\n+      // 然后删除分类类型\r\n+      await categoryType.destroy({ transaction: t });\r\n+\r\n+      // 提交事务\r\n+      await t.commit();\r\n+\r\n+      res.json({\r\n+        code: 200,\r\n+        message: \"Category type and associated categories deleted successfully\",\r\n         data: null,\r\n       });\r\n+    } catch (error) {\r\n+      // 如果出错，回滚事务\r\n+      await t.rollback();\r\n+      throw error;\r\n     }\r\n-\r\n-    await categoryType.destroy();\r\n-    res.json({\r\n-      code: 200,\r\n-      message: \"Category type deleted successfully\",\r\n-      data: null,\r\n-    });\r\n   } catch (error) {\r\n     console.error(\"Error deleting category type:\", error);\r\n     res.status(500).json({\r\n       code: 500,\r\n"
                },
                {
                    "date": 1746141961572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,16 +209,36 @@\n     // 开启事务以确保数据一致性\r\n     const t = await CategoryType.sequelize.transaction();\r\n \r\n     try {\r\n-      // 先删除所有关联的分类\r\n+      // 如果有关联的分类，需要按层级删除\r\n       if (categories.length > 0) {\r\n-        await Promise.all(\r\n-          categories.map((category) => category.destroy({ transaction: t }))\r\n-        );\r\n+        // 1. 按parentId分组\r\n+        const categoryMap = new Map();\r\n+        categories.forEach((category) => {\r\n+          const parentId = category.parentId || \"root\";\r\n+          if (!categoryMap.has(parentId)) {\r\n+            categoryMap.set(parentId, []);\r\n+          }\r\n+          categoryMap.get(parentId).push(category);\r\n+        });\r\n+\r\n+        // 2. 从底层开始删除\r\n+        const deleteLevel = async (parentId) => {\r\n+          const levelCategories = categoryMap.get(parentId) || [];\r\n+          for (const category of levelCategories) {\r\n+            // 先递归删除子分类\r\n+            await deleteLevel(category.id);\r\n+            // 再删除当前分类\r\n+            await category.destroy({ transaction: t });\r\n+          }\r\n+        };\r\n+\r\n+        // 从根节点开始删除\r\n+        await deleteLevel(\"root\");\r\n       }\r\n \r\n-      // 然后删除分类类型\r\n+      // 最后删除分类类型\r\n       await categoryType.destroy({ transaction: t });\r\n \r\n       // 提交事务\r\n       await t.commit();\r\n"
                }
            ],
            "date": 1745926065976,
            "name": "Commit-0",
            "content": "const { CategoryType } = require('../models');\r\nconst { Op } = require('sequelize');\r\n\r\n// 创建分类类型\r\nexports.create = async (req, res) => {\r\n  try {\r\n    const { name, code, description, status } = req.body;\r\n\r\n    // 检查code是否已存在\r\n    const existing = await CategoryType.findOne({ where: { code } });\r\n    if (existing) {\r\n      return res.status(400).json({\r\n        code: 400,\r\n        message: 'Category type code already exists',\r\n        data: null\r\n      });\r\n    }\r\n\r\n    const categoryType = await CategoryType.create({\r\n      name,\r\n      code,\r\n      description,\r\n      status: status !== undefined ? status : true\r\n    });\r\n\r\n    res.json({\r\n      code: 200,\r\n      message: 'Category type created successfully',\r\n      data: categoryType\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating category type:', error);\r\n    res.status(500).json({\r\n      code: 500,\r\n      message: 'Internal server error',\r\n      data: null\r\n    });\r\n  }\r\n};\r\n\r\n// 获取分类类型列表\r\nexports.findAll = async (req, res) => {\r\n  try {\r\n    const { page = 1, pageSize = 10, status } = req.query;\r\n    const offset = (page - 1) * pageSize;\r\n    const where = {};\r\n\r\n    if (status !== undefined) {\r\n      where.status = status === 'true';\r\n    }\r\n\r\n    const { count, rows } = await CategoryType.findAndCountAll({\r\n      where,\r\n      offset,\r\n      limit: parseInt(pageSize),\r\n      order: [['createdAt', 'DESC']]\r\n    });\r\n\r\n    res.json({\r\n      code: 200,\r\n      message: 'Success',\r\n      data: {\r\n        total: count,\r\n        items: rows,\r\n        currentPage: parseInt(page),\r\n        pageSize: parseInt(pageSize),\r\n        totalPages: Math.ceil(count / pageSize)\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error getting category types:', error);\r\n    res.status(500).json({\r\n      code: 500,\r\n      message: 'Internal server error',\r\n      data: null\r\n    });\r\n  }\r\n};\r\n\r\n// 获取单个分类类型\r\nexports.findOne = async (req, res) => {\r\n  try {\r\n    const categoryType = await CategoryType.findByPk(req.params.id);\r\n    if (!categoryType) {\r\n      return res.status(404).json({\r\n        code: 404,\r\n        message: 'Category type not found',\r\n        data: null\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      code: 200,\r\n      message: 'Success',\r\n      data: categoryType\r\n    });\r\n  } catch (error) {\r\n    console.error('Error getting category type:', error);\r\n    res.status(500).json({\r\n      code: 500,\r\n      message: 'Internal server error',\r\n      data: null\r\n    });\r\n  }\r\n};\r\n\r\n// 更新分类类型\r\nexports.update = async (req, res) => {\r\n  try {\r\n    const { name, code, description, status } = req.body;\r\n    const categoryType = await CategoryType.findByPk(req.params.id);\r\n\r\n    if (!categoryType) {\r\n      return res.status(404).json({\r\n        code: 404,\r\n        message: 'Category type not found',\r\n        data: null\r\n      });\r\n    }\r\n\r\n    // 如果要更改code，检查新code是否已存在\r\n    if (code && code !== categoryType.code) {\r\n      const existing = await CategoryType.findOne({\r\n        where: {\r\n          code,\r\n          id: { [Op.ne]: req.params.id }\r\n        }\r\n      });\r\n      if (existing) {\r\n        return res.status(400).json({\r\n          code: 400,\r\n          message: 'Category type code already exists',\r\n          data: null\r\n        });\r\n      }\r\n    }\r\n\r\n    await categoryType.update({\r\n      name: name || categoryType.name,\r\n      code: code || categoryType.code,\r\n      description: description !== undefined ? description : categoryType.description,\r\n      status: status !== undefined ? status : categoryType.status\r\n    });\r\n\r\n    res.json({\r\n      code: 200,\r\n      message: 'Category type updated successfully',\r\n      data: categoryType\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating category type:', error);\r\n    res.status(500).json({\r\n      code: 500,\r\n      message: 'Internal server error',\r\n      data: null\r\n    });\r\n  }\r\n};\r\n\r\n// 删除分类类型\r\nexports.delete = async (req, res) => {\r\n  try {\r\n    const categoryType = await CategoryType.findByPk(req.params.id);\r\n    if (!categoryType) {\r\n      return res.status(404).json({\r\n        code: 404,\r\n        message: 'Category type not found',\r\n        data: null\r\n      });\r\n    }\r\n\r\n    // TODO: 检查是否有关联的分类，如果有则不允许删除\r\n    const categories = await categoryType.getCategories();\r\n    if (categories.length > 0) {\r\n      return res.status(400).json({\r\n        code: 400,\r\n        message: 'Cannot delete category type with associated categories',\r\n        data: null\r\n      });\r\n    }\r\n\r\n    await categoryType.destroy();\r\n    res.json({\r\n      code: 200,\r\n      message: 'Category type deleted successfully',\r\n      data: null\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting category type:', error);\r\n    res.status(500).json({\r\n      code: 500,\r\n      message: 'Internal server error',\r\n      data: null\r\n    });\r\n  }\r\n};"
        }
    ]
}