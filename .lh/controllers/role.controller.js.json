{
    "sourceFile": "controllers/role.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745936731644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745936731644,
            "name": "Commit-0",
            "content": "const { Role, Permission } = require(\"../models\");\r\nconst { sendResponse } = require(\"../utils/response\");\r\n\r\n// 创建角色\r\nexports.createRole = async (req, res) => {\r\n  try {\r\n    const { name, description, permissionIds } = req.body;\r\n\r\n    // 检查角色名是否已存在\r\n    const existingRole = await Role.findOne({ where: { name } });\r\n    if (existingRole) {\r\n      return sendResponse(res, 400, \"角色名已存在\");\r\n    }\r\n\r\n    // 创建角色\r\n    const role = await Role.create({ name, description });\r\n\r\n    // 如果提供了权限ID，关联权限\r\n    if (permissionIds && permissionIds.length > 0) {\r\n      await role.setPermissions(permissionIds);\r\n    }\r\n\r\n    // 获取完整的角色信息（包含权限）\r\n    const roleWithPermissions = await Role.findByPk(role.id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"角色创建成功\", roleWithPermissions);\r\n  } catch (error) {\r\n    console.error(\"创建角色失败:\", error);\r\n    return sendResponse(res, 500, \"创建角色失败\");\r\n  }\r\n};\r\n\r\n// 获取角色列表\r\nexports.getRoles = async (req, res) => {\r\n  try {\r\n    const { page = 1, limit = 10, search } = req.query;\r\n    const offset = (page - 1) * limit;\r\n\r\n    const where = {};\r\n    if (search) {\r\n      where.name = { [Op.like]: `%${search}%` };\r\n    }\r\n\r\n    const { count, rows } = await Role.findAndCountAll({\r\n      where,\r\n      limit: parseInt(limit),\r\n      offset: parseInt(offset),\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"获取角色列表成功\", {\r\n      total: count,\r\n      pages: Math.ceil(count / limit),\r\n      currentPage: parseInt(page),\r\n      data: rows,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"获取角色列表失败:\", error);\r\n    return sendResponse(res, 500, \"获取角色列表失败\");\r\n  }\r\n};\r\n\r\n// 获取单个角色\r\nexports.getRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const role = await Role.findByPk(id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"获取角色成功\", role);\r\n  } catch (error) {\r\n    console.error(\"获取角色失败:\", error);\r\n    return sendResponse(res, 500, \"获取角色失败\");\r\n  }\r\n};\r\n\r\n// 更新角色\r\nexports.updateRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, description, permissionIds } = req.body;\r\n\r\n    const role = await Role.findByPk(id);\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    // 检查新角色名是否与其他角色重复\r\n    if (name && name !== role.name) {\r\n      const existingRole = await Role.findOne({ where: { name } });\r\n      if (existingRole) {\r\n        return sendResponse(res, 400, \"角色名已存在\");\r\n      }\r\n    }\r\n\r\n    // 更新角色信息\r\n    await role.update({ name, description });\r\n\r\n    // 如果提供了权限ID，更新权限关联\r\n    if (permissionIds) {\r\n      await role.setPermissions(permissionIds);\r\n    }\r\n\r\n    // 获取更新后的完整角色信息\r\n    const updatedRole = await Role.findByPk(id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"角色更新成功\", updatedRole);\r\n  } catch (error) {\r\n    console.error(\"更新角色失败:\", error);\r\n    return sendResponse(res, 500, \"更新角色失败\");\r\n  }\r\n};\r\n\r\n// 删除角色\r\nexports.deleteRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const role = await Role.findByPk(id);\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    // 检查角色是否有关联的用户\r\n    const userCount = await role.countUsers();\r\n    if (userCount > 0) {\r\n      return sendResponse(res, 400, \"无法删除，该角色下存在用户\");\r\n    }\r\n\r\n    await role.destroy();\r\n    return sendResponse(res, 200, \"角色删除成功\");\r\n  } catch (error) {\r\n    console.error(\"删除角色失败:\", error);\r\n    return sendResponse(res, 500, \"删除角色失败\");\r\n  }\r\n}; "
        }
    ]
}