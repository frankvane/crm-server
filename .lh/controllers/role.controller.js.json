{
    "sourceFile": "controllers/role.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1745936731644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745936819691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,5 +170,5 @@\n   } catch (error) {\r\n     console.error(\"删除角色失败:\", error);\r\n     return sendResponse(res, 500, \"删除角色失败\");\r\n   }\r\n-}; \n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1745937198821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const { Role, Permission } = require(\"../models\");\r\n-const { sendResponse } = require(\"../utils/response\");\r\n+const ResponseUtil = require(\"../utils/response\");\r\n \r\n // 创建角色\r\n exports.createRole = async (req, res) => {\r\n   try {\r\n@@ -8,9 +8,9 @@\n \r\n     // 检查角色名是否已存在\r\n     const existingRole = await Role.findOne({ where: { name } });\r\n     if (existingRole) {\r\n-      return sendResponse(res, 400, \"角色名已存在\");\r\n+      return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n     }\r\n \r\n     // 创建角色\r\n     const role = await Role.create({ name, description });\r\n@@ -31,12 +31,12 @@\n         },\r\n       ],\r\n     });\r\n \r\n-    return sendResponse(res, 200, \"角色创建成功\", roleWithPermissions);\r\n+    return res.status(200).json(ResponseUtil.success(roleWithPermissions, \"角色创建成功\"));\r\n   } catch (error) {\r\n     console.error(\"创建角色失败:\", error);\r\n-    return sendResponse(res, 500, \"创建角色失败\");\r\n+    return res.status(500).json(ResponseUtil.error(\"创建角色失败\", 500));\r\n   }\r\n };\r\n \r\n // 获取角色列表\r\n@@ -63,17 +63,12 @@\n         },\r\n       ],\r\n     });\r\n \r\n-    return sendResponse(res, 200, \"获取角色列表成功\", {\r\n-      total: count,\r\n-      pages: Math.ceil(count / limit),\r\n-      currentPage: parseInt(page),\r\n-      data: rows,\r\n-    });\r\n+    return res.status(200).json(ResponseUtil.page(rows, count, parseInt(page), parseInt(limit)));\r\n   } catch (error) {\r\n     console.error(\"获取角色列表失败:\", error);\r\n-    return sendResponse(res, 500, \"获取角色列表失败\");\r\n+    return res.status(500).json(ResponseUtil.error(\"获取角色列表失败\", 500));\r\n   }\r\n };\r\n \r\n // 获取单个角色\r\n@@ -92,15 +87,15 @@\n       ],\r\n     });\r\n \r\n     if (!role) {\r\n-      return sendResponse(res, 404, \"角色不存在\");\r\n+      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n     }\r\n \r\n-    return sendResponse(res, 200, \"获取角色成功\", role);\r\n+    return res.status(200).json(ResponseUtil.success(role, \"获取角色成功\"));\r\n   } catch (error) {\r\n     console.error(\"获取角色失败:\", error);\r\n-    return sendResponse(res, 500, \"获取角色失败\");\r\n+    return res.status(500).json(ResponseUtil.error(\"获取角色失败\", 500));\r\n   }\r\n };\r\n \r\n // 更新角色\r\n@@ -110,16 +105,16 @@\n     const { name, description, permissionIds } = req.body;\r\n \r\n     const role = await Role.findByPk(id);\r\n     if (!role) {\r\n-      return sendResponse(res, 404, \"角色不存在\");\r\n+      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n     }\r\n \r\n     // 检查新角色名是否与其他角色重复\r\n     if (name && name !== role.name) {\r\n       const existingRole = await Role.findOne({ where: { name } });\r\n       if (existingRole) {\r\n-        return sendResponse(res, 400, \"角色名已存在\");\r\n+        return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n       }\r\n     }\r\n \r\n     // 更新角色信息\r\n@@ -141,12 +136,12 @@\n         },\r\n       ],\r\n     });\r\n \r\n-    return sendResponse(res, 200, \"角色更新成功\", updatedRole);\r\n+    return res.status(200).json(ResponseUtil.success(updatedRole, \"角色更新成功\"));\r\n   } catch (error) {\r\n     console.error(\"更新角色失败:\", error);\r\n-    return sendResponse(res, 500, \"更新角色失败\");\r\n+    return res.status(500).json(ResponseUtil.error(\"更新角色失败\", 500));\r\n   }\r\n };\r\n \r\n // 删除角色\r\n@@ -155,20 +150,20 @@\n     const { id } = req.params;\r\n \r\n     const role = await Role.findByPk(id);\r\n     if (!role) {\r\n-      return sendResponse(res, 404, \"角色不存在\");\r\n+      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n     }\r\n \r\n     // 检查角色是否有关联的用户\r\n     const userCount = await role.countUsers();\r\n     if (userCount > 0) {\r\n-      return sendResponse(res, 400, \"无法删除，该角色下存在用户\");\r\n+      return res.status(400).json(ResponseUtil.error(\"无法删除，该角色下存在用户\", 400));\r\n     }\r\n \r\n     await role.destroy();\r\n-    return sendResponse(res, 200, \"角色删除成功\");\r\n+    return res.status(200).json(ResponseUtil.success(null, \"角色删除成功\"));\r\n   } catch (error) {\r\n     console.error(\"删除角色失败:\", error);\r\n-    return sendResponse(res, 500, \"删除角色失败\");\r\n+    return res.status(500).json(ResponseUtil.error(\"删除角色失败\", 500));\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1745937268547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,177 +1,174 @@\n const { Role, Permission } = require(\"../models\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n+const { Op } = require(\"sequelize\");\r\n \r\n-// 创建角色\r\n-exports.createRole = async (req, res) => {\r\n-  try {\r\n-    const { name, description, permissionIds } = req.body;\r\n+const roleController = {\r\n+  // 创建角色\r\n+  createRole: async (req, res) => {\r\n+    try {\r\n+      const { name, description, permissionIds } = req.body;\r\n \r\n-    // 检查角色名是否已存在\r\n-    const existingRole = await Role.findOne({ where: { name } });\r\n-    if (existingRole) {\r\n-      return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n-    }\r\n+      // 检查角色名是否已存在\r\n+      const existingRole = await Role.findOne({ where: { name } });\r\n+      if (existingRole) {\r\n+        return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n+      }\r\n \r\n-    // 创建角色\r\n-    const role = await Role.create({ name, description });\r\n+      // 创建角色\r\n+      const role = await Role.create({ name, description });\r\n \r\n-    // 如果提供了权限ID，关联权限\r\n-    if (permissionIds && permissionIds.length > 0) {\r\n-      await role.setPermissions(permissionIds);\r\n+      // 如果提供了权限ID，关联权限\r\n+      if (permissionIds && permissionIds.length > 0) {\r\n+        await role.setPermissions(permissionIds);\r\n+      }\r\n+\r\n+      // 获取完整的角色信息（包含权限）\r\n+      const roleWithPermissions = await Role.findByPk(role.id, {\r\n+        include: [\r\n+          {\r\n+            model: Permission,\r\n+            as: \"Permissions\",\r\n+            attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n+            through: { attributes: [] },\r\n+          },\r\n+        ],\r\n+      });\r\n+\r\n+      return res.status(200).json(ResponseUtil.success(roleWithPermissions, \"角色创建成功\"));\r\n+    } catch (error) {\r\n+      console.error(\"创建角色失败:\", error);\r\n+      return res.status(500).json(ResponseUtil.error(\"创建角色失败\", 500));\r\n     }\r\n+  },\r\n \r\n-    // 获取完整的角色信息（包含权限）\r\n-    const roleWithPermissions = await Role.findByPk(role.id, {\r\n-      include: [\r\n-        {\r\n-          model: Permission,\r\n-          as: \"Permissions\",\r\n-          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n-          through: { attributes: [] },\r\n-        },\r\n-      ],\r\n-    });\r\n+  // 获取角色列表\r\n+  getRoles: async (req, res) => {\r\n+    try {\r\n+      const { page = 1, limit = 10, search } = req.query;\r\n+      const offset = (page - 1) * limit;\r\n \r\n-    return res\r\n-      .status(200)\r\n-      .json(ResponseUtil.success(roleWithPermissions, \"角色创建成功\"));\r\n-  } catch (error) {\r\n-    console.error(\"创建角色失败:\", error);\r\n-    return res.status(500).json(ResponseUtil.error(\"创建角色失败\", 500));\r\n-  }\r\n-};\r\n+      const where = {};\r\n+      if (search) {\r\n+        where.name = { [Op.like]: `%${search}%` };\r\n+      }\r\n \r\n-// 获取角色列表\r\n-exports.getRoles = async (req, res) => {\r\n-  try {\r\n-    const { page = 1, limit = 10, search } = req.query;\r\n-    const offset = (page - 1) * limit;\r\n+      const { count, rows } = await Role.findAndCountAll({\r\n+        where,\r\n+        limit: parseInt(limit),\r\n+        offset: parseInt(offset),\r\n+        include: [\r\n+          {\r\n+            model: Permission,\r\n+            as: \"Permissions\",\r\n+            attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n+            through: { attributes: [] },\r\n+          },\r\n+        ],\r\n+      });\r\n \r\n-    const where = {};\r\n-    if (search) {\r\n-      where.name = { [Op.like]: `%${search}%` };\r\n+      return res.status(200).json(ResponseUtil.page(rows, count, parseInt(page), parseInt(limit)));\r\n+    } catch (error) {\r\n+      console.error(\"获取角色列表失败:\", error);\r\n+      return res.status(500).json(ResponseUtil.error(\"获取角色列表失败\", 500));\r\n     }\r\n+  },\r\n \r\n-    const { count, rows } = await Role.findAndCountAll({\r\n-      where,\r\n-      limit: parseInt(limit),\r\n-      offset: parseInt(offset),\r\n-      include: [\r\n-        {\r\n-          model: Permission,\r\n-          as: \"Permissions\",\r\n-          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n-          through: { attributes: [] },\r\n-        },\r\n-      ],\r\n-    });\r\n+  // 获取单个角色\r\n+  getRole: async (req, res) => {\r\n+    try {\r\n+      const { id } = req.params;\r\n \r\n-    return res\r\n-      .status(200)\r\n-      .json(ResponseUtil.page(rows, count, parseInt(page), parseInt(limit)));\r\n-  } catch (error) {\r\n-    console.error(\"获取角色列表失败:\", error);\r\n-    return res.status(500).json(ResponseUtil.error(\"获取角色列表失败\", 500));\r\n-  }\r\n-};\r\n+      const role = await Role.findByPk(id, {\r\n+        include: [\r\n+          {\r\n+            model: Permission,\r\n+            as: \"Permissions\",\r\n+            attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n+            through: { attributes: [] },\r\n+          },\r\n+        ],\r\n+      });\r\n \r\n-// 获取单个角色\r\n-exports.getRole = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n+      if (!role) {\r\n+        return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n+      }\r\n \r\n-    const role = await Role.findByPk(id, {\r\n-      include: [\r\n-        {\r\n-          model: Permission,\r\n-          as: \"Permissions\",\r\n-          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n-          through: { attributes: [] },\r\n-        },\r\n-      ],\r\n-    });\r\n-\r\n-    if (!role) {\r\n-      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n+      return res.status(200).json(ResponseUtil.success(role, \"获取角色成功\"));\r\n+    } catch (error) {\r\n+      console.error(\"获取角色失败:\", error);\r\n+      return res.status(500).json(ResponseUtil.error(\"获取角色失败\", 500));\r\n     }\r\n+  },\r\n \r\n-    return res.status(200).json(ResponseUtil.success(role, \"获取角色成功\"));\r\n-  } catch (error) {\r\n-    console.error(\"获取角色失败:\", error);\r\n-    return res.status(500).json(ResponseUtil.error(\"获取角色失败\", 500));\r\n-  }\r\n-};\r\n+  // 更新角色\r\n+  updateRole: async (req, res) => {\r\n+    try {\r\n+      const { id } = req.params;\r\n+      const { name, description, permissionIds } = req.body;\r\n \r\n-// 更新角色\r\n-exports.updateRole = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const { name, description, permissionIds } = req.body;\r\n+      const role = await Role.findByPk(id);\r\n+      if (!role) {\r\n+        return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n+      }\r\n \r\n-    const role = await Role.findByPk(id);\r\n-    if (!role) {\r\n-      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n-    }\r\n+      // 检查新角色名是否与其他角色重复\r\n+      if (name && name !== role.name) {\r\n+        const existingRole = await Role.findOne({ where: { name } });\r\n+        if (existingRole) {\r\n+          return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n+        }\r\n+      }\r\n \r\n-    // 检查新角色名是否与其他角色重复\r\n-    if (name && name !== role.name) {\r\n-      const existingRole = await Role.findOne({ where: { name } });\r\n-      if (existingRole) {\r\n-        return res.status(400).json(ResponseUtil.error(\"角色名已存在\", 400));\r\n+      // 更新角色信息\r\n+      await role.update({ name, description });\r\n+\r\n+      // 如果提供了权限ID，更新权限关联\r\n+      if (permissionIds) {\r\n+        await role.setPermissions(permissionIds);\r\n       }\r\n-    }\r\n \r\n-    // 更新角色信息\r\n-    await role.update({ name, description });\r\n+      // 获取更新后的完整角色信息\r\n+      const updatedRole = await Role.findByPk(id, {\r\n+        include: [\r\n+          {\r\n+            model: Permission,\r\n+            as: \"Permissions\",\r\n+            attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n+            through: { attributes: [] },\r\n+          },\r\n+        ],\r\n+      });\r\n \r\n-    // 如果提供了权限ID，更新权限关联\r\n-    if (permissionIds) {\r\n-      await role.setPermissions(permissionIds);\r\n+      return res.status(200).json(ResponseUtil.success(updatedRole, \"角色更新成功\"));\r\n+    } catch (error) {\r\n+      console.error(\"更新角色失败:\", error);\r\n+      return res.status(500).json(ResponseUtil.error(\"更新角色失败\", 500));\r\n     }\r\n+  },\r\n \r\n-    // 获取更新后的完整角色信息\r\n-    const updatedRole = await Role.findByPk(id, {\r\n-      include: [\r\n-        {\r\n-          model: Permission,\r\n-          as: \"Permissions\",\r\n-          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n-          through: { attributes: [] },\r\n-        },\r\n-      ],\r\n-    });\r\n+  // 删除角色\r\n+  deleteRole: async (req, res) => {\r\n+    try {\r\n+      const { id } = req.params;\r\n \r\n-    return res\r\n-      .status(200)\r\n-      .json(ResponseUtil.success(updatedRole, \"角色更新成功\"));\r\n-  } catch (error) {\r\n-    console.error(\"更新角色失败:\", error);\r\n-    return res.status(500).json(ResponseUtil.error(\"更新角色失败\", 500));\r\n-  }\r\n-};\r\n+      const role = await Role.findByPk(id);\r\n+      if (!role) {\r\n+        return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n+      }\r\n \r\n-// 删除角色\r\n-exports.deleteRole = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n+      // 检查角色是否有关联的用户\r\n+      const userCount = await role.countUsers();\r\n+      if (userCount > 0) {\r\n+        return res.status(400).json(ResponseUtil.error(\"无法删除，该角色下存在用户\", 400));\r\n+      }\r\n \r\n-    const role = await Role.findByPk(id);\r\n-    if (!role) {\r\n-      return res.status(404).json(ResponseUtil.error(\"角色不存在\", 404));\r\n+      await role.destroy();\r\n+      return res.status(200).json(ResponseUtil.success(null, \"角色删除成功\"));\r\n+    } catch (error) {\r\n+      console.error(\"删除角色失败:\", error);\r\n+      return res.status(500).json(ResponseUtil.error(\"删除角色失败\", 500));\r\n     }\r\n+  },\r\n+};\r\n \r\n-    // 检查角色是否有关联的用户\r\n-    const userCount = await role.countUsers();\r\n-    if (userCount > 0) {\r\n-      return res\r\n-        .status(400)\r\n-        .json(ResponseUtil.error(\"无法删除，该角色下存在用户\", 400));\r\n-    }\r\n-\r\n-    await role.destroy();\r\n-    return res.status(200).json(ResponseUtil.success(null, \"角色删除成功\"));\r\n-  } catch (error) {\r\n-    console.error(\"删除角色失败:\", error);\r\n-    return res.status(500).json(ResponseUtil.error(\"删除角色失败\", 500));\r\n-  }\r\n-};\r\n+module.exports = roleController;\r\n"
                },
                {
                    "date": 1746057173011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { Role, Permission } = require(\"../models\");\r\n+const { Role, Permission, RoleResource, ResourceAction, RolePermission, Resource } = require(\"../models\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n const { Op } = require(\"sequelize\");\r\n \r\n const roleController = {\r\n@@ -176,7 +176,90 @@\n       console.error(\"删除角色失败:\", error);\r\n       return res.status(500).json(ResponseUtil.error(\"删除角色失败\", 500));\r\n     }\r\n   },\r\n+\r\n+  // 分配资源\r\n+  assignResources: async (req, res) => {\r\n+    try {\r\n+      const { roleId } = req.params;\r\n+      const { resources } = req.body;\r\n+\r\n+      const role = await Role.findByPk(roleId);\r\n+      if (!role) {\r\n+        return res.status(404).json({\r\n+          success: false,\r\n+          message: \"Role not found\"\r\n+        });\r\n+      }\r\n+\r\n+      // 清除现有的资源和权限关联\r\n+      await role.setResources([]);\r\n+      await role.setPermissions([]);\r\n+\r\n+      // 重新建立关联\r\n+      for (const item of resources) {\r\n+        const { resourceId, actionIds } = item;\r\n+\r\n+        // 分配资源\r\n+        await RoleResource.create({ roleId, resourceId });\r\n+\r\n+        // 如果指定了操作ID，分配对应的权限\r\n+        if (actionIds && actionIds.length > 0) {\r\n+          const actions = await ResourceAction.findAll({\r\n+            where: { id: actionIds, resourceId },\r\n+            include: [\r\n+              {\r\n+                model: Permission,\r\n+                as: 'permission'\r\n+              }\r\n+            ]\r\n+          });\r\n+\r\n+          // 分配权限给角色\r\n+          for (const action of actions) {\r\n+            if (action.permission) {\r\n+              await RolePermission.create({\r\n+                roleId,\r\n+                permissionId: action.permission.id\r\n+              });\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // 获取更新后的角色信息\r\n+      const updatedRole = await Role.findByPk(roleId, {\r\n+        include: [\r\n+          {\r\n+            model: Resource,\r\n+            as: 'resources',\r\n+            include: [\r\n+              {\r\n+                model: ResourceAction,\r\n+                as: 'actions',\r\n+                include: [\r\n+                  {\r\n+                    model: Permission,\r\n+                    as: 'permission'\r\n+                  }\r\n+                ]\r\n+              }\r\n+            ]\r\n+          }\r\n+        ]\r\n+      });\r\n+\r\n+      res.json({\r\n+        success: true,\r\n+        data: updatedRole\r\n+      });\r\n+    } catch (error) {\r\n+      res.status(400).json({\r\n+        success: false,\r\n+        message: error.message\r\n+      });\r\n+    }\r\n+  },\r\n };\r\n \r\n module.exports = roleController;\r\n"
                }
            ],
            "date": 1745936731644,
            "name": "Commit-0",
            "content": "const { Role, Permission } = require(\"../models\");\r\nconst { sendResponse } = require(\"../utils/response\");\r\n\r\n// 创建角色\r\nexports.createRole = async (req, res) => {\r\n  try {\r\n    const { name, description, permissionIds } = req.body;\r\n\r\n    // 检查角色名是否已存在\r\n    const existingRole = await Role.findOne({ where: { name } });\r\n    if (existingRole) {\r\n      return sendResponse(res, 400, \"角色名已存在\");\r\n    }\r\n\r\n    // 创建角色\r\n    const role = await Role.create({ name, description });\r\n\r\n    // 如果提供了权限ID，关联权限\r\n    if (permissionIds && permissionIds.length > 0) {\r\n      await role.setPermissions(permissionIds);\r\n    }\r\n\r\n    // 获取完整的角色信息（包含权限）\r\n    const roleWithPermissions = await Role.findByPk(role.id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"角色创建成功\", roleWithPermissions);\r\n  } catch (error) {\r\n    console.error(\"创建角色失败:\", error);\r\n    return sendResponse(res, 500, \"创建角色失败\");\r\n  }\r\n};\r\n\r\n// 获取角色列表\r\nexports.getRoles = async (req, res) => {\r\n  try {\r\n    const { page = 1, limit = 10, search } = req.query;\r\n    const offset = (page - 1) * limit;\r\n\r\n    const where = {};\r\n    if (search) {\r\n      where.name = { [Op.like]: `%${search}%` };\r\n    }\r\n\r\n    const { count, rows } = await Role.findAndCountAll({\r\n      where,\r\n      limit: parseInt(limit),\r\n      offset: parseInt(offset),\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"获取角色列表成功\", {\r\n      total: count,\r\n      pages: Math.ceil(count / limit),\r\n      currentPage: parseInt(page),\r\n      data: rows,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"获取角色列表失败:\", error);\r\n    return sendResponse(res, 500, \"获取角色列表失败\");\r\n  }\r\n};\r\n\r\n// 获取单个角色\r\nexports.getRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const role = await Role.findByPk(id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"获取角色成功\", role);\r\n  } catch (error) {\r\n    console.error(\"获取角色失败:\", error);\r\n    return sendResponse(res, 500, \"获取角色失败\");\r\n  }\r\n};\r\n\r\n// 更新角色\r\nexports.updateRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, description, permissionIds } = req.body;\r\n\r\n    const role = await Role.findByPk(id);\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    // 检查新角色名是否与其他角色重复\r\n    if (name && name !== role.name) {\r\n      const existingRole = await Role.findOne({ where: { name } });\r\n      if (existingRole) {\r\n        return sendResponse(res, 400, \"角色名已存在\");\r\n      }\r\n    }\r\n\r\n    // 更新角色信息\r\n    await role.update({ name, description });\r\n\r\n    // 如果提供了权限ID，更新权限关联\r\n    if (permissionIds) {\r\n      await role.setPermissions(permissionIds);\r\n    }\r\n\r\n    // 获取更新后的完整角色信息\r\n    const updatedRole = await Role.findByPk(id, {\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"Permissions\",\r\n          attributes: [\"id\", \"name\", \"action\", \"resource\"],\r\n          through: { attributes: [] },\r\n        },\r\n      ],\r\n    });\r\n\r\n    return sendResponse(res, 200, \"角色更新成功\", updatedRole);\r\n  } catch (error) {\r\n    console.error(\"更新角色失败:\", error);\r\n    return sendResponse(res, 500, \"更新角色失败\");\r\n  }\r\n};\r\n\r\n// 删除角色\r\nexports.deleteRole = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const role = await Role.findByPk(id);\r\n    if (!role) {\r\n      return sendResponse(res, 404, \"角色不存在\");\r\n    }\r\n\r\n    // 检查角色是否有关联的用户\r\n    const userCount = await role.countUsers();\r\n    if (userCount > 0) {\r\n      return sendResponse(res, 400, \"无法删除，该角色下存在用户\");\r\n    }\r\n\r\n    await role.destroy();\r\n    return sendResponse(res, 200, \"角色删除成功\");\r\n  } catch (error) {\r\n    console.error(\"删除角色失败:\", error);\r\n    return sendResponse(res, 500, \"删除角色失败\");\r\n  }\r\n}; "
        }
    ]
}