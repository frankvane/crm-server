{
    "sourceFile": "controllers/resource.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746022442084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746024865528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,5 +59,5 @@\n     }\r\n   },\r\n };\r\n \r\n-module.exports = resourceController; \n\\ No newline at end of file\n+module.exports = resourceController;\r\n"
                },
                {
                    "date": 1746066721240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,16 @@\n const resourceController = {\r\n   // 创建资源\r\n   async create(req, res) {\r\n     try {\r\n-      const resource = await Resource.create(req.body);\r\n+      const resourceData = { ...req.body };\r\n+      \r\n+      // 检查是否有meta字段且为对象，如果是则序列化为JSON字符串\r\n+      if (resourceData.meta && typeof resourceData.meta === 'object') {\r\n+        resourceData.meta = JSON.stringify(resourceData.meta);\r\n+      }\r\n+      \r\n+      const resource = await Resource.create(resourceData);\r\n       res.json(ResponseUtil.success(resource, \"资源创建成功\"));\r\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n@@ -14,9 +21,24 @@\n   // 获取资源列表\r\n   async list(req, res) {\r\n     try {\r\n       const resources = await Resource.findAll();\r\n-      res.json(ResponseUtil.success(resources, \"资源列表获取成功\"));\r\n+      \r\n+      // 尝试将meta字段解析回对象\r\n+      const processedResources = resources.map(resource => {\r\n+        const resourceObj = resource.toJSON();\r\n+        if (resourceObj.meta && typeof resourceObj.meta === 'string') {\r\n+          try {\r\n+            resourceObj.meta = JSON.parse(resourceObj.meta);\r\n+          } catch (e) {\r\n+            // 如果解析失败，保留原始字符串\r\n+            console.error('Failed to parse meta JSON:', e);\r\n+          }\r\n+        }\r\n+        return resourceObj;\r\n+      });\r\n+      \r\n+      res.json(ResponseUtil.success(processedResources, \"资源列表获取成功\"));\r\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n@@ -26,9 +48,21 @@\n       const resource = await Resource.findByPk(req.params.id);\r\n       if (!resource) {\r\n         return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n       }\r\n-      res.json(ResponseUtil.success(resource, \"资源获取成功\"));\r\n+      \r\n+      // 尝试将meta字段解析回对象\r\n+      const resourceObj = resource.toJSON();\r\n+      if (resourceObj.meta && typeof resourceObj.meta === 'string') {\r\n+        try {\r\n+          resourceObj.meta = JSON.parse(resourceObj.meta);\r\n+        } catch (e) {\r\n+          // 如果解析失败，保留原始字符串\r\n+          console.error('Failed to parse meta JSON:', e);\r\n+        }\r\n+      }\r\n+      \r\n+      res.json(ResponseUtil.success(resourceObj, \"资源获取成功\"));\r\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n@@ -38,10 +72,31 @@\n       const resource = await Resource.findByPk(req.params.id);\r\n       if (!resource) {\r\n         return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n       }\r\n-      await resource.update(req.body);\r\n-      res.json(ResponseUtil.success(resource, \"资源更新成功\"));\r\n+      \r\n+      const resourceData = { ...req.body };\r\n+      \r\n+      // 检查是否有meta字段且为对象，如果是则序列化为JSON字符串\r\n+      if (resourceData.meta && typeof resourceData.meta === 'object') {\r\n+        resourceData.meta = JSON.stringify(resourceData.meta);\r\n+      }\r\n+      \r\n+      await resource.update(resourceData);\r\n+      \r\n+      // 获取更新后的资源并处理meta字段\r\n+      const updatedResource = await Resource.findByPk(req.params.id);\r\n+      const resourceObj = updatedResource.toJSON();\r\n+      if (resourceObj.meta && typeof resourceObj.meta === 'string') {\r\n+        try {\r\n+          resourceObj.meta = JSON.parse(resourceObj.meta);\r\n+        } catch (e) {\r\n+          // 如果解析失败，保留原始字符串\r\n+          console.error('Failed to parse meta JSON:', e);\r\n+        }\r\n+      }\r\n+      \r\n+      res.json(ResponseUtil.success(resourceObj, \"资源更新成功\"));\r\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n"
                },
                {
                    "date": 1746149718629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,32 @@\n const { Resource } = require(\"../models\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n+const { Op } = require(\"sequelize\");\r\n \r\n+// 将meta字段处理逻辑抽出来作为工具函数\r\n+const processMeta = (resource) => {\r\n+  const resourceObj = resource.toJSON();\r\n+  if (resourceObj.meta && typeof resourceObj.meta === \"string\") {\r\n+    try {\r\n+      resourceObj.meta = JSON.parse(resourceObj.meta);\r\n+    } catch (e) {\r\n+      console.error(\"Failed to parse meta JSON:\", e);\r\n+    }\r\n+  }\r\n+  return resourceObj;\r\n+};\r\n+\r\n+// 构建资源树的递归函数\r\n+const buildResourceTree = (resources, parentId = null) => {\r\n+  return resources\r\n+    .filter((resource) => resource.parentId === parentId)\r\n+    .map((resource) => ({\r\n+      ...resource,\r\n+      children: buildResourceTree(resources, resource.id),\r\n+    }))\r\n+    .sort((a, b) => a.sort - b.sort); // 按sort字段排序\r\n+};\r\n+\r\n const resourceController = {\r\n   // 创建资源\r\n   async create(req, res) {\r\n     try {\r\n@@ -17,32 +42,45 @@\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n-  // 获取资源列表\r\n+  // 获取资源列表（扁平结构）\r\n   async list(req, res) {\r\n     try {\r\n-      const resources = await Resource.findAll();\r\n-\r\n-      // 尝试将meta字段解析回对象\r\n-      const processedResources = resources.map((resource) => {\r\n-        const resourceObj = resource.toJSON();\r\n-        if (resourceObj.meta && typeof resourceObj.meta === \"string\") {\r\n-          try {\r\n-            resourceObj.meta = JSON.parse(resourceObj.meta);\r\n-          } catch (e) {\r\n-            // 如果解析失败，保留原始字符串\r\n-            console.error(\"Failed to parse meta JSON:\", e);\r\n-          }\r\n-        }\r\n-        return resourceObj;\r\n+      const resources = await Resource.findAll({\r\n+        order: [\r\n+          [\"sort\", \"ASC\"],\r\n+          [\"createdAt\", \"ASC\"],\r\n+        ],\r\n       });\r\n \r\n+      const processedResources = resources.map(processMeta);\r\n       res.json(ResponseUtil.success(processedResources, \"资源列表获取成功\"));\r\n     } catch (error) {\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n+  // 获取资源树\r\n+  async tree(req, res) {\r\n+    try {\r\n+      const resources = await Resource.findAll({\r\n+        order: [\r\n+          [\"sort\", \"ASC\"],\r\n+          [\"createdAt\", \"ASC\"],\r\n+        ],\r\n+      });\r\n+\r\n+      // 处理所有资源的meta字段\r\n+      const processedResources = resources.map(processMeta);\r\n+\r\n+      // 构建树形结构\r\n+      const tree = buildResourceTree(processedResources);\r\n+\r\n+      res.json(ResponseUtil.success(tree, \"资源树获取成功\"));\r\n+    } catch (error) {\r\n+      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n+    }\r\n+  },\r\n   // 获取单个资源\r\n   async getById(req, res) {\r\n     try {\r\n       const resource = await Resource.findByPk(req.params.id);\r\n"
                },
                {
                    "date": 1746156144440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n-const { Resource } = require(\"../models\");\r\n+const { Resource, ResourceAction, Permission } = require(\"../models\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n const { Op } = require(\"sequelize\");\r\n+const sequelize = require(\"../config/sequelize\");\r\n \r\n // 将meta字段处理逻辑抽出来作为工具函数\r\n const processMeta = (resource) => {\r\n   const resourceObj = resource.toJSON();\r\n@@ -139,16 +140,62 @@\n     }\r\n   },\r\n   // 删除资源\r\n   async delete(req, res) {\r\n+    const t = await sequelize.transaction();\r\n     try {\r\n-      const resource = await Resource.findByPk(req.params.id);\r\n+      const { id } = req.params;\r\n+\r\n+      // 查找资源及其关联的资源操作和权限\r\n+      const resource = await Resource.findByPk(id, {\r\n+        include: [\r\n+          {\r\n+            model: ResourceAction,\r\n+            as: \"actions\",\r\n+            include: [\r\n+              {\r\n+                model: Permission,\r\n+                as: \"permission\",\r\n+              },\r\n+            ],\r\n+          },\r\n+        ],\r\n+        transaction: t,\r\n+      });\r\n+\r\n       if (!resource) {\r\n+        await t.rollback();\r\n         return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n       }\r\n-      await resource.destroy();\r\n+\r\n+      // 检查是否有子资源\r\n+      const hasChildren = await Resource.count({\r\n+        where: { parentId: id },\r\n+        transaction: t,\r\n+      });\r\n+\r\n+      if (hasChildren > 0) {\r\n+        await t.rollback();\r\n+        return res.status(400).json(ResponseUtil.error(\"请先删除子资源\", 400));\r\n+      }\r\n+\r\n+      // 删除关联的权限和资源操作\r\n+      if (resource.actions && resource.actions.length > 0) {\r\n+        for (const action of resource.actions) {\r\n+          if (action.permission) {\r\n+            await action.permission.destroy({ transaction: t });\r\n+          }\r\n+          await action.destroy({ transaction: t });\r\n+        }\r\n+      }\r\n+\r\n+      // 删除资源本身\r\n+      await resource.destroy({ transaction: t });\r\n+\r\n+      await t.commit();\r\n       res.json(ResponseUtil.success(null, \"资源删除成功\"));\r\n     } catch (error) {\r\n+      await t.rollback();\r\n       res.status(500).json(ResponseUtil.error(error.message, 500));\r\n     }\r\n   },\r\n };\r\n"
                }
            ],
            "date": 1746022442084,
            "name": "Commit-0",
            "content": "const { Resource } = require(\"../models\");\r\nconst ResponseUtil = require(\"../utils/response\");\r\n\r\nconst resourceController = {\r\n  // 创建资源\r\n  async create(req, res) {\r\n    try {\r\n      const resource = await Resource.create(req.body);\r\n      res.json(ResponseUtil.success(resource, \"资源创建成功\"));\r\n    } catch (error) {\r\n      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n    }\r\n  },\r\n  // 获取资源列表\r\n  async list(req, res) {\r\n    try {\r\n      const resources = await Resource.findAll();\r\n      res.json(ResponseUtil.success(resources, \"资源列表获取成功\"));\r\n    } catch (error) {\r\n      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n    }\r\n  },\r\n  // 获取单个资源\r\n  async getById(req, res) {\r\n    try {\r\n      const resource = await Resource.findByPk(req.params.id);\r\n      if (!resource) {\r\n        return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n      }\r\n      res.json(ResponseUtil.success(resource, \"资源获取成功\"));\r\n    } catch (error) {\r\n      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n    }\r\n  },\r\n  // 更新资源\r\n  async update(req, res) {\r\n    try {\r\n      const resource = await Resource.findByPk(req.params.id);\r\n      if (!resource) {\r\n        return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n      }\r\n      await resource.update(req.body);\r\n      res.json(ResponseUtil.success(resource, \"资源更新成功\"));\r\n    } catch (error) {\r\n      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n    }\r\n  },\r\n  // 删除资源\r\n  async delete(req, res) {\r\n    try {\r\n      const resource = await Resource.findByPk(req.params.id);\r\n      if (!resource) {\r\n        return res.status(404).json(ResponseUtil.error(\"资源不存在\", 404));\r\n      }\r\n      await resource.destroy();\r\n      res.json(ResponseUtil.success(null, \"资源删除成功\"));\r\n    } catch (error) {\r\n      res.status(500).json(ResponseUtil.error(error.message, 500));\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = resourceController; "
        }
    ]
}