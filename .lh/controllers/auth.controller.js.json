{
    "sourceFile": "controllers/auth.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1745923933211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745924153230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const bcrypt = require(\"bcryptjs\");\r\n const { User, Role, Permission, RefreshToken } = require(\"../models\");\r\n const jwt = require(\"../utils/jwt\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n+const config = require(\"../config/auth\");\r\n \r\n // 用户登录\r\n exports.login = async (req, res, next) => {\r\n   try {\r\n@@ -33,12 +34,17 @@\n     // 生成令牌\r\n     const accessToken = jwt.generateAccessToken(user);\r\n     const refreshToken = jwt.generateRefreshToken(user);\r\n \r\n+    // 计算刷新令牌过期时间\r\n+    const expiresAt = new Date();\r\n+    expiresAt.setDate(expiresAt.getDate() + 7); // 7天后过期\r\n+\r\n     // 保存刷新令牌\r\n     await RefreshToken.create({\r\n       token: refreshToken,\r\n       userId: user.id,\r\n+      expiresAt: expiresAt\r\n     });\r\n \r\n     // 返回令牌和用户信息（不包含密码）\r\n     const userWithoutPassword = {\r\n"
                },
                {
                    "date": 1745926799756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n+const { User, Role, Permission, RefreshToken } = require(\"../models\");\r\n const bcrypt = require(\"bcryptjs\");\r\n-const { User, Role, Permission, RefreshToken } = require(\"../models\");\r\n-const jwt = require(\"../utils/jwt\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const config = require(\"../config/auth\");\r\n const ResponseUtil = require(\"../utils/response\");\r\n-const config = require(\"../config/auth\");\r\n \r\n // 用户登录\r\n exports.login = async (req, res, next) => {\r\n   try {\r\n@@ -11,17 +11,14 @@\n \r\n     // 查找用户\r\n     const user = await User.findOne({\r\n       where: { username },\r\n-      include: [\r\n-        {\r\n-          model: Role,\r\n-          include: [{ model: Permission }],\r\n-        },\r\n-      ],\r\n+      include: [{\r\n+        model: Role,\r\n+        include: [Permission]\r\n+      }]\r\n     });\r\n \r\n-    // 验证用户是否存在\r\n     if (!user) {\r\n       return res.status(401).json(ResponseUtil.error(\"User not found\", 401));\r\n     }\r\n \r\n@@ -30,42 +27,37 @@\n     if (!isValidPassword) {\r\n       return res.status(401).json(ResponseUtil.error(\"Invalid password\", 401));\r\n     }\r\n \r\n-    // 生成令牌\r\n-    const accessToken = jwt.generateAccessToken(user);\r\n-    const refreshToken = jwt.generateRefreshToken(user);\r\n+    // 生成访问令牌和刷新令牌\r\n+    const accessToken = jwt.sign(\r\n+      { id: user.id },\r\n+      config.secret,\r\n+      { expiresIn: config.accessTokenExpiry }\r\n+    );\r\n \r\n-    // 计算刷新令牌过期时间\r\n-    const expiresAt = new Date();\r\n-    expiresAt.setDate(expiresAt.getDate() + 7); // 7天后过期\r\n+    const refreshToken = jwt.sign(\r\n+      { id: user.id },\r\n+      config.refreshSecret,\r\n+      { expiresIn: config.refreshTokenExpiry }\r\n+    );\r\n \r\n     // 保存刷新令牌\r\n     await RefreshToken.create({\r\n       token: refreshToken,\r\n       userId: user.id,\r\n-      expiresAt: expiresAt,\r\n+      expiresAt: new Date(Date.now() + config.refreshTokenExpiry * 1000)\r\n     });\r\n \r\n-    // 返回令牌和用户信息（不包含密码）\r\n-    const userWithoutPassword = {\r\n-      id: user.id,\r\n-      username: user.username,\r\n-      email: user.email,\r\n-      status: user.status,\r\n-      roles: user.Roles,\r\n-    };\r\n+    // 准备用户数据（排除密码）\r\n+    const userData = user.toJSON();\r\n+    delete userData.password;\r\n \r\n-    res.json(\r\n-      ResponseUtil.success(\r\n-        {\r\n-          user: userWithoutPassword,\r\n-          accessToken,\r\n-          refreshToken,\r\n-        },\r\n-        \"Login successful\"\r\n-      )\r\n-    );\r\n+    res.json(ResponseUtil.success({\r\n+      user: userData,\r\n+      accessToken,\r\n+      refreshToken\r\n+    }, \"Login successful\"));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n };\r\n@@ -75,37 +67,40 @@\n   try {\r\n     const { refreshToken } = req.body;\r\n \r\n     if (!refreshToken) {\r\n-      return res\r\n-        .status(401)\r\n-        .json(ResponseUtil.error(\"No refresh token provided\", 401));\r\n+      return res.status(401).json(ResponseUtil.error(\"No refresh token provided\", 401));\r\n     }\r\n \r\n     // 验证刷新令牌\r\n-    const tokenDoc = await RefreshToken.findOne({\r\n-      where: { token: refreshToken },\r\n-      include: [\r\n-        {\r\n-          model: User,\r\n-          include: [{ model: Role }],\r\n-        },\r\n-      ],\r\n+    const storedToken = await RefreshToken.findOne({\r\n+      where: { token: refreshToken }\r\n     });\r\n \r\n-    if (!tokenDoc) {\r\n-      return res\r\n-        .status(401)\r\n-        .json(ResponseUtil.error(\"Invalid refresh token\", 401));\r\n+    if (!storedToken) {\r\n+      return res.status(401).json(ResponseUtil.error(\"Invalid refresh token\", 401));\r\n     }\r\n \r\n+    if (new Date() > storedToken.expiresAt) {\r\n+      await storedToken.destroy();\r\n+      return res.status(401).json(ResponseUtil.error(\"Refresh token expired\", 401));\r\n+    }\r\n+\r\n+    // 验证并解码令牌\r\n+    const decoded = jwt.verify(refreshToken, config.refreshSecret);\r\n+\r\n     // 生成新的访问令牌\r\n-    const accessToken = jwt.generateAccessToken(tokenDoc.User);\r\n+    const accessToken = jwt.sign(\r\n+      { id: decoded.id },\r\n+      config.secret,\r\n+      { expiresIn: config.accessTokenExpiry }\r\n+    );\r\n \r\n-    res.json(\r\n-      ResponseUtil.success({ accessToken }, \"Token refreshed successfully\")\r\n-    );\r\n+    res.json(ResponseUtil.success({ accessToken }, \"Token refreshed successfully\"));\r\n   } catch (err) {\r\n+    if (err.name === \"JsonWebTokenError\") {\r\n+      return res.status(401).json(ResponseUtil.error(\"Invalid refresh token\", 401));\r\n+    }\r\n     next(err);\r\n   }\r\n };\r\n \r\n@@ -114,16 +109,14 @@\n   try {\r\n     const { refreshToken } = req.body;\r\n \r\n     if (!refreshToken) {\r\n-      return res\r\n-        .status(401)\r\n-        .json(ResponseUtil.error(\"No refresh token provided\", 401));\r\n+      return res.status(401).json(ResponseUtil.error(\"No refresh token provided\", 401));\r\n     }\r\n \r\n     // 删除刷新令牌\r\n     await RefreshToken.destroy({\r\n-      where: { token: refreshToken },\r\n+      where: { token: refreshToken }\r\n     });\r\n \r\n     res.json(ResponseUtil.success(null, \"Logged out successfully\"));\r\n   } catch (err) {\r\n"
                }
            ],
            "date": 1745923933211,
            "name": "Commit-0",
            "content": "const bcrypt = require(\"bcryptjs\");\r\nconst { User, Role, Permission, RefreshToken } = require(\"../models\");\r\nconst jwt = require(\"../utils/jwt\");\r\nconst ResponseUtil = require(\"../utils/response\");\r\n\r\n// 用户登录\r\nexports.login = async (req, res, next) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n\r\n    // 查找用户\r\n    const user = await User.findOne({\r\n      where: { username },\r\n      include: [{\r\n        model: Role,\r\n        include: [{ model: Permission }]\r\n      }]\r\n    });\r\n\r\n    // 验证用户是否存在\r\n    if (!user) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"User not found\", 401)\r\n      );\r\n    }\r\n\r\n    // 验证密码\r\n    const isValidPassword = await bcrypt.compare(password, user.password);\r\n    if (!isValidPassword) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"Invalid password\", 401)\r\n      );\r\n    }\r\n\r\n    // 生成令牌\r\n    const accessToken = jwt.generateAccessToken(user);\r\n    const refreshToken = jwt.generateRefreshToken(user);\r\n\r\n    // 保存刷新令牌\r\n    await RefreshToken.create({\r\n      token: refreshToken,\r\n      userId: user.id\r\n    });\r\n\r\n    // 返回令牌和用户信息（不包含密码）\r\n    const userWithoutPassword = {\r\n      id: user.id,\r\n      username: user.username,\r\n      email: user.email,\r\n      status: user.status,\r\n      roles: user.Roles\r\n    };\r\n\r\n    res.json(ResponseUtil.success({\r\n      user: userWithoutPassword,\r\n      accessToken,\r\n      refreshToken\r\n    }, \"Login successful\"));\r\n\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 刷新令牌\r\nexports.refresh = async (req, res, next) => {\r\n  try {\r\n    const { refreshToken } = req.body;\r\n\r\n    if (!refreshToken) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"No refresh token provided\", 401)\r\n      );\r\n    }\r\n\r\n    // 验证刷新令牌\r\n    const tokenDoc = await RefreshToken.findOne({\r\n      where: { token: refreshToken },\r\n      include: [{\r\n        model: User,\r\n        include: [{ model: Role }]\r\n      }]\r\n    });\r\n\r\n    if (!tokenDoc) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"Invalid refresh token\", 401)\r\n      );\r\n    }\r\n\r\n    // 生成新的访问令牌\r\n    const accessToken = jwt.generateAccessToken(tokenDoc.User);\r\n\r\n    res.json(ResponseUtil.success({ accessToken }, \"Token refreshed successfully\"));\r\n\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 注销登录\r\nexports.logout = async (req, res, next) => {\r\n  try {\r\n    const { refreshToken } = req.body;\r\n\r\n    if (!refreshToken) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"No refresh token provided\", 401)\r\n      );\r\n    }\r\n\r\n    // 删除刷新令牌\r\n    await RefreshToken.destroy({\r\n      where: { token: refreshToken }\r\n    });\r\n\r\n    res.json(ResponseUtil.success(null, \"Logged out successfully\"));\r\n\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n"
        }
    ]
}