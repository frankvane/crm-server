{
    "sourceFile": "controllers/category.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746026148836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746026204440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,13 +186,17 @@\n async function getById(req, res) {\r\n   try {\r\n     const category = await Category.findByPk(req.params.id);\r\n     if (!category) {\r\n-      return res.status(404).json({ code: 404, message: 'Category not found', data: null });\r\n+      return res\r\n+        .status(404)\r\n+        .json({ code: 404, message: \"Category not found\", data: null });\r\n     }\r\n-    res.json({ code: 200, message: 'Success', data: category });\r\n+    res.json({ code: 200, message: \"Success\", data: category });\r\n   } catch (error) {\r\n-    res.status(500).json({ code: 500, message: 'Internal server error', data: null });\r\n+    res\r\n+      .status(500)\r\n+      .json({ code: 500, message: \"Internal server error\", data: null });\r\n   }\r\n }\r\n \r\n module.exports.getById = getById;\r\n"
                },
                {
                    "date": 1746102062108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,23 +49,19 @@\n // 获取分类列表\r\n exports.list = async (req, res, next) => {\r\n   try {\r\n     const { typeId } = req.query;\r\n-\r\n-    if (!typeId) {\r\n-      return res\r\n-        .status(400)\r\n-        .json(ResponseUtil.error(\"TypeId is required\", 400));\r\n+    const where = {};\r\n+    if (typeId) {\r\n+      where.typeId = typeId;\r\n     }\r\n-\r\n     const categories = await Category.findAll({\r\n-      where: { typeId },\r\n+      where,\r\n       order: [\r\n         [\"sort\", \"ASC\"],\r\n         [\"id\", \"ASC\"],\r\n       ],\r\n     });\r\n-\r\n     res.json(ResponseUtil.success(categories));\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n"
                },
                {
                    "date": 1746103980340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,16 @@\n exports.getTree = async (req, res, next) => {\r\n   try {\r\n     const { typeId } = req.query;\r\n \r\n-    if (!typeId) {\r\n-      return res\r\n-        .status(400)\r\n-        .json(ResponseUtil.error(\"TypeId is required\", 400));\r\n+    // typeId 未传或为 0 时，查全部分类\r\n+    const where = {};\r\n+    if (typeId && typeId !== '0') {\r\n+      where.typeId = typeId;\r\n     }\r\n \r\n     const categories = await Category.findAll({\r\n-      where: { typeId },\r\n+      where,\r\n       order: [\r\n         [\"sort\", \"ASC\"],\r\n         [\"id\", \"ASC\"],\r\n       ],\r\n"
                },
                {
                    "date": 1746103993385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     const { typeId } = req.query;\r\n \r\n     // typeId 未传或为 0 时，查全部分类\r\n     const where = {};\r\n-    if (typeId && typeId !== '0') {\r\n+    if (typeId && typeId !== \"0\") {\r\n       where.typeId = typeId;\r\n     }\r\n \r\n     const categories = await Category.findAll({\r\n"
                },
                {
                    "date": 1746104017076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n     if (typeId && typeId !== \"0\") {\r\n       where.typeId = typeId;\r\n     }\r\n \r\n+    console.log(where);\r\n     const categories = await Category.findAll({\r\n       where,\r\n       order: [\r\n         [\"sort\", \"ASC\"],\r\n"
                },
                {
                    "date": 1746109929466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,8 @@\n     if (typeId && typeId !== \"0\") {\r\n       where.typeId = typeId;\r\n     }\r\n \r\n-    console.log(where);\r\n     const categories = await Category.findAll({\r\n       where,\r\n       order: [\r\n         [\"sort\", \"ASC\"],\r\n"
                },
                {
                    "date": 1746110701294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,14 @@\n \r\n // 获取分类树\r\n exports.getTree = async (req, res, next) => {\r\n   try {\r\n-    const { typeId } = req.query;\r\n+    let { typeId } = req.query;\r\n+    typeId = typeId ? String(typeId) : \"0\"; // 确保 typeId 是字符串，undefined 转为 '0'\r\n \r\n-    // typeId 未传或为 0 时，查全部分类\r\n+    // typeId 为 0 时，查全部分类\r\n     const where = {};\r\n-    if (typeId && typeId !== \"0\") {\r\n+    if (typeId !== \"0\") {\r\n       where.typeId = typeId;\r\n     }\r\n \r\n     const categories = await Category.findAll({\r\n"
                }
            ],
            "date": 1746026148836,
            "name": "Commit-0",
            "content": "const { Category } = require(\"../models\");\r\nconst ResponseUtil = require(\"../utils/response\");\r\n\r\n// 创建分类\r\nexports.create = async (req, res, next) => {\r\n  try {\r\n    const { name, code, typeId, parentId, sort = 0, description } = req.body;\r\n\r\n    // 检查必填字段\r\n    if (!name || !code || !typeId) {\r\n      return res\r\n        .status(400)\r\n        .json(ResponseUtil.error(\"Name, code and typeId are required\", 400));\r\n    }\r\n\r\n    // 检查同类型下的code是否重复\r\n    const existingCategory = await Category.findOne({\r\n      where: { code, typeId },\r\n    });\r\n\r\n    if (existingCategory) {\r\n      return res\r\n        .status(400)\r\n        .json(\r\n          ResponseUtil.error(\r\n            \"Category code already exists under the same type\",\r\n            400\r\n          )\r\n        );\r\n    }\r\n\r\n    const category = await Category.create({\r\n      name,\r\n      code,\r\n      typeId,\r\n      parentId,\r\n      sort,\r\n      description,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json(ResponseUtil.success(category, \"Category created successfully\"));\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取分类列表\r\nexports.list = async (req, res, next) => {\r\n  try {\r\n    const { typeId } = req.query;\r\n\r\n    if (!typeId) {\r\n      return res\r\n        .status(400)\r\n        .json(ResponseUtil.error(\"TypeId is required\", 400));\r\n    }\r\n\r\n    const categories = await Category.findAll({\r\n      where: { typeId },\r\n      order: [\r\n        [\"sort\", \"ASC\"],\r\n        [\"id\", \"ASC\"],\r\n      ],\r\n    });\r\n\r\n    res.json(ResponseUtil.success(categories));\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取分类树\r\nexports.getTree = async (req, res, next) => {\r\n  try {\r\n    const { typeId } = req.query;\r\n\r\n    if (!typeId) {\r\n      return res\r\n        .status(400)\r\n        .json(ResponseUtil.error(\"TypeId is required\", 400));\r\n    }\r\n\r\n    const categories = await Category.findAll({\r\n      where: { typeId },\r\n      order: [\r\n        [\"sort\", \"ASC\"],\r\n        [\"id\", \"ASC\"],\r\n      ],\r\n    });\r\n\r\n    // 构建树形结构\r\n    const buildTree = (list, parentId = null) =>\r\n      list\r\n        .filter((c) => c.parentId === parentId)\r\n        .map((c) => ({\r\n          ...c.toJSON(),\r\n          children: buildTree(list, c.id),\r\n        }));\r\n\r\n    const tree = buildTree(categories);\r\n    res.json(ResponseUtil.success(tree));\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 更新分类\r\nexports.update = async (req, res, next) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, code, parentId, sort, description } = req.body;\r\n\r\n    const category = await Category.findByPk(id);\r\n    if (!category) {\r\n      return res\r\n        .status(404)\r\n        .json(ResponseUtil.error(\"Category not found\", 404));\r\n    }\r\n\r\n    // 如果要更新code，检查是否与其他分类冲突\r\n    if (code && code !== category.code) {\r\n      const existingCategory = await Category.findOne({\r\n        where: { code, typeId: category.typeId },\r\n      });\r\n\r\n      if (existingCategory) {\r\n        return res\r\n          .status(400)\r\n          .json(\r\n            ResponseUtil.error(\r\n              \"Category code already exists under the same type\",\r\n              400\r\n            )\r\n          );\r\n      }\r\n    }\r\n\r\n    // 更新字段\r\n    if (name) category.name = name;\r\n    if (code) category.code = code;\r\n    if (typeof parentId !== \"undefined\") category.parentId = parentId;\r\n    if (typeof sort !== \"undefined\") category.sort = sort;\r\n    if (typeof description !== \"undefined\") category.description = description;\r\n\r\n    await category.save();\r\n\r\n    res.json(ResponseUtil.success(category, \"Category updated successfully\"));\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 删除分类\r\nexports.delete = async (req, res, next) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const category = await Category.findByPk(id);\r\n    if (!category) {\r\n      return res\r\n        .status(404)\r\n        .json(ResponseUtil.error(\"Category not found\", 404));\r\n    }\r\n\r\n    // 检查是否有子分类\r\n    const childrenCount = await Category.count({\r\n      where: { parentId: id },\r\n    });\r\n\r\n    if (childrenCount > 0) {\r\n      return res\r\n        .status(400)\r\n        .json(ResponseUtil.error(\"Cannot delete category with children\", 400));\r\n    }\r\n\r\n    await category.destroy();\r\n    res.json(ResponseUtil.success(null, \"Category deleted successfully\"));\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n// 获取单个分类\r\nasync function getById(req, res) {\r\n  try {\r\n    const category = await Category.findByPk(req.params.id);\r\n    if (!category) {\r\n      return res.status(404).json({ code: 404, message: 'Category not found', data: null });\r\n    }\r\n    res.json({ code: 200, message: 'Success', data: category });\r\n  } catch (error) {\r\n    res.status(500).json({ code: 500, message: 'Internal server error', data: null });\r\n  }\r\n}\r\n\r\nmodule.exports.getById = getById;\r\n"
        }
    ]
}