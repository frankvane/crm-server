{
    "sourceFile": "seeders/init.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1745880408862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745880496806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,84 @@\n-const bcrypt = require('bcryptjs');\r\n-const { User, Role, Permission } = require('../models');\r\n+const bcrypt = require(\"bcryptjs\");\r\n+const { User, Role, Permission } = require(\"../models\");\r\n \r\n async function createInitialData() {\r\n   try {\r\n     // 1. 创建权限\r\n     const permissions = await Permission.bulkCreate([\r\n-      { name: 'create_user', action: 'create', resource: 'user', description: '创建用户' },\r\n-      { name: 'view_users', action: 'read', resource: 'user', description: '查看用户' },\r\n-      { name: 'update_user', action: 'update', resource: 'user', description: '更新用户' },\r\n-      { name: 'delete_user', action: 'delete', resource: 'user', description: '删除用户' },\r\n-      { name: 'manage_roles', action: 'manage', resource: 'role', description: '管理角色' },\r\n-      { name: 'manage_categories', action: 'manage', resource: 'category', description: '管理分类' }\r\n+      {\r\n+        name: \"create_user\",\r\n+        action: \"create\",\r\n+        resource: \"user\",\r\n+        description: \"创建用户\",\r\n+      },\r\n+      {\r\n+        name: \"view_users\",\r\n+        action: \"read\",\r\n+        resource: \"user\",\r\n+        description: \"查看用户\",\r\n+      },\r\n+      {\r\n+        name: \"update_user\",\r\n+        action: \"update\",\r\n+        resource: \"user\",\r\n+        description: \"更新用户\",\r\n+      },\r\n+      {\r\n+        name: \"delete_user\",\r\n+        action: \"delete\",\r\n+        resource: \"user\",\r\n+        description: \"删除用户\",\r\n+      },\r\n+      {\r\n+        name: \"manage_roles\",\r\n+        action: \"manage\",\r\n+        resource: \"role\",\r\n+        description: \"管理角色\",\r\n+      },\r\n+      {\r\n+        name: \"manage_categories\",\r\n+        action: \"manage\",\r\n+        resource: \"category\",\r\n+        description: \"管理分类\",\r\n+      },\r\n     ]);\r\n \r\n     // 2. 创建角色\r\n\\ No newline at end of file\n     const adminRole = await Role.create({\r\n-      name: 'admin',\r\n-      description: '系统管理员'\r\n+      name: \"admin\",\r\n+      description: \"系统管理员\",\r\n     });\r\n \r\n     const userRole = await Role.create({\r\n-      name: 'user',\r\n-      description: '普通用户'\r\n+      name: \"user\",\r\n+      description: \"普通用户\",\r\n     });\r\n \r\n     // 3. 为角色分配权限\r\n     // 管理员拥有所有权限\r\n     await adminRole.setPermissions(permissions);\r\n     // 普通用户只有查看权限\r\n     await userRole.setPermissions(\r\n-      permissions.filter(p => p.name === 'view_users')\r\n+      permissions.filter((p) => p.name === \"view_users\")\r\n     );\r\n \r\n     // 4. 创建管理员用户\r\n     const adminUser = await User.create({\r\n-      username: 'admin',\r\n-      password: 'admin123', // 会自动加密\r\n-      email: 'admin@example.com',\r\n-      status: true\r\n+      username: \"admin\",\r\n+      password: \"admin123\", // 会自动加密\r\n+      email: \"admin@example.com\",\r\n+      status: true,\r\n     });\r\n \r\n     // 5. 为管理员分配角色\r\n     await adminUser.setRoles([adminRole.id]);\r\n \r\n-    console.log('Initial data created successfully!');\r\n+    console.log(\"Initial data created successfully!\");\r\n     return { adminUser, adminRole, userRole, permissions };\r\n   } catch (error) {\r\n-    console.error('Error creating initial data:', error);\r\n+    console.error(\"Error creating initial data:\", error);\r\n     throw error;\r\n   }\r\n }\r\n \r\n-module.exports = createInitialData;\n+module.exports = createInitialData;\r\n"
                },
                {
                    "date": 1745880703110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,5 +80,5 @@\n     throw error;\r\n   }\r\n }\r\n \r\n-module.exports = createInitialData;\n\\ No newline at end of file\n+module.exports = createInitialData;\r\n"
                },
                {
                    "date": 1745924862629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const bcrypt = require(\"bcryptjs\");\r\n-const { User, Role, Permission } = require(\"../models\");\r\n+const { User, Role, Permission, CategoryType } = require(\"../models\");\r\n \r\n async function createInitialData() {\r\n   try {\r\n     // 1. 创建权限\r\n@@ -72,8 +72,30 @@\n \r\n     // 5. 为管理员分配角色\r\n     await adminUser.setRoles([adminRole.id]);\r\n \r\n+    // 6. 创建默认分类类型\r\n+    await CategoryType.bulkCreate([\r\n+      {\r\n+        name: \"菜单分类\",\r\n+        code: \"menu\",\r\n+        description: \"系统菜单分类\",\r\n+        status: true\r\n+      },\r\n+      {\r\n+        name: \"产品分类\",\r\n+        code: \"product\",\r\n+        description: \"产品管理分类\",\r\n+        status: true\r\n+      },\r\n+      {\r\n+        name: \"资讯分类\",\r\n+        code: \"article\",\r\n+        description: \"资讯文章分类\",\r\n+        status: true\r\n+      }\r\n+    ]);\r\n+\r\n     console.log(\"Initial data created successfully!\");\r\n     return { adminUser, adminRole, userRole, permissions };\r\n   } catch (error) {\r\n     console.error(\"Error creating initial data:\", error);\r\n"
                },
                {
                    "date": 1745924885286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,22 +78,22 @@\n       {\r\n         name: \"菜单分类\",\r\n         code: \"menu\",\r\n         description: \"系统菜单分类\",\r\n-        status: true\r\n+        status: true,\r\n       },\r\n       {\r\n         name: \"产品分类\",\r\n         code: \"product\",\r\n         description: \"产品管理分类\",\r\n-        status: true\r\n+        status: true,\r\n       },\r\n       {\r\n         name: \"资讯分类\",\r\n         code: \"article\",\r\n         description: \"资讯文章分类\",\r\n-        status: true\r\n-      }\r\n+        status: true,\r\n+      },\r\n     ]);\r\n \r\n     console.log(\"Initial data created successfully!\");\r\n     return { adminUser, adminRole, userRole, permissions };\r\n"
                },
                {
                    "date": 1745925231119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const bcrypt = require(\"bcryptjs\");\r\n-const { User, Role, Permission, CategoryType } = require(\"../models\");\r\n+const { User, Role, Permission, CategoryType, Category } = require(\"../models\");\r\n \r\n async function createInitialData() {\r\n   try {\r\n     // 1. 创建权限\r\n@@ -73,29 +73,129 @@\n     // 5. 为管理员分配角色\r\n     await adminUser.setRoles([adminRole.id]);\r\n \r\n     // 6. 创建默认分类类型\r\n-    await CategoryType.bulkCreate([\r\n+    const [menuType, productType] = await CategoryType.bulkCreate([\r\n       {\r\n-        name: \"菜单分类\",\r\n+        name: \"系统菜单\",\r\n         code: \"menu\",\r\n         description: \"系统菜单分类\",\r\n-        status: true,\r\n+        status: true\r\n       },\r\n       {\r\n-        name: \"产品分类\",\r\n+        name: \"产品管理\",\r\n         code: \"product\",\r\n-        description: \"产品管理分类\",\r\n-        status: true,\r\n+        description: \"产品相关分类\",\r\n+        status: true\r\n+      }\r\n+    ]);\r\n+\r\n+    // 7. 创建系统菜单分类\r\n+    const systemManage = await Category.create({\r\n+      name: \"系统管理\",\r\n+      code: \"system\",\r\n+      typeId: menuType.id,\r\n+      sort: 1,\r\n+      description: \"系统管理相关功能\"\r\n+    });\r\n+\r\n+    await Category.bulkCreate([\r\n+      {\r\n+        name: \"用户管理\",\r\n+        code: \"user\",\r\n+        parentId: systemManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 1\r\n       },\r\n       {\r\n-        name: \"资讯分类\",\r\n-        code: \"article\",\r\n-        description: \"资讯文章分类\",\r\n-        status: true,\r\n+        name: \"角色管理\",\r\n+        code: \"role\",\r\n+        parentId: systemManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 2\r\n       },\r\n+      {\r\n+        name: \"权限管理\",\r\n+        code: \"permission\",\r\n+        parentId: systemManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 3\r\n+      },\r\n+      {\r\n+        name: \"分类管理\",\r\n+        code: \"category\",\r\n+        parentId: systemManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 4\r\n+      }\r\n     ]);\r\n \r\n+    // 创建产品相关分类\r\n+    const productManage = await Category.create({\r\n+      name: \"产品管理\",\r\n+      code: \"product\",\r\n+      typeId: menuType.id,\r\n+      sort: 2,\r\n+      description: \"产品管理相关功能\"\r\n+    });\r\n+\r\n+    await Category.bulkCreate([\r\n+      {\r\n+        name: \"产品列表\",\r\n+        code: \"product-list\",\r\n+        parentId: productManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 1\r\n+      },\r\n+      {\r\n+        name: \"品牌管理\",\r\n+        code: \"brand\",\r\n+        parentId: productManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 2\r\n+      },\r\n+      {\r\n+        name: \"分类管理\",\r\n+        code: \"category\",\r\n+        parentId: productManage.id,\r\n+        typeId: menuType.id,\r\n+        sort: 3\r\n+      }\r\n+    ]);\r\n+\r\n+    // 创建产品分类数据\r\n+    const productCategory = await Category.create({\r\n+      name: \"所有产品\",\r\n+      code: \"all-products\",\r\n+      typeId: productType.id,\r\n+      sort: 1,\r\n+      description: \"产品分类\"\r\n+    });\r\n+\r\n+    await Category.bulkCreate([\r\n+      {\r\n+        name: \"电子产品\",\r\n+        code: \"electronics\",\r\n+        parentId: productCategory.id,\r\n+        typeId: productType.id,\r\n+        sort: 1\r\n+      },\r\n+      {\r\n+        name: \"家具用品\",\r\n+        code: \"furniture\",\r\n+        parentId: productCategory.id,\r\n+        typeId: productType.id,\r\n+        sort: 2\r\n+      },\r\n+      {\r\n+        name: \"办公用品\",\r\n+        code: \"office\",\r\n+        parentId: productCategory.id,\r\n+        typeId: productType.id,\r\n+        sort: 3\r\n+      }\r\n+    ]);\r\n+\r\n     console.log(\"Initial data created successfully!\");\r\n     return { adminUser, adminRole, userRole, permissions };\r\n   } catch (error) {\r\n     console.error(\"Error creating initial data:\", error);\r\n"
                }
            ],
            "date": 1745880408862,
            "name": "Commit-0",
            "content": "const bcrypt = require('bcryptjs');\r\nconst { User, Role, Permission } = require('../models');\r\n\r\nasync function createInitialData() {\r\n  try {\r\n    // 1. 创建权限\r\n    const permissions = await Permission.bulkCreate([\r\n      { name: 'create_user', action: 'create', resource: 'user', description: '创建用户' },\r\n      { name: 'view_users', action: 'read', resource: 'user', description: '查看用户' },\r\n      { name: 'update_user', action: 'update', resource: 'user', description: '更新用户' },\r\n      { name: 'delete_user', action: 'delete', resource: 'user', description: '删除用户' },\r\n      { name: 'manage_roles', action: 'manage', resource: 'role', description: '管理角色' },\r\n      { name: 'manage_categories', action: 'manage', resource: 'category', description: '管理分类' }\r\n    ]);\r\n\r\n    // 2. 创建角色\r\n    const adminRole = await Role.create({\r\n      name: 'admin',\r\n      description: '系统管理员'\r\n    });\r\n\r\n    const userRole = await Role.create({\r\n      name: 'user',\r\n      description: '普通用户'\r\n    });\r\n\r\n    // 3. 为角色分配权限\r\n    // 管理员拥有所有权限\r\n    await adminRole.setPermissions(permissions);\r\n    // 普通用户只有查看权限\r\n    await userRole.setPermissions(\r\n      permissions.filter(p => p.name === 'view_users')\r\n    );\r\n\r\n    // 4. 创建管理员用户\r\n    const adminUser = await User.create({\r\n      username: 'admin',\r\n      password: 'admin123', // 会自动加密\r\n      email: 'admin@example.com',\r\n      status: true\r\n    });\r\n\r\n    // 5. 为管理员分配角色\r\n    await adminUser.setRoles([adminRole.id]);\r\n\r\n    console.log('Initial data created successfully!');\r\n    return { adminUser, adminRole, userRole, permissions };\r\n  } catch (error) {\r\n    console.error('Error creating initial data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = createInitialData;"
        }
    ]
}