{
    "sourceFile": "docs/standards/model-alias-conventions.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746064727541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746064727541,
            "name": "Commit-0",
            "content": "# 模型关联别名命名规范\r\n\r\n## 核心原则\r\n\r\n1. **一致性**: 所有模型中的关联别名必须统一，不允许混用大小写或复数形式\r\n2. **清晰性**: 别名应清晰表达模型之间的关系\r\n3. **可维护性**: 遵循共同约定，便于团队协作和代码维护\r\n\r\n## 关联类型与命名规则\r\n\r\n### 1. 多对多关联 (Many-to-Many)\r\n\r\n- **命名规则**: 使用小写复数形式\r\n- **格式**: `模型名称的复数小写形式`\r\n- **示例**:\r\n  - `User -> Role`: `\"roles\"`\r\n  - `Role -> Permission`: `\"permissions\"`\r\n  - `Role -> Resource`: `\"resources\"`\r\n  - `Resource -> Role`: `\"roles\"`\r\n  - `Permission -> Role`: `\"roles\"`\r\n\r\n### 2. 一对多关联 (One-to-Many)\r\n\r\n- **命名规则**: 使用小写复数形式表示\"多\"的一方\r\n- **格式**: `模型名称的复数小写形式`\r\n- **示例**:\r\n  - `Resource -> ResourceAction`: `\"actions\"`\r\n  - `Resource -> Permission`: `\"permissions\"`\r\n  - `Resource -> Resource` (自引用): `\"children\"`\r\n  - `User -> RefreshToken`: `\"refreshTokens\"`\r\n  - `CategoryType -> Category`: `\"categories\"`\r\n\r\n### 3. 多对一关联 (Many-to-One) 或一对一关联 (One-to-One)\r\n\r\n- **命名规则**: 使用小写单数形式\r\n- **格式**: `模型名称的单数小写形式`\r\n- **示例**:\r\n  - `Permission -> Resource`: `\"resource\"`\r\n  - `Permission -> ResourceAction`: `\"action\"`\r\n  - `ResourceAction -> Resource`: `\"resource\"`\r\n  - `ResourceAction -> Permission`: `\"permission\"`\r\n  - `Resource -> Resource` (自引用): `\"parent\"`\r\n  - `Category -> Category` (自引用): `\"parent\"`\r\n  - `Category -> CategoryType`: `\"type\"`\r\n\r\n## 禁止的用法\r\n\r\n1. **混用大小写**: 不应使用 `Roles`, `Permissions` 等首字母大写形式\r\n2. **不一致的复数/单数**: 同类关联必须保持一致的复数或单数形式\r\n3. **无意义的缩写**: 避免使用难以理解的缩写\r\n\r\n## 代码示例\r\n\r\n### 正确示例\r\n\r\n```javascript\r\n// User 模型定义关联\r\nUser.belongsToMany(models.Role, {\r\n  through: \"UserRoles\",\r\n  foreignKey: \"userId\",\r\n  otherKey: \"roleId\",\r\n  as: \"roles\" // 正确: 小写复数\r\n});\r\n\r\n// Role 模型定义关联\r\nRole.belongsToMany(models.Permission, {\r\n  through: \"RolePermissions\",\r\n  foreignKey: \"roleId\",\r\n  otherKey: \"permissionId\",\r\n  as: \"permissions\" // 正确: 小写复数\r\n});\r\n\r\n// 一对多关系\r\nResource.hasMany(models.ResourceAction, {\r\n  foreignKey: \"resourceId\",\r\n  as: \"actions\" // 正确: 小写复数\r\n});\r\n\r\n// 多对一关系\r\nResourceAction.belongsTo(models.Resource, {\r\n  foreignKey: \"resourceId\",\r\n  as: \"resource\" // 正确: 小写单数\r\n});\r\n```\r\n\r\n### 错误示例\r\n\r\n```javascript\r\n// 避免这种方式\r\nUser.belongsToMany(models.Role, {\r\n  through: \"UserRoles\",\r\n  foreignKey: \"userId\",\r\n  otherKey: \"roleId\",\r\n  as: \"Roles\" // 错误: 首字母大写\r\n});\r\n\r\n// 避免这种方式\r\nRole.belongsToMany(models.Permission, {\r\n  through: \"RolePermissions\",\r\n  foreignKey: \"roleId\",\r\n  otherKey: \"permissionId\",\r\n  as: \"permission\" // 错误: 使用单数形式表示多对多关系\r\n});\r\n```\r\n\r\n## 查询时的一致性\r\n\r\n在查询模型时，确保使用与模型定义一致的别名:\r\n\r\n```javascript\r\n// 正确的查询方式\r\nconst user = await User.findByPk(userId, {\r\n  include: [\r\n    {\r\n      model: Role,\r\n      as: \"roles\", // 与模型定义一致\r\n      include: [\r\n        {\r\n          model: Permission,\r\n          as: \"permissions\", // 与模型定义一致\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n});\r\n\r\n// 正确的属性访问方式\r\nconst hasPermission = user.roles.some(role =>\r\n  role.permissions.some(permission => permission.name === requiredPermission)\r\n);\r\n```\r\n\r\n## 应用于控制器层的规范\r\n\r\n在控制器中查询或操作模型关联时，必须使用与模型定义一致的别名:\r\n\r\n```javascript\r\n// 控制器中的查询示例\r\nasync getUser(req, res) {\r\n  const user = await User.findByPk(req.params.id, {\r\n    include: [\r\n      {\r\n        model: Role,\r\n        as: \"roles\", // 与模型定义一致\r\n      }\r\n    ]\r\n  });\r\n\r\n  // 数据处理...\r\n}\r\n```\r\n\r\n## 应用于服务层的规范\r\n\r\n服务层中的关联查询也必须遵循相同的别名规范:\r\n\r\n```javascript\r\n// 服务层中的方法示例\r\nasync checkUserPermission(userId, permissionName) {\r\n  const user = await User.findByPk(userId, {\r\n    include: [\r\n      {\r\n        model: Role,\r\n        as: \"roles\", // 与模型定义一致\r\n        include: [\r\n          {\r\n            model: Permission,\r\n            as: \"permissions\", // 与模型定义一致\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  });\r\n\r\n  return user.roles.some(role =>\r\n    role.permissions.some(permission => permission.name === permissionName)\r\n  );\r\n}\r\n```\r\n\r\n## 模型架构总览\r\n\r\n下面是当前项目中所有模型的关联别名规范:\r\n\r\n| 模型              | 关联到               | 关联类型           | 标准别名         |\r\n|------------------|--------------------|------------------|----------------|\r\n| User             | Role               | 多对多            | \"roles\"        |\r\n| User             | RefreshToken       | 一对多            | \"refreshTokens\" |\r\n| Role             | User               | 多对多            | \"users\"        |\r\n| Role             | Permission         | 多对多            | \"permissions\"  |\r\n| Role             | Resource           | 多对多            | \"resources\"    |\r\n| Permission       | Role               | 多对多            | \"roles\"        |\r\n| Permission       | Resource           | 多对一            | \"resource\"     |\r\n| Permission       | ResourceAction     | 多对一            | \"action\"       |\r\n| Resource         | Resource (parent)  | 多对一            | \"parent\"       |\r\n| Resource         | Resource (children)| 一对多            | \"children\"     |\r\n| Resource         | Role               | 多对多            | \"roles\"        |\r\n| Resource         | Permission         | 一对多            | \"permissions\"  |\r\n| Resource         | ResourceAction     | 一对多            | \"actions\"      |\r\n| ResourceAction   | Resource           | 多对一            | \"resource\"     |\r\n| ResourceAction   | Permission         | 一对一            | \"permission\"   |\r\n| CategoryType     | Category           | 一对多            | \"categories\"   |\r\n| Category         | Category (parent)  | 多对一            | \"parent\"       |\r\n| Category         | Category (children)| 一对多            | \"children\"     |\r\n| Category         | CategoryType       | 多对一            | \"type\"         |\r\n\r\n## 实施建议\r\n\r\n1. 使用 ESLint 规则来确保关联别名的一致性\r\n2. 代码审查时特别关注关联别名的命名\r\n3. 重构已有代码时统一采用此规范\r\n4. 在项目文档中引用此规范，确保所有开发人员都了解并遵循"
        }
    ]
}