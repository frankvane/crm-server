{
    "sourceFile": "docs/flow/rbac-flow.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746031381698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746031397732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,5 @@\n ```\r\n \r\n ---\r\n \r\n-如需更详细的接口/数据结构说明，请参考 docs 目录下相关文档。 \n\\ No newline at end of file\n+如需更详细的接口/数据结构说明，请参考 docs 目录下相关文档。\r\n"
                },
                {
                    "date": 1746031722042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,17 @@\n     Auth -->|解析用户| RBAC[RBAC权限校验]\r\n     RBAC -->|角色-权限-资源| Allow[允许/拒绝]\r\n ```\r\n \r\n-- 用户登录后获取 JWT Token，后续请求需携带 Token。\r\n-- 后端通过中间件校验 Token 并解析用户身份。\r\n-- 根据用户的角色，查询其拥有的权限和可见资源。\r\n-- 校验当前接口/页面/按钮所需权限，决定是否允许访问。\r\n+- 用户登录（/api/auth/login）只返回 accessToken：\r\n+  ```json\r\n+  { \"accessToken\": \"...\" }\r\n+  ```\r\n+- 前端持有 accessToken 后，再调用用户信息接口（如 /api/users/me）获取：\r\n+  - 用户基本信息（id, username, email, ...）\r\n+  - roles：所有可用角色清单（如 [\"admin\", \"manager\", \"user\"]）\r\n+  - routes：当前用户可见的菜单资源（Resource）树，适配前端路由\r\n+  - permissions：当前用户拥有的按钮级权限清单（如 [\"add\", \"edit\", \"delete\"]）\r\n \r\n ## 3. 角色-权限-资源分配关系\r\n \r\n - 一个用户可分配多个角色。\r\n@@ -31,15 +36,13 @@\n - 权限与资源、资源操作可灵活配置，支持按钮级控制。\r\n \r\n ## 4. 前端路由与按钮权限控制建议\r\n \r\n-- 路由菜单渲染：根据后端返回的可见资源树（Resource），动态生成侧边栏/菜单。\r\n-- 按钮权限渲染：根据用户拥有的 ResourceAction/Permission，决定按钮是否显示/可用。\r\n+- 路由菜单渲染：根据用户信息接口返回的 routes（Resource），动态生成侧边栏/菜单。\r\n+- 按钮权限渲染：根据 permissions 决定按钮是否显示/可用。\r\n - 建议接口：\r\n   - `/api/auth/login` 登录获取 Token\r\n-  - `/api/users/me` 获取当前用户信息及角色、权限、资源\r\n-  - `/api/resources` 获取所有可见菜单/资源树\r\n-  - `/api/resource-actions` 获取所有可用按钮操作\r\n+  - `/api/users/me` 获取当前用户信息、roles、routes、permissions\r\n \r\n ## 5. RBAC 流程伪图\r\n \r\n ```text\r\n@@ -48,19 +51,18 @@\n \r\n ## 6. 前端开发接口交互建议\r\n \r\n - 登录后保存 Token，所有请求带上 Authorization 头。\r\n-- 获取用户信息时一并返回角色、权限、可见资源、可用按钮。\r\n+- 获取用户信息时一并返回角色清单、菜单资源、按钮权限。\r\n - 路由和按钮渲染均基于后端返回的权限数据，前端无需硬编码权限点。\r\n - 建议后端返回如下结构：\r\n \r\n ```json\r\n {\r\n   \"user\": { \"id\": 1, \"username\": \"admin\", ... },\r\n-  \"roles\": [\"admin\"],\r\n-  \"permissions\": [\"create_user\", \"view_users\", ...],\r\n-  \"resources\": [ ... 菜单树 ... ],\r\n-  \"resourceActions\": [\"add\", \"edit\", \"delete\", ...]\r\n+  \"roles\": [\"admin\", \"manager\", \"user\"],\r\n+  \"routes\": [ ... 菜单资源树 ... ],\r\n+  \"permissions\": [\"add\", \"edit\", \"delete\", ...]\r\n }\r\n ```\r\n \r\n ---\r\n"
                }
            ],
            "date": 1746031381698,
            "name": "Commit-0",
            "content": "# RBAC 权限流程说明\r\n\r\n## 1. 核心概念\r\n\r\n- **用户（User）**：系统登录主体，可分配多个角色。\r\n- **角色（Role）**：权限集合，定义一类用户的操作范围。\r\n- **权限（Permission）**：对资源的操作能力（如 create_user、view_users）。\r\n- **资源（Resource）**：菜单、页面、功能点等，支持多级结构。\r\n- **资源操作（ResourceAction）**：按钮级操作（如新增、编辑、删除）。\r\n\r\n## 2. 认证与鉴权流程\r\n\r\n```mermaid\r\nflowchart TD\r\n    Login[用户登录] --> Token[获取JWT Token]\r\n    Token --> API[访问API]\r\n    API -->|校验Token| Auth[认证中间件]\r\n    Auth -->|解析用户| RBAC[RBAC权限校验]\r\n    RBAC -->|角色-权限-资源| Allow[允许/拒绝]\r\n```\r\n\r\n- 用户登录后获取 JWT Token，后续请求需携带 Token。\r\n- 后端通过中间件校验 Token 并解析用户身份。\r\n- 根据用户的角色，查询其拥有的权限和可见资源。\r\n- 校验当前接口/页面/按钮所需权限，决定是否允许访问。\r\n\r\n## 3. 角色-权限-资源分配关系\r\n\r\n- 一个用户可分配多个角色。\r\n- 一个角色可拥有多个权限、可见多个资源。\r\n- 权限与资源、资源操作可灵活配置，支持按钮级控制。\r\n\r\n## 4. 前端路由与按钮权限控制建议\r\n\r\n- 路由菜单渲染：根据后端返回的可见资源树（Resource），动态生成侧边栏/菜单。\r\n- 按钮权限渲染：根据用户拥有的 ResourceAction/Permission，决定按钮是否显示/可用。\r\n- 建议接口：\r\n  - `/api/auth/login` 登录获取 Token\r\n  - `/api/users/me` 获取当前用户信息及角色、权限、资源\r\n  - `/api/resources` 获取所有可见菜单/资源树\r\n  - `/api/resource-actions` 获取所有可用按钮操作\r\n\r\n## 5. RBAC 流程伪图\r\n\r\n```text\r\n[用户] --登录--> [Token] --请求--> [后端认证] --RBAC校验--> [资源/接口/按钮]\r\n```\r\n\r\n## 6. 前端开发接口交互建议\r\n\r\n- 登录后保存 Token，所有请求带上 Authorization 头。\r\n- 获取用户信息时一并返回角色、权限、可见资源、可用按钮。\r\n- 路由和按钮渲染均基于后端返回的权限数据，前端无需硬编码权限点。\r\n- 建议后端返回如下结构：\r\n\r\n```json\r\n{\r\n  \"user\": { \"id\": 1, \"username\": \"admin\", ... },\r\n  \"roles\": [\"admin\"],\r\n  \"permissions\": [\"create_user\", \"view_users\", ...],\r\n  \"resources\": [ ... 菜单树 ... ],\r\n  \"resourceActions\": [\"add\", \"edit\", \"delete\", ...]\r\n}\r\n```\r\n\r\n---\r\n\r\n如需更详细的接口/数据结构说明，请参考 docs 目录下相关文档。 "
        }
    ]
}