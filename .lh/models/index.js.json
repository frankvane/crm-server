{
    "sourceFile": "models/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1745924938211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745925001835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,6 +25,6 @@\n   Role,\r\n   Permission,\r\n   RefreshToken,\r\n   Category,\r\n-  CategoryType\r\n+  CategoryType,\r\n };\r\n"
                },
                {
                    "date": 1746008083682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,25 +6,81 @@\n // 导入模型定义\r\n const User = require(\"./user.model\")(sequelize);\r\n const Role = require(\"./role.model\")(sequelize);\r\n const Permission = require(\"./permission.model\")(sequelize);\r\n+const Resource = require(\"./resource.model\")(sequelize);\r\n+const ResourceAction = require(\"./resourceAction.model\")(sequelize);\r\n+const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n-const Category = require(\"./category.model\")(sequelize);\r\n-const CategoryType = require(\"./categoryType.model\")(sequelize);\r\n \r\n // 建立模型关联\r\n-User.associate({ Role, RefreshToken });\r\n-Role.associate({ User, Permission });\r\n-Permission.associate({ Role });\r\n-RefreshToken.associate({ User });\r\n-Category.associate({ CategoryType });\r\n-CategoryType.associate({ Category });\r\n+// 1. User 相关关联\r\n+User.belongsToMany(Role, {\r\n+  through: \"UserRole\",\r\n+  as: \"roles\",\r\n+});\r\n \r\n+// 2. Role 相关关联\r\n+Role.belongsToMany(User, {\r\n+  through: \"UserRole\",\r\n+  as: \"users\",\r\n+});\r\n+\r\n+Role.belongsToMany(Permission, {\r\n+  through: \"RolePermission\",\r\n+  as: \"permissions\",\r\n+});\r\n+\r\n+Role.belongsToMany(Resource, {\r\n+  through: \"RoleResource\",\r\n+  as: \"resources\",\r\n+});\r\n+\r\n+// 3. Permission 相关关联\r\n+Permission.belongsToMany(Role, {\r\n+  through: \"RolePermission\",\r\n+  as: \"roles\",\r\n+});\r\n+\r\n+// 4. Resource 相关关联\r\n+Resource.belongsToMany(Role, {\r\n+  through: \"RoleResource\",\r\n+  as: \"roles\",\r\n+});\r\n+\r\n+Resource.belongsTo(Resource, {\r\n+  foreignKey: \"parentId\",\r\n+  as: \"parent\",\r\n+});\r\n+\r\n+Resource.hasMany(Resource, {\r\n+  foreignKey: \"parentId\",\r\n+  as: \"children\",\r\n+});\r\n+\r\n+Resource.hasMany(ResourceAction, {\r\n+  foreignKey: \"resourceId\",\r\n+  as: \"actions\",\r\n+});\r\n+\r\n+// 5. ResourceAction 相关关联\r\n+ResourceAction.belongsTo(Resource, {\r\n+  foreignKey: \"resourceId\",\r\n+  as: \"resource\",\r\n+});\r\n+\r\n+// 6. RefreshToken 相关关联\r\n+RefreshToken.belongsTo(User, {\r\n+  foreignKey: \"userId\",\r\n+  as: \"user\",\r\n+});\r\n+\r\n module.exports = {\r\n   sequelize,\r\n   User,\r\n   Role,\r\n   Permission,\r\n+  Resource,\r\n+  ResourceAction,\r\n+  RoleResource,\r\n   RefreshToken,\r\n-  Category,\r\n-  CategoryType,\r\n };\r\n"
                },
                {
                    "date": 1746008357007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,36 +15,48 @@\n // 建立模型关联\r\n // 1. User 相关关联\r\n User.belongsToMany(Role, {\r\n   through: \"UserRole\",\r\n+  foreignKey: \"userId\",\r\n+  otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n \r\n // 2. Role 相关关联\r\n Role.belongsToMany(User, {\r\n   through: \"UserRole\",\r\n+  foreignKey: \"roleId\",\r\n+  otherKey: \"userId\",\r\n   as: \"users\",\r\n });\r\n \r\n Role.belongsToMany(Permission, {\r\n   through: \"RolePermission\",\r\n+  foreignKey: \"roleId\",\r\n+  otherKey: \"permissionId\",\r\n   as: \"permissions\",\r\n });\r\n \r\n Role.belongsToMany(Resource, {\r\n   through: \"RoleResource\",\r\n+  foreignKey: \"roleId\",\r\n+  otherKey: \"resourceId\",\r\n   as: \"resources\",\r\n });\r\n \r\n // 3. Permission 相关关联\r\n Permission.belongsToMany(Role, {\r\n   through: \"RolePermission\",\r\n+  foreignKey: \"permissionId\",\r\n+  otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n \r\n // 4. Resource 相关关联\r\n Resource.belongsToMany(Role, {\r\n   through: \"RoleResource\",\r\n+  foreignKey: \"resourceId\",\r\n+  otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n \r\n Resource.belongsTo(Resource, {\r\n"
                },
                {
                    "date": 1746018592131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,47 +14,47 @@\n \r\n // 建立模型关联\r\n // 1. User 相关关联\r\n User.belongsToMany(Role, {\r\n-  through: \"UserRole\",\r\n+  through: \"UserRoles\",\r\n   foreignKey: \"userId\",\r\n   otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n \r\n // 2. Role 相关关联\r\n Role.belongsToMany(User, {\r\n-  through: \"UserRole\",\r\n+  through: \"UserRoles\",\r\n   foreignKey: \"roleId\",\r\n   otherKey: \"userId\",\r\n   as: \"users\",\r\n });\r\n \r\n Role.belongsToMany(Permission, {\r\n-  through: \"RolePermission\",\r\n+  through: \"RolePermissions\",\r\n   foreignKey: \"roleId\",\r\n   otherKey: \"permissionId\",\r\n   as: \"permissions\",\r\n });\r\n \r\n Role.belongsToMany(Resource, {\r\n-  through: \"RoleResource\",\r\n+  through: \"RoleResources\",\r\n   foreignKey: \"roleId\",\r\n   otherKey: \"resourceId\",\r\n   as: \"resources\",\r\n });\r\n \r\n // 3. Permission 相关关联\r\n Permission.belongsToMany(Role, {\r\n-  through: \"RolePermission\",\r\n+  through: \"RolePermissions\",\r\n   foreignKey: \"permissionId\",\r\n   otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n \r\n // 4. Resource 相关关联\r\n Resource.belongsToMany(Role, {\r\n-  through: \"RoleResource\",\r\n+  through: \"RoleResources\",\r\n   foreignKey: \"resourceId\",\r\n   otherKey: \"roleId\",\r\n   as: \"roles\",\r\n });\r\n"
                },
                {
                    "date": 1746021488989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,88 +11,13 @@\n const ResourceAction = require(\"./resourceAction.model\")(sequelize);\r\n const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n \r\n-// 建立模型关联\r\n-// 1. User 相关关联\r\n-User.belongsToMany(Role, {\r\n-  through: \"UserRoles\",\r\n-  foreignKey: \"userId\",\r\n-  otherKey: \"roleId\",\r\n-  as: \"roles\",\r\n+// 统一调用 associate 方法\r\n+const models = { sequelize, User, Role, Permission, Resource, ResourceAction, RoleResource, RefreshToken };\r\n+Object.values(models).forEach(model => {\r\n+  if (model && typeof model.associate === 'function') {\r\n+    model.associate(models);\r\n+  }\r\n });\r\n \r\n-// 2. Role 相关关联\r\n-Role.belongsToMany(User, {\r\n-  through: \"UserRoles\",\r\n-  foreignKey: \"roleId\",\r\n-  otherKey: \"userId\",\r\n-  as: \"users\",\r\n-});\r\n-\r\n-Role.belongsToMany(Permission, {\r\n-  through: \"RolePermissions\",\r\n-  foreignKey: \"roleId\",\r\n-  otherKey: \"permissionId\",\r\n-  as: \"permissions\",\r\n-});\r\n-\r\n-Role.belongsToMany(Resource, {\r\n-  through: \"RoleResources\",\r\n-  foreignKey: \"roleId\",\r\n-  otherKey: \"resourceId\",\r\n-  as: \"resources\",\r\n-});\r\n-\r\n-// 3. Permission 相关关联\r\n-Permission.belongsToMany(Role, {\r\n-  through: \"RolePermissions\",\r\n-  foreignKey: \"permissionId\",\r\n-  otherKey: \"roleId\",\r\n-  as: \"roles\",\r\n-});\r\n-\r\n-// 4. Resource 相关关联\r\n-Resource.belongsToMany(Role, {\r\n-  through: \"RoleResources\",\r\n-  foreignKey: \"resourceId\",\r\n-  otherKey: \"roleId\",\r\n-  as: \"roles\",\r\n-});\r\n-\r\n-Resource.belongsTo(Resource, {\r\n-  foreignKey: \"parentId\",\r\n-  as: \"parent\",\r\n-});\r\n-\r\n-Resource.hasMany(Resource, {\r\n-  foreignKey: \"parentId\",\r\n-  as: \"children\",\r\n-});\r\n-\r\n-Resource.hasMany(ResourceAction, {\r\n-  foreignKey: \"resourceId\",\r\n-  as: \"actions\",\r\n-});\r\n-\r\n-// 5. ResourceAction 相关关联\r\n-ResourceAction.belongsTo(Resource, {\r\n-  foreignKey: \"resourceId\",\r\n-  as: \"resource\",\r\n-});\r\n-\r\n-// 6. RefreshToken 相关关联\r\n-RefreshToken.belongsTo(User, {\r\n-  foreignKey: \"userId\",\r\n-  as: \"user\",\r\n-});\r\n-\r\n-module.exports = {\r\n-  sequelize,\r\n-  User,\r\n-  Role,\r\n-  Permission,\r\n-  Resource,\r\n-  ResourceAction,\r\n-  RoleResource,\r\n-  RefreshToken,\r\n-};\r\n+module.exports = models;\r\n"
                },
                {
                    "date": 1746021529228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,20 @@\n const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n \r\n // 统一调用 associate 方法\r\n-const models = { sequelize, User, Role, Permission, Resource, ResourceAction, RoleResource, RefreshToken };\r\n-Object.values(models).forEach(model => {\r\n-  if (model && typeof model.associate === 'function') {\r\n+const models = {\r\n+  sequelize,\r\n+  User,\r\n+  Role,\r\n+  Permission,\r\n+  Resource,\r\n+  ResourceAction,\r\n+  RoleResource,\r\n+  RefreshToken,\r\n+};\r\n+Object.values(models).forEach((model) => {\r\n+  if (model && typeof model.associate === \"function\") {\r\n     model.associate(models);\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1746025037893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n const Resource = require(\"./resource.model\")(sequelize);\r\n const ResourceAction = require(\"./resourceAction.model\")(sequelize);\r\n const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n+const CategoryType = require(\"./categoryType.model\")(sequelize);\r\n \r\n // 统一调用 associate 方法\r\n const models = {\r\n   sequelize,\r\n@@ -21,8 +22,9 @@\n   Resource,\r\n   ResourceAction,\r\n   RoleResource,\r\n   RefreshToken,\r\n+  CategoryType,\r\n };\r\n Object.values(models).forEach((model) => {\r\n   if (model && typeof model.associate === \"function\") {\r\n     model.associate(models);\r\n"
                },
                {
                    "date": 1746025211838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n const Resource = require(\"./resource.model\")(sequelize);\r\n const ResourceAction = require(\"./resourceAction.model\")(sequelize);\r\n const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n+const Category = require(\"./category.model\")(sequelize);\r\n const CategoryType = require(\"./categoryType.model\")(sequelize);\r\n \r\n // 统一调用 associate 方法\r\n const models = {\r\n@@ -22,8 +23,9 @@\n   Resource,\r\n   ResourceAction,\r\n   RoleResource,\r\n   RefreshToken,\r\n+  Category,\r\n   CategoryType,\r\n };\r\n Object.values(models).forEach((model) => {\r\n   if (model && typeof model.associate === \"function\") {\r\n"
                },
                {
                    "date": 1746025302922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,34 @@\n-const { Sequelize } = require(\"sequelize\");\r\n-const config = require(\"../config/database\");\r\n-\r\n-const sequelize = new Sequelize(config);\r\n-\r\n-// 导入模型定义\r\n-const User = require(\"./user.model\")(sequelize);\r\n-const Role = require(\"./role.model\")(sequelize);\r\n-const Permission = require(\"./permission.model\")(sequelize);\r\n-const Resource = require(\"./resource.model\")(sequelize);\r\n-const ResourceAction = require(\"./resourceAction.model\")(sequelize);\r\n-const RoleResource = require(\"./roleResource.model\")(sequelize);\r\n-const RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\n-const Category = require(\"./category.model\")(sequelize);\r\n-const CategoryType = require(\"./categoryType.model\")(sequelize);\r\n-\r\n-// 统一调用 associate 方法\r\n-const models = {\r\n-  sequelize,\r\n-  User,\r\n-  Role,\r\n-  Permission,\r\n-  Resource,\r\n-  ResourceAction,\r\n-  RoleResource,\r\n-  RefreshToken,\r\n-  Category,\r\n-  CategoryType,\r\n-};\r\n-Object.values(models).forEach((model) => {\r\n-  if (model && typeof model.associate === \"function\") {\r\n-    model.associate(models);\r\n-  }\r\n-});\r\n-\r\n-module.exports = models;\r\n+const { Sequelize } = require(\"sequelize\");\n+const config = require(\"../config/database\");\n+\n+const sequelize = new Sequelize(config);\n+\n+// 导入模型定义\n+const User = require(\"./user.model\")(sequelize);\n+const Role = require(\"./role.model\")(sequelize);\n+const Permission = require(\"./permission.model\")(sequelize);\n+const Resource = require(\"./resource.model\")(sequelize);\n+const ResourceAction = require(\"./resourceAction.model\")(sequelize);\n+const RoleResource = require(\"./roleResource.model\")(sequelize);\n+const RefreshToken = require(\"./refreshToken.model\")(sequelize);\n+const CategoryType = require(\"./categoryType.model\")(sequelize);\n+\n+// 统一调用 associate 方法\n+const models = {\n+  sequelize,\n+  User,\n+  Role,\n+  Permission,\n+  Resource,\n+  ResourceAction,\n+  RoleResource,\n+  RefreshToken,\n+  CategoryType,\n+};\n+Object.values(models).forEach((model) => {\n+  if (model && typeof model.associate === \"function\") {\n+    model.associate(models);\n+  }\n+});\n+\n+module.exports = models;\n"
                },
                {
                    "date": 1746025415055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n const Resource = require(\"./resource.model\")(sequelize);\n const ResourceAction = require(\"./resourceAction.model\")(sequelize);\n const RoleResource = require(\"./roleResource.model\")(sequelize);\n const RefreshToken = require(\"./refreshToken.model\")(sequelize);\n+const Category = require(\"./category.model\")(sequelize);\n const CategoryType = require(\"./categoryType.model\")(sequelize);\n \n // 统一调用 associate 方法\n const models = {\n@@ -22,8 +23,9 @@\n   Resource,\n   ResourceAction,\n   RoleResource,\n   RefreshToken,\n+  Category,\n   CategoryType,\n };\n Object.values(models).forEach((model) => {\n   if (model && typeof model.associate === \"function\") {\n"
                }
            ],
            "date": 1745924938211,
            "name": "Commit-0",
            "content": "const { Sequelize } = require(\"sequelize\");\r\nconst config = require(\"../config/database\");\r\n\r\nconst sequelize = new Sequelize(config);\r\n\r\n// 导入模型定义\r\nconst User = require(\"./user.model\")(sequelize);\r\nconst Role = require(\"./role.model\")(sequelize);\r\nconst Permission = require(\"./permission.model\")(sequelize);\r\nconst RefreshToken = require(\"./refreshToken.model\")(sequelize);\r\nconst Category = require(\"./category.model\")(sequelize);\r\nconst CategoryType = require(\"./categoryType.model\")(sequelize);\r\n\r\n// 建立模型关联\r\nUser.associate({ Role, RefreshToken });\r\nRole.associate({ User, Permission });\r\nPermission.associate({ Role });\r\nRefreshToken.associate({ User });\r\nCategory.associate({ CategoryType });\r\nCategoryType.associate({ Category });\r\n\r\nmodule.exports = {\r\n  sequelize,\r\n  User,\r\n  Role,\r\n  Permission,\r\n  RefreshToken,\r\n  Category,\r\n  CategoryType\r\n};\r\n"
        }
    ]
}