{
    "sourceFile": "middlewares/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745924047243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745924080665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,33 +4,27 @@\n module.exports = async (req, res, next) => {\r\n   try {\r\n     const authHeader = req.headers.authorization;\r\n     if (!authHeader) {\r\n-      return res.status(401).json(\r\n-        ResponseUtil.error(\"No token provided\", 401)\r\n-      );\r\n+      return res.status(401).json(ResponseUtil.error(\"No token provided\", 401));\r\n     }\r\n \r\n     const token = authHeader.split(\" \")[1];\r\n     if (!token) {\r\n-      return res.status(401).json(\r\n-        ResponseUtil.error(\"Invalid token format\", 401)\r\n-      );\r\n+      return res\r\n+        .status(401)\r\n+        .json(ResponseUtil.error(\"Invalid token format\", 401));\r\n     }\r\n \r\n     try {\r\n       const decoded = jwt.verifyAccessToken(token);\r\n       req.user = decoded;\r\n       next();\r\n     } catch (err) {\r\n       if (err.name === \"TokenExpiredError\") {\r\n-        return res.status(401).json(\r\n-          ResponseUtil.error(\"Token expired\", 401)\r\n-        );\r\n+        return res.status(401).json(ResponseUtil.error(\"Token expired\", 401));\r\n       }\r\n-      return res.status(401).json(\r\n-        ResponseUtil.error(\"Invalid token\", 401)\r\n-      );\r\n+      return res.status(401).json(ResponseUtil.error(\"Invalid token\", 401));\r\n     }\r\n   } catch (err) {\r\n     next(err);\r\n   }\r\n"
                },
                {
                    "date": 1746016122701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,13 @@\n       const user = await User.findByPk(userId, {\r\n         include: [\r\n           {\r\n             model: Role,\r\n-            as: \"Roles\",\r\n+            as: \"roles\",\r\n             include: [\r\n               {\r\n                 model: Permission,\r\n-                as: \"Permissions\",\r\n+                as: \"permissions\",\r\n                 through: { attributes: [] },\r\n               },\r\n             ],\r\n           },\r\n@@ -57,10 +57,10 @@\n         return res.status(403).json(ResponseUtil.error(\"User not found\", 403));\r\n       }\r\n \r\n       // 检查用户的所有角色中是否有所需权限\r\n-      const hasRequiredPermission = user.Roles.some((role) =>\r\n-        role.Permissions.some((p) => p.name === permission)\r\n+      const hasRequiredPermission = user.roles.some((role) =>\r\n+        role.permissions.some((p) => p.name === permission)\r\n       );\r\n \r\n       if (!hasRequiredPermission) {\r\n         return res\r\n"
                },
                {
                    "date": 1746021609688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n             as: \"roles\",\r\n             include: [\r\n               {\r\n                 model: Permission,\r\n-                as: \"permissions\",\r\n+                as: \"Permissions\",\r\n                 through: { attributes: [] },\r\n               },\r\n             ],\r\n           },\r\n@@ -58,9 +58,9 @@\n       }\r\n \r\n       // 检查用户的所有角色中是否有所需权限\r\n       const hasRequiredPermission = user.roles.some((role) =>\r\n-        role.permissions.some((p) => p.name === permission)\r\n+        role.Permissions.some((p) => p.name === permission)\r\n       );\r\n \r\n       if (!hasRequiredPermission) {\r\n         return res\r\n"
                }
            ],
            "date": 1745924047243,
            "name": "Commit-0",
            "content": "const jwt = require(\"../utils/jwt\");\r\nconst ResponseUtil = require(\"../utils/response\");\r\n\r\nmodule.exports = async (req, res, next) => {\r\n  try {\r\n    const authHeader = req.headers.authorization;\r\n    if (!authHeader) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"No token provided\", 401)\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split(\" \")[1];\r\n    if (!token) {\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"Invalid token format\", 401)\r\n      );\r\n    }\r\n\r\n    try {\r\n      const decoded = jwt.verifyAccessToken(token);\r\n      req.user = decoded;\r\n      next();\r\n    } catch (err) {\r\n      if (err.name === \"TokenExpiredError\") {\r\n        return res.status(401).json(\r\n          ResponseUtil.error(\"Token expired\", 401)\r\n        );\r\n      }\r\n      return res.status(401).json(\r\n        ResponseUtil.error(\"Invalid token\", 401)\r\n      );\r\n    }\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n"
        }
    ]
}