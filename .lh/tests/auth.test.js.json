{
    "sourceFile": "tests/auth.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746010085370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746010153211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,72 @@\n-const request = require('supertest');\r\n-const app = require('../app');\r\n-const { getTestUserToken } = require('./setup');\r\n+const request = require(\"supertest\");\r\n+const app = require(\"../app\");\r\n+const { getTestUserToken } = require(\"./setup\");\r\n \r\n-describe('Auth Module', () => {\r\n-  describe('POST /api/auth/login', () => {\r\n-    it('should login successfully with correct credentials', async () => {\r\n-      const response = await request(app)\r\n-        .post('/api/auth/login')\r\n-        .send({\r\n-          username: 'admin',\r\n-          password: 'admin123'\r\n-        });\r\n+describe(\"Auth Module\", () => {\r\n+  describe(\"POST /api/auth/login\", () => {\r\n+    it(\"should login successfully with correct credentials\", async () => {\r\n+      const response = await request(app).post(\"/api/auth/login\").send({\r\n+        username: \"admin\",\r\n+        password: \"admin123\",\r\n+      });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty('token');\r\n-      expect(response.body.data).toHaveProperty('refreshToken');\r\n+      expect(response.body.data).toHaveProperty(\"token\");\r\n+      expect(response.body.data).toHaveProperty(\"refreshToken\");\r\n     });\r\n \r\n-    it('should fail with incorrect password', async () => {\r\n-      const response = await request(app)\r\n-        .post('/api/auth/login')\r\n-        .send({\r\n-          username: 'admin',\r\n-          password: 'wrongpassword'\r\n-        });\r\n+    it(\"should fail with incorrect password\", async () => {\r\n+      const response = await request(app).post(\"/api/auth/login\").send({\r\n+        username: \"admin\",\r\n+        password: \"wrongpassword\",\r\n+      });\r\n \r\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n \r\n-    it('should fail with non-existent user', async () => {\r\n-      const response = await request(app)\r\n-        .post('/api/auth/login')\r\n-        .send({\r\n-          username: 'nonexistent',\r\n-          password: 'password123'\r\n-        });\r\n+    it(\"should fail with non-existent user\", async () => {\r\n+      const response = await request(app).post(\"/api/auth/login\").send({\r\n+        username: \"nonexistent\",\r\n+        password: \"password123\",\r\n+      });\r\n \r\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/auth/info', () => {\r\n-    it('should get user info with valid token', async () => {\r\n+  describe(\"GET /api/auth/info\", () => {\r\n+    it(\"should get user info with valid token\", async () => {\r\n       const token = await getTestUserToken();\r\n \r\n       const response = await request(app)\r\n-        .get('/api/auth/info')\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .get(\"/api/auth/info\")\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n\\ No newline at end of file\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty('username');\r\n-      expect(response.body.data).toHaveProperty('roles');\r\n-      expect(response.body.data).toHaveProperty('permissions');\r\n-      expect(response.body.data).toHaveProperty('routes');\r\n+      expect(response.body.data).toHaveProperty(\"username\");\r\n+      expect(response.body.data).toHaveProperty(\"roles\");\r\n+      expect(response.body.data).toHaveProperty(\"permissions\");\r\n+      expect(response.body.data).toHaveProperty(\"routes\");\r\n     });\r\n \r\n-    it('should fail without token', async () => {\r\n-      const response = await request(app)\r\n-        .get('/api/auth/info');\r\n+    it(\"should fail without token\", async () => {\r\n+      const response = await request(app).get(\"/api/auth/info\");\r\n \r\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n \r\n-    it('should fail with invalid token', async () => {\r\n+    it(\"should fail with invalid token\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/auth/info')\r\n-        .set('Authorization', 'Bearer invalid_token');\r\n+        .get(\"/api/auth/info\")\r\n+        .set(\"Authorization\", \"Bearer invalid_token\");\r\n \r\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n-});\n+});\r\n"
                },
                {
                    "date": 1746010233279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,5 @@\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n-});\n\\ No newline at end of file\n+});\r\n"
                }
            ],
            "date": 1746010085370,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../app');\r\nconst { getTestUserToken } = require('./setup');\r\n\r\ndescribe('Auth Module', () => {\r\n  describe('POST /api/auth/login', () => {\r\n    it('should login successfully with correct credentials', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send({\r\n          username: 'admin',\r\n          password: 'admin123'\r\n        });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty('token');\r\n      expect(response.body.data).toHaveProperty('refreshToken');\r\n    });\r\n\r\n    it('should fail with incorrect password', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send({\r\n          username: 'admin',\r\n          password: 'wrongpassword'\r\n        });\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n\r\n    it('should fail with non-existent user', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send({\r\n          username: 'nonexistent',\r\n          password: 'password123'\r\n        });\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('GET /api/auth/info', () => {\r\n    it('should get user info with valid token', async () => {\r\n      const token = await getTestUserToken();\r\n\r\n      const response = await request(app)\r\n        .get('/api/auth/info')\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty('username');\r\n      expect(response.body.data).toHaveProperty('roles');\r\n      expect(response.body.data).toHaveProperty('permissions');\r\n      expect(response.body.data).toHaveProperty('routes');\r\n    });\r\n\r\n    it('should fail without token', async () => {\r\n      const response = await request(app)\r\n        .get('/api/auth/info');\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n\r\n    it('should fail with invalid token', async () => {\r\n      const response = await request(app)\r\n        .get('/api/auth/info')\r\n        .set('Authorization', 'Bearer invalid_token');\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n  });\r\n});"
        }
    ]
}