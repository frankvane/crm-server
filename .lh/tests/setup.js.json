{
    "sourceFile": "tests/setup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746010065337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746010153195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-const { sequelize } = require('../models');\r\n-const createInitialData = require('../seeders/init');\r\n+const { sequelize } = require(\"../models\");\r\n+const createInitialData = require(\"../seeders/init\");\r\n \r\n // 在所有测试开始前执行\r\n beforeAll(async () => {\r\n   // 同步数据库并填充测试数据\r\n@@ -14,12 +14,12 @@\n   await sequelize.close();\r\n });\r\n \r\n // 创建测试用户Token的辅助函数\r\n-const jwt = require('../utils/jwt');\r\n+const jwt = require(\"../utils/jwt\");\r\n async function getTestUserToken(userId = 1) {\r\n   return jwt.generateAccessToken(userId);\r\n }\r\n \r\n module.exports = {\r\n-  getTestUserToken\r\n\\ No newline at end of file\n-}; \n+  getTestUserToken,\r\n+};\r\n"
                },
                {
                    "date": 1746011526430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,7 +19,17 @@\n async function getTestUserToken(userId = 1) {\r\n   return jwt.generateAccessToken(userId);\r\n }\r\n \r\n+process.env.NODE_ENV = 'test';\r\n+process.env.DB_NAME = 'crm_test';\r\n+process.env.DB_USER = 'sa';\r\n+process.env.DB_PASS = 'chinavane';\r\n+process.env.DB_HOST = 'localhost';\r\n+process.env.DB_PORT = '1433';\r\n+process.env.JWT_SECRET = 'test-secret-key';\r\n+\r\n+jest.setTimeout(10000); // 设置测试超时时间为10秒\r\n+\r\n module.exports = {\r\n   getTestUserToken,\r\n };\r\n"
                },
                {
                    "date": 1746011728285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,47 @@\n const { sequelize } = require(\"../models\");\r\n const createInitialData = require(\"../seeders/init\");\r\n \r\n+// 设置测试环境变量\r\n+process.env.NODE_ENV = \"test\";\r\n+process.env.JWT_SECRET = \"test-secret-key\";\r\n+\r\n+// 设置测试超时时间\r\n+jest.setTimeout(10000);\r\n+\r\n // 在所有测试开始前执行\r\n beforeAll(async () => {\r\n-  // 同步数据库并填充测试数据\r\n-  await sequelize.sync({ force: true });\r\n-  await createInitialData();\r\n+  try {\r\n+    // 同步数据库\r\n+    await sequelize.sync({ force: true });\r\n+    console.log(\"测试数据库同步完成\");\r\n+    \r\n+    // 初始化测试数据\r\n+    await createInitialData();\r\n+    console.log(\"测试数据初始化完成\");\r\n+  } catch (error) {\r\n+    console.error(\"测试环境设置失败:\", error);\r\n+    throw error;\r\n+  }\r\n });\r\n \r\n // 在所有测试结束后执行\r\n afterAll(async () => {\r\n-  // 关闭数据库连接\r\n-  await sequelize.close();\r\n+  try {\r\n+    // 关闭数据库连接\r\n+    await sequelize.close();\r\n+    console.log(\"测试数据库连接已关闭\");\r\n+  } catch (error) {\r\n+    console.error(\"关闭数据库连接失败:\", error);\r\n+    throw error;\r\n+  }\r\n });\r\n \r\n // 创建测试用户Token的辅助函数\r\n const jwt = require(\"../utils/jwt\");\r\n-async function getTestUserToken(userId = 1) {\r\n+function getTestUserToken(userId = 1) {\r\n   return jwt.generateAccessToken(userId);\r\n }\r\n \r\n-process.env.NODE_ENV = \"test\";\r\n-process.env.DB_NAME = \"crm_test\";\r\n-process.env.DB_USER = \"sa\";\r\n-process.env.DB_PASS = \"chinavane\";\r\n-process.env.DB_HOST = \"localhost\";\r\n-process.env.DB_PORT = \"1433\";\r\n-process.env.JWT_SECRET = \"test-secret-key\";\r\n-\r\n-jest.setTimeout(10000); // 设置测试超时时间为10秒\r\n-\r\n module.exports = {\r\n   getTestUserToken,\r\n };\r\n"
                },
                {
                    "date": 1746011977220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { sequelize } = require(\"../models\");\r\n+const { sequelize, User, Role, Resource, Permission } = require(\"../models\");\r\n const createInitialData = require(\"../seeders/init\");\r\n \r\n // 设置测试环境变量\r\n process.env.NODE_ENV = \"test\";\r\n@@ -10,12 +10,25 @@\n \r\n // 在所有测试开始前执行\r\n beforeAll(async () => {\r\n   try {\r\n-    // 同步数据库\r\n-    await sequelize.sync({ force: true });\r\n-    console.log(\"测试数据库同步完成\");\r\n-\r\n+    // 按顺序同步数据库表\r\n+    await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');\r\n+    \r\n+    // 先创建基础表\r\n+    await User.sync({ force: true });\r\n+    await Role.sync({ force: true });\r\n+    await Resource.sync({ force: true });\r\n+    await Permission.sync({ force: true });\r\n+    \r\n+    // 再创建关联表\r\n+    await sequelize.models.UserRoles.sync({ force: true });\r\n+    await sequelize.models.RoleResources.sync({ force: true });\r\n+    await sequelize.models.RolePermissions.sync({ force: true });\r\n+    \r\n+    await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');\r\n+    console.log(\"测试数据库表创建完成\");\r\n+    \r\n     // 初始化测试数据\r\n     await createInitialData();\r\n     console.log(\"测试数据初始化完成\");\r\n   } catch (error) {\r\n"
                }
            ],
            "date": 1746010065337,
            "name": "Commit-0",
            "content": "const { sequelize } = require('../models');\r\nconst createInitialData = require('../seeders/init');\r\n\r\n// 在所有测试开始前执行\r\nbeforeAll(async () => {\r\n  // 同步数据库并填充测试数据\r\n  await sequelize.sync({ force: true });\r\n  await createInitialData();\r\n});\r\n\r\n// 在所有测试结束后执行\r\nafterAll(async () => {\r\n  // 关闭数据库连接\r\n  await sequelize.close();\r\n});\r\n\r\n// 创建测试用户Token的辅助函数\r\nconst jwt = require('../utils/jwt');\r\nasync function getTestUserToken(userId = 1) {\r\n  return jwt.generateAccessToken(userId);\r\n}\r\n\r\nmodule.exports = {\r\n  getTestUserToken\r\n}; "
        }
    ]
}