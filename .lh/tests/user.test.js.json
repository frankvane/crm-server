{
    "sourceFile": "tests/user.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746011597015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746012106531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,29 @@\n-const request = require('supertest');\r\n-const app = require('../app');\r\n-const { clearDatabase, createTestUser, createTestRole, getAuthToken } = require('./helpers');\r\n-const { User } = require('../models');\r\n+const request = require(\"supertest\");\r\n+const app = require(\"../app\");\r\n+const {\r\n+  clearDatabase,\r\n+  createTestUser,\r\n+  createTestRole,\r\n+  getAuthToken,\r\n+} = require(\"./helpers\");\r\n+const { User } = require(\"../models\");\r\n \r\n-describe('User API Tests', () => {\r\n+describe(\"User API Tests\", () => {\r\n   let authToken;\r\n   let testUser;\r\n   let adminUser;\r\n \r\n   beforeAll(async () => {\r\n     await clearDatabase();\r\n     // 创建管理员用户\r\n     adminUser = await createTestUser({\r\n-      username: 'admin',\r\n-      email: 'admin@example.com'\r\n+      username: \"admin\",\r\n+      email: \"admin@example.com\",\r\n     });\r\n     const adminRole = await createTestRole({\r\n-      name: '管理员',\r\n-      description: '系统管理员'\r\n+      name: \"管理员\",\r\n+      description: \"系统管理员\",\r\n     });\r\n     await adminUser.addRole(adminRole);\r\n     authToken = await getAuthToken(adminUser);\r\n   });\r\n@@ -26,161 +31,161 @@\n   afterAll(async () => {\r\n     await clearDatabase();\r\n   });\r\n \r\n-  describe('POST /api/users', () => {\r\n-    it('should create a new user', async () => {\r\n+  describe(\"POST /api/users\", () => {\r\n+    it(\"should create a new user\", async () => {\r\n       const userData = {\r\n-        username: 'newuser',\r\n-        password: 'password123',\r\n-        email: 'newuser@example.com',\r\n-        status: 1\r\n+        username: \"newuser\",\r\n+        password: \"password123\",\r\n+        email: \"newuser@example.com\",\r\n+        status: 1,\r\n       };\r\n \r\n       const response = await request(app)\r\n-        .post('/api/users')\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n         .send(userData);\r\n \r\n       expect(response.status).toBe(201);\r\n-      expect(response.body.data).toHaveProperty('username', userData.username);\r\n-      expect(response.body.data).toHaveProperty('email', userData.email);\r\n-      expect(response.body.data).not.toHaveProperty('password');\r\n+      expect(response.body.data).toHaveProperty(\"username\", userData.username);\r\n+      expect(response.body.data).toHaveProperty(\"email\", userData.email);\r\n+      expect(response.body.data).not.toHaveProperty(\"password\");\r\n     });\r\n \r\n-    it('should not create user with duplicate username', async () => {\r\n+    it(\"should not create user with duplicate username\", async () => {\r\n       const userData = {\r\n-        username: 'newuser',\r\n-        password: 'password123',\r\n-        email: 'another@example.com',\r\n-        status: 1\r\n+        username: \"newuser\",\r\n+        password: \"password123\",\r\n+        email: \"another@example.com\",\r\n+        status: 1,\r\n       };\r\n \r\n       const response = await request(app)\r\n-        .post('/api/users')\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n         .send(userData);\r\n \r\n       expect(response.status).toBe(400);\r\n-      expect(response.body).toHaveProperty('msg', 'Username already exists');\r\n+      expect(response.body).toHaveProperty(\"msg\", \"Username already exists\");\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/users', () => {\r\n-    it('should get user list with pagination', async () => {\r\n+  describe(\"GET /api/users\", () => {\r\n+    it(\"should get user list with pagination\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/users')\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n+        .get(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n         .query({ page: 1, pageSize: 10 });\r\n \r\n       expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty('list');\r\n-      expect(response.body.data).toHaveProperty('pagination');\r\n-      expect(response.body.data.pagination).toHaveProperty('total');\r\n-      expect(response.body.data.pagination).toHaveProperty('current', 1);\r\n-      expect(response.body.data.pagination).toHaveProperty('pageSize', 10);\r\n+      expect(response.body.data).toHaveProperty(\"list\");\r\n+      expect(response.body.data).toHaveProperty(\"pagination\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"total\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"current\", 1);\r\n+      expect(response.body.data.pagination).toHaveProperty(\"pageSize\", 10);\r\n     });\r\n \r\n-    it('should filter users by search term', async () => {\r\n+    it(\"should filter users by search term\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/users')\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n-        .query({ search: 'newuser' });\r\n+        .get(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n+        .query({ search: \"newuser\" });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.data.list.length).toBeGreaterThan(0);\r\n-      expect(response.body.data.list[0]).toHaveProperty('username', 'newuser');\r\n+      expect(response.body.data.list[0]).toHaveProperty(\"username\", \"newuser\");\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/users/:id', () => {\r\n-    it('should get user by id', async () => {\r\n-      const user = await User.findOne({ where: { username: 'newuser' } });\r\n+  describe(\"GET /api/users/:id\", () => {\r\n+    it(\"should get user by id\", async () => {\r\n+      const user = await User.findOne({ where: { username: \"newuser\" } });\r\n \r\n       const response = await request(app)\r\n         .get(`/api/users/${user.id}`)\r\n-        .set('Authorization', `Bearer ${authToken}`);\r\n+        .set(\"Authorization\", `Bearer ${authToken}`);\r\n \r\n       expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty('id', user.id);\r\n-      expect(response.body.data).toHaveProperty('username', 'newuser');\r\n+      expect(response.body.data).toHaveProperty(\"id\", user.id);\r\n+      expect(response.body.data).toHaveProperty(\"username\", \"newuser\");\r\n     });\r\n \r\n-    it('should return 404 for non-existent user', async () => {\r\n+    it(\"should return 404 for non-existent user\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/users/99999')\r\n-        .set('Authorization', `Bearer ${authToken}`);\r\n+        .get(\"/api/users/99999\")\r\n+        .set(\"Authorization\", `Bearer ${authToken}`);\r\n \r\n       expect(response.status).toBe(404);\r\n     });\r\n   });\r\n \r\n-  describe('PUT /api/users/:id', () => {\r\n+  describe(\"PUT /api/users/:id\", () => {\r\n     let userId;\r\n \r\n     beforeAll(async () => {\r\n-      const user = await User.findOne({ where: { username: 'newuser' } });\r\n+      const user = await User.findOne({ where: { username: \"newuser\" } });\r\n       userId = user.id;\r\n     });\r\n \r\n-    it('should update user information', async () => {\r\n+    it(\"should update user information\", async () => {\r\n       const updateData = {\r\n-        email: 'updated@example.com',\r\n-        status: 0\r\n+        email: \"updated@example.com\",\r\n+        status: 0,\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/users/${userId}`)\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n         .send(updateData);\r\n \r\n       expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty('email', updateData.email);\r\n-      expect(response.body.data).toHaveProperty('status', updateData.status);\r\n\\ No newline at end of file\n+      expect(response.body.data).toHaveProperty(\"email\", updateData.email);\r\n+      expect(response.body.data).toHaveProperty(\"status\", updateData.status);\r\n     });\r\n \r\n-    it('should not update to existing username', async () => {\r\n+    it(\"should not update to existing username\", async () => {\r\n       const updateData = {\r\n-        username: 'admin'\r\n+        username: \"admin\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/users/${userId}`)\r\n-        .set('Authorization', `Bearer ${authToken}`)\r\n+        .set(\"Authorization\", `Bearer ${authToken}`)\r\n         .send(updateData);\r\n \r\n       expect(response.status).toBe(400);\r\n     });\r\n   });\r\n \r\n-  describe('DELETE /api/users/:id', () => {\r\n+  describe(\"DELETE /api/users/:id\", () => {\r\n     let userId;\r\n \r\n     beforeAll(async () => {\r\n       const user = await createTestUser({\r\n-        username: 'userToDelete',\r\n-        email: 'delete@example.com'\r\n+        username: \"userToDelete\",\r\n+        email: \"delete@example.com\",\r\n       });\r\n       userId = user.id;\r\n     });\r\n \r\n-    it('should delete user', async () => {\r\n+    it(\"should delete user\", async () => {\r\n       const response = await request(app)\r\n         .delete(`/api/users/${userId}`)\r\n-        .set('Authorization', `Bearer ${authToken}`);\r\n+        .set(\"Authorization\", `Bearer ${authToken}`);\r\n \r\n       expect(response.status).toBe(200);\r\n \r\n       // Verify user is deleted\r\n       const deletedUser = await User.findByPk(userId);\r\n       expect(deletedUser).toBeNull();\r\n     });\r\n \r\n-    it('should return 404 when deleting non-existent user', async () => {\r\n+    it(\"should return 404 when deleting non-existent user\", async () => {\r\n       const response = await request(app)\r\n         .delete(`/api/users/${userId}`)\r\n-        .set('Authorization', `Bearer ${authToken}`);\r\n+        .set(\"Authorization\", `Bearer ${authToken}`);\r\n \r\n       expect(response.status).toBe(404);\r\n     });\r\n   });\r\n-}); \n+});\r\n"
                },
                {
                    "date": 1746012754543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,191 +1,1 @@\n-const request = require(\"supertest\");\r\n-const app = require(\"../app\");\r\n-const {\r\n-  clearDatabase,\r\n-  createTestUser,\r\n-  createTestRole,\r\n-  getAuthToken,\r\n-} = require(\"./helpers\");\r\n-const { User } = require(\"../models\");\r\n-\r\n-describe(\"User API Tests\", () => {\r\n-  let authToken;\r\n-  let testUser;\r\n-  let adminUser;\r\n-\r\n-  beforeAll(async () => {\r\n-    await clearDatabase();\r\n-    // 创建管理员用户\r\n-    adminUser = await createTestUser({\r\n-      username: \"admin\",\r\n-      email: \"admin@example.com\",\r\n-    });\r\n-    const adminRole = await createTestRole({\r\n-      name: \"管理员\",\r\n-      description: \"系统管理员\",\r\n-    });\r\n-    await adminUser.addRole(adminRole);\r\n-    authToken = await getAuthToken(adminUser);\r\n-  });\r\n-\r\n-  afterAll(async () => {\r\n-    await clearDatabase();\r\n-  });\r\n-\r\n-  describe(\"POST /api/users\", () => {\r\n-    it(\"should create a new user\", async () => {\r\n-      const userData = {\r\n-        username: \"newuser\",\r\n-        password: \"password123\",\r\n-        email: \"newuser@example.com\",\r\n-        status: 1,\r\n-      };\r\n-\r\n-      const response = await request(app)\r\n-        .post(\"/api/users\")\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .send(userData);\r\n-\r\n-      expect(response.status).toBe(201);\r\n-      expect(response.body.data).toHaveProperty(\"username\", userData.username);\r\n-      expect(response.body.data).toHaveProperty(\"email\", userData.email);\r\n-      expect(response.body.data).not.toHaveProperty(\"password\");\r\n-    });\r\n-\r\n-    it(\"should not create user with duplicate username\", async () => {\r\n-      const userData = {\r\n-        username: \"newuser\",\r\n-        password: \"password123\",\r\n-        email: \"another@example.com\",\r\n-        status: 1,\r\n-      };\r\n-\r\n-      const response = await request(app)\r\n-        .post(\"/api/users\")\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .send(userData);\r\n-\r\n-      expect(response.status).toBe(400);\r\n-      expect(response.body).toHaveProperty(\"msg\", \"Username already exists\");\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"GET /api/users\", () => {\r\n-    it(\"should get user list with pagination\", async () => {\r\n-      const response = await request(app)\r\n-        .get(\"/api/users\")\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .query({ page: 1, pageSize: 10 });\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty(\"list\");\r\n-      expect(response.body.data).toHaveProperty(\"pagination\");\r\n-      expect(response.body.data.pagination).toHaveProperty(\"total\");\r\n-      expect(response.body.data.pagination).toHaveProperty(\"current\", 1);\r\n-      expect(response.body.data.pagination).toHaveProperty(\"pageSize\", 10);\r\n-    });\r\n-\r\n-    it(\"should filter users by search term\", async () => {\r\n-      const response = await request(app)\r\n-        .get(\"/api/users\")\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .query({ search: \"newuser\" });\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.data.list.length).toBeGreaterThan(0);\r\n-      expect(response.body.data.list[0]).toHaveProperty(\"username\", \"newuser\");\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"GET /api/users/:id\", () => {\r\n-    it(\"should get user by id\", async () => {\r\n-      const user = await User.findOne({ where: { username: \"newuser\" } });\r\n-\r\n-      const response = await request(app)\r\n-        .get(`/api/users/${user.id}`)\r\n-        .set(\"Authorization\", `Bearer ${authToken}`);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty(\"id\", user.id);\r\n-      expect(response.body.data).toHaveProperty(\"username\", \"newuser\");\r\n-    });\r\n-\r\n-    it(\"should return 404 for non-existent user\", async () => {\r\n-      const response = await request(app)\r\n-        .get(\"/api/users/99999\")\r\n-        .set(\"Authorization\", `Bearer ${authToken}`);\r\n-\r\n-      expect(response.status).toBe(404);\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"PUT /api/users/:id\", () => {\r\n-    let userId;\r\n-\r\n-    beforeAll(async () => {\r\n-      const user = await User.findOne({ where: { username: \"newuser\" } });\r\n-      userId = user.id;\r\n-    });\r\n-\r\n-    it(\"should update user information\", async () => {\r\n-      const updateData = {\r\n-        email: \"updated@example.com\",\r\n-        status: 0,\r\n-      };\r\n-\r\n-      const response = await request(app)\r\n-        .put(`/api/users/${userId}`)\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .send(updateData);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.data).toHaveProperty(\"email\", updateData.email);\r\n-      expect(response.body.data).toHaveProperty(\"status\", updateData.status);\r\n-    });\r\n-\r\n-    it(\"should not update to existing username\", async () => {\r\n-      const updateData = {\r\n-        username: \"admin\",\r\n-      };\r\n-\r\n-      const response = await request(app)\r\n-        .put(`/api/users/${userId}`)\r\n-        .set(\"Authorization\", `Bearer ${authToken}`)\r\n-        .send(updateData);\r\n-\r\n-      expect(response.status).toBe(400);\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"DELETE /api/users/:id\", () => {\r\n-    let userId;\r\n-\r\n-    beforeAll(async () => {\r\n-      const user = await createTestUser({\r\n-        username: \"userToDelete\",\r\n-        email: \"delete@example.com\",\r\n-      });\r\n-      userId = user.id;\r\n-    });\r\n-\r\n-    it(\"should delete user\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(`/api/users/${userId}`)\r\n-        .set(\"Authorization\", `Bearer ${authToken}`);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-\r\n-      // Verify user is deleted\r\n-      const deletedUser = await User.findByPk(userId);\r\n-      expect(deletedUser).toBeNull();\r\n-    });\r\n-\r\n-    it(\"should return 404 when deleting non-existent user\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(`/api/users/${userId}`)\r\n-        .set(\"Authorization\", `Bearer ${authToken}`);\r\n-\r\n-      expect(response.status).toBe(404);\r\n-    });\r\n-  });\r\n-});\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746011597015,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../app');\r\nconst { clearDatabase, createTestUser, createTestRole, getAuthToken } = require('./helpers');\r\nconst { User } = require('../models');\r\n\r\ndescribe('User API Tests', () => {\r\n  let authToken;\r\n  let testUser;\r\n  let adminUser;\r\n\r\n  beforeAll(async () => {\r\n    await clearDatabase();\r\n    // 创建管理员用户\r\n    adminUser = await createTestUser({\r\n      username: 'admin',\r\n      email: 'admin@example.com'\r\n    });\r\n    const adminRole = await createTestRole({\r\n      name: '管理员',\r\n      description: '系统管理员'\r\n    });\r\n    await adminUser.addRole(adminRole);\r\n    authToken = await getAuthToken(adminUser);\r\n  });\r\n\r\n  afterAll(async () => {\r\n    await clearDatabase();\r\n  });\r\n\r\n  describe('POST /api/users', () => {\r\n    it('should create a new user', async () => {\r\n      const userData = {\r\n        username: 'newuser',\r\n        password: 'password123',\r\n        email: 'newuser@example.com',\r\n        status: 1\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/users')\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .send(userData);\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(response.body.data).toHaveProperty('username', userData.username);\r\n      expect(response.body.data).toHaveProperty('email', userData.email);\r\n      expect(response.body.data).not.toHaveProperty('password');\r\n    });\r\n\r\n    it('should not create user with duplicate username', async () => {\r\n      const userData = {\r\n        username: 'newuser',\r\n        password: 'password123',\r\n        email: 'another@example.com',\r\n        status: 1\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/users')\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .send(userData);\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body).toHaveProperty('msg', 'Username already exists');\r\n    });\r\n  });\r\n\r\n  describe('GET /api/users', () => {\r\n    it('should get user list with pagination', async () => {\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .query({ page: 1, pageSize: 10 });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.data).toHaveProperty('list');\r\n      expect(response.body.data).toHaveProperty('pagination');\r\n      expect(response.body.data.pagination).toHaveProperty('total');\r\n      expect(response.body.data.pagination).toHaveProperty('current', 1);\r\n      expect(response.body.data.pagination).toHaveProperty('pageSize', 10);\r\n    });\r\n\r\n    it('should filter users by search term', async () => {\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .query({ search: 'newuser' });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.data.list.length).toBeGreaterThan(0);\r\n      expect(response.body.data.list[0]).toHaveProperty('username', 'newuser');\r\n    });\r\n  });\r\n\r\n  describe('GET /api/users/:id', () => {\r\n    it('should get user by id', async () => {\r\n      const user = await User.findOne({ where: { username: 'newuser' } });\r\n\r\n      const response = await request(app)\r\n        .get(`/api/users/${user.id}`)\r\n        .set('Authorization', `Bearer ${authToken}`);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.data).toHaveProperty('id', user.id);\r\n      expect(response.body.data).toHaveProperty('username', 'newuser');\r\n    });\r\n\r\n    it('should return 404 for non-existent user', async () => {\r\n      const response = await request(app)\r\n        .get('/api/users/99999')\r\n        .set('Authorization', `Bearer ${authToken}`);\r\n\r\n      expect(response.status).toBe(404);\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/users/:id', () => {\r\n    let userId;\r\n\r\n    beforeAll(async () => {\r\n      const user = await User.findOne({ where: { username: 'newuser' } });\r\n      userId = user.id;\r\n    });\r\n\r\n    it('should update user information', async () => {\r\n      const updateData = {\r\n        email: 'updated@example.com',\r\n        status: 0\r\n      };\r\n\r\n      const response = await request(app)\r\n        .put(`/api/users/${userId}`)\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .send(updateData);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.data).toHaveProperty('email', updateData.email);\r\n      expect(response.body.data).toHaveProperty('status', updateData.status);\r\n    });\r\n\r\n    it('should not update to existing username', async () => {\r\n      const updateData = {\r\n        username: 'admin'\r\n      };\r\n\r\n      const response = await request(app)\r\n        .put(`/api/users/${userId}`)\r\n        .set('Authorization', `Bearer ${authToken}`)\r\n        .send(updateData);\r\n\r\n      expect(response.status).toBe(400);\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/users/:id', () => {\r\n    let userId;\r\n\r\n    beforeAll(async () => {\r\n      const user = await createTestUser({\r\n        username: 'userToDelete',\r\n        email: 'delete@example.com'\r\n      });\r\n      userId = user.id;\r\n    });\r\n\r\n    it('should delete user', async () => {\r\n      const response = await request(app)\r\n        .delete(`/api/users/${userId}`)\r\n        .set('Authorization', `Bearer ${authToken}`);\r\n\r\n      expect(response.status).toBe(200);\r\n\r\n      // Verify user is deleted\r\n      const deletedUser = await User.findByPk(userId);\r\n      expect(deletedUser).toBeNull();\r\n    });\r\n\r\n    it('should return 404 when deleting non-existent user', async () => {\r\n      const response = await request(app)\r\n        .delete(`/api/users/${userId}`)\r\n        .set('Authorization', `Bearer ${authToken}`);\r\n\r\n      expect(response.status).toBe(404);\r\n    });\r\n  });\r\n}); "
        }
    ]
}