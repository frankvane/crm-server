{
    "sourceFile": "tests/role.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746010110259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746010153230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,118 @@\n-const request = require('supertest');\r\n-const app = require('../app');\r\n-const { getTestUserToken } = require('./setup');\r\n+const request = require(\"supertest\");\r\n+const app = require(\"../app\");\r\n+const { getTestUserToken } = require(\"./setup\");\r\n \r\n-describe('Role Module', () => {\r\n+describe(\"Role Module\", () => {\r\n   let token;\r\n   let createdRoleId;\r\n \r\n   beforeAll(async () => {\r\n     token = await getTestUserToken();\r\n   });\r\n \r\n-  describe('POST /api/roles', () => {\r\n-    it('should create a new role', async () => {\r\n+  describe(\"POST /api/roles\", () => {\r\n+    it(\"should create a new role\", async () => {\r\n       const response = await request(app)\r\n-        .post('/api/roles')\r\n-        .set('Authorization', `Bearer ${token}`)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          name: '测试角色',\r\n-          code: 'test_role',\r\n-          description: '用于测试的角色'\r\n+          name: \"测试角色\",\r\n+          code: \"test_role\",\r\n+          description: \"用于测试的角色\",\r\n         });\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty('id');\r\n-      expect(response.body.data.name).toBe('测试角色');\r\n-      \r\n+      expect(response.body.data).toHaveProperty(\"id\");\r\n+      expect(response.body.data.name).toBe(\"测试角色\");\r\n+\r\n       createdRoleId = response.body.data.id;\r\n     });\r\n \r\n-    it('should fail to create role with duplicate code', async () => {\r\n+    it(\"should fail to create role with duplicate code\", async () => {\r\n       const response = await request(app)\r\n-        .post('/api/roles')\r\n-        .set('Authorization', `Bearer ${token}`)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          name: '测试角色2',\r\n-          code: 'test_role',\r\n-          description: '重复的角色代码'\r\n+          name: \"测试角色2\",\r\n+          code: \"test_role\",\r\n+          description: \"重复的角色代码\",\r\n         });\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/roles', () => {\r\n-    it('should get role list', async () => {\r\n+  describe(\"GET /api/roles\", () => {\r\n+    it(\"should get role list\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/roles')\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .get(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n       expect(Array.isArray(response.body.data)).toBe(true);\r\n       expect(response.body.data.length).toBeGreaterThan(0);\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/roles/:id', () => {\r\n-    it('should get role by id', async () => {\r\n+  describe(\"GET /api/roles/:id\", () => {\r\n+    it(\"should get role by id\", async () => {\r\n       const response = await request(app)\r\n         .get(`/api/roles/${createdRoleId}`)\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n       expect(response.body.data.id).toBe(createdRoleId);\r\n-      expect(response.body.data.name).toBe('测试角色');\r\n+      expect(response.body.data.name).toBe(\"测试角色\");\r\n     });\r\n \r\n-    it('should return 404 for non-existent role', async () => {\r\n+    it(\"should return 404 for non-existent role\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/roles/999999')\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .get(\"/api/roles/999999\")\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n \r\n-  describe('PUT /api/roles/:id', () => {\r\n-    it('should update role', async () => {\r\n+  describe(\"PUT /api/roles/:id\", () => {\r\n+    it(\"should update role\", async () => {\r\n       const response = await request(app)\r\n         .put(`/api/roles/${createdRoleId}`)\r\n\\ No newline at end of file\n-        .set('Authorization', `Bearer ${token}`)\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          name: '更新后的角色名',\r\n-          description: '更新后的描述'\r\n+          name: \"更新后的角色名\",\r\n+          description: \"更新后的描述\",\r\n         });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.name).toBe('更新后的角色名');\r\n-      expect(response.body.data.description).toBe('更新后的描述');\r\n+      expect(response.body.data.name).toBe(\"更新后的角色名\");\r\n+      expect(response.body.data.description).toBe(\"更新后的描述\");\r\n     });\r\n   });\r\n \r\n-  describe('DELETE /api/roles/:id', () => {\r\n-    it('should delete role', async () => {\r\n+  describe(\"DELETE /api/roles/:id\", () => {\r\n+    it(\"should delete role\", async () => {\r\n       const response = await request(app)\r\n         .delete(`/api/roles/${createdRoleId}`)\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n     });\r\n \r\n-    it('should return 404 when deleting non-existent role', async () => {\r\n+    it(\"should return 404 when deleting non-existent role\", async () => {\r\n       const response = await request(app)\r\n         .delete(`/api/roles/${createdRoleId}`)\r\n-        .set('Authorization', `Bearer ${token}`);\r\n+        .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n-}); \n+});\r\n"
                },
                {
                    "date": 1746010233291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,5 +114,5 @@\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n     });\r\n   });\r\n-});\n\\ No newline at end of file\n+});\r\n"
                },
                {
                    "date": 1746010757855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,53 @@\n const request = require(\"supertest\");\r\n const app = require(\"../app\");\r\n-const { getTestUserToken } = require(\"./setup\");\r\n+const { sequelize } = require(\"../models\");\r\n \r\n-describe(\"Role Module\", () => {\r\n+describe(\"Role Management API Tests\", () => {\r\n   let token;\r\n-  let createdRoleId;\r\n \r\n   beforeAll(async () => {\r\n-    token = await getTestUserToken();\r\n+    await sequelize.sync({ force: true });\r\n+    \r\n+    const loginResponse = await request(app)\r\n+      .post(\"/api/auth/login\")\r\n+      .send({\r\n+        username: \"admin\",\r\n+        password: \"admin123\"\r\n+      });\r\n+    \r\n+    expect(loginResponse.status).toBe(200);\r\n+    expect(loginResponse.body.code).toBe(1);\r\n+    expect(loginResponse.body.data.token).toBeTruthy();\r\n+    \r\n+    token = loginResponse.body.data.token;\r\n   });\r\n \r\n+  afterAll(async () => {\r\n+    await sequelize.close();\r\n+  });\r\n+\r\n   describe(\"POST /api/roles\", () => {\r\n     it(\"should create a new role\", async () => {\r\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色\",\r\n-          code: \"test_role\",\r\n-          description: \"用于测试的角色\",\r\n+          description: \"这是一个测试角色\"\r\n         });\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty(\"id\");\r\n       expect(response.body.data.name).toBe(\"测试角色\");\r\n-\r\n-      createdRoleId = response.body.data.id;\r\n     });\r\n \r\n-    it(\"should fail to create role with duplicate code\", async () => {\r\n+    it(\"should fail to create role without name\", async () => {\r\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          name: \"测试角色2\",\r\n-          code: \"test_role\",\r\n-          description: \"重复的角色代码\",\r\n+          description: \"这是一个测试角色\"\r\n         });\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n@@ -52,22 +62,34 @@\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n       expect(Array.isArray(response.body.data)).toBe(true);\r\n-      expect(response.body.data.length).toBeGreaterThan(0);\r\n     });\r\n   });\r\n \r\n   describe(\"GET /api/roles/:id\", () => {\r\n+    let roleId;\r\n+\r\n+    beforeAll(async () => {\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n+        .send({\r\n+          name: \"测试角色2\",\r\n+          description: \"这是另一个测试角色\"\r\n+        });\r\n+      \r\n+      roleId = createResponse.body.data.id;\r\n+    });\r\n+\r\n     it(\"should get role by id\", async () => {\r\n       const response = await request(app)\r\n-        .get(`/api/roles/${createdRoleId}`)\r\n+        .get(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.id).toBe(createdRoleId);\r\n-      expect(response.body.data.name).toBe(\"测试角色\");\r\n+      expect(response.body.data.id).toBe(roleId);\r\n     });\r\n \r\n     it(\"should return 404 for non-existent role\", async () => {\r\n       const response = await request(app)\r\n@@ -79,40 +101,64 @@\n     });\r\n   });\r\n \r\n   describe(\"PUT /api/roles/:id\", () => {\r\n+    let roleId;\r\n+\r\n+    beforeAll(async () => {\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n+        .send({\r\n+          name: \"待更新角色\",\r\n+          description: \"这个角色将被更新\"\r\n+        });\r\n+      \r\n+      roleId = createResponse.body.data.id;\r\n+    });\r\n+\r\n     it(\"should update role\", async () => {\r\n       const response = await request(app)\r\n-        .put(`/api/roles/${createdRoleId}`)\r\n+        .put(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          name: \"更新后的角色名\",\r\n-          description: \"更新后的描述\",\r\n+          name: \"已更新角色\",\r\n+          description: \"这个角色已经被更新\"\r\n         });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.name).toBe(\"更新后的角色名\");\r\n-      expect(response.body.data.description).toBe(\"更新后的描述\");\r\n+      expect(response.body.data.name).toBe(\"已更新角色\");\r\n     });\r\n   });\r\n \r\n   describe(\"DELETE /api/roles/:id\", () => {\r\n+    let roleId;\r\n+\r\n+    beforeAll(async () => {\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${token}`)\r\n+        .send({\r\n+          name: \"待删除角色\",\r\n+          description: \"这个角色将被删除\"\r\n+        });\r\n+      \r\n+      roleId = createResponse.body.data.id;\r\n+    });\r\n+\r\n     it(\"should delete role\", async () => {\r\n       const response = await request(app)\r\n-        .delete(`/api/roles/${createdRoleId}`)\r\n+        .delete(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-    });\r\n \r\n-    it(\"should return 404 when deleting non-existent role\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(`/api/roles/${createdRoleId}`)\r\n+      const getResponse = await request(app)\r\n+        .get(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n-      expect(response.status).toBe(404);\r\n-      expect(response.body.code).toBe(0);\r\n+      expect(getResponse.status).toBe(404);\r\n     });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1746010780361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,18 @@\n   let token;\r\n \r\n   beforeAll(async () => {\r\n     await sequelize.sync({ force: true });\r\n-    \r\n-    const loginResponse = await request(app)\r\n-      .post(\"/api/auth/login\")\r\n-      .send({\r\n-        username: \"admin\",\r\n-        password: \"admin123\"\r\n-      });\r\n-    \r\n+\r\n+    const loginResponse = await request(app).post(\"/api/auth/login\").send({\r\n+      username: \"admin\",\r\n+      password: \"admin123\",\r\n+    });\r\n+\r\n     expect(loginResponse.status).toBe(200);\r\n     expect(loginResponse.body.code).toBe(1);\r\n     expect(loginResponse.body.data.token).toBeTruthy();\r\n-    \r\n+\r\n     token = loginResponse.body.data.token;\r\n   });\r\n \r\n   afterAll(async () => {\r\n@@ -32,9 +30,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色\",\r\n-          description: \"这是一个测试角色\"\r\n+          description: \"这是一个测试角色\",\r\n         });\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n@@ -45,9 +43,9 @@\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          description: \"这是一个测试角色\"\r\n+          description: \"这是一个测试角色\",\r\n         });\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n@@ -74,11 +72,11 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色2\",\r\n-          description: \"这是另一个测试角色\"\r\n+          description: \"这是另一个测试角色\",\r\n         });\r\n-      \r\n+\r\n       roleId = createResponse.body.data.id;\r\n     });\r\n \r\n     it(\"should get role by id\", async () => {\r\n@@ -109,11 +107,11 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待更新角色\",\r\n-          description: \"这个角色将被更新\"\r\n+          description: \"这个角色将被更新\",\r\n         });\r\n-      \r\n+\r\n       roleId = createResponse.body.data.id;\r\n     });\r\n \r\n     it(\"should update role\", async () => {\r\n@@ -121,9 +119,9 @@\n         .put(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"已更新角色\",\r\n-          description: \"这个角色已经被更新\"\r\n+          description: \"这个角色已经被更新\",\r\n         });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n@@ -139,11 +137,11 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待删除角色\",\r\n-          description: \"这个角色将被删除\"\r\n+          description: \"这个角色将被删除\",\r\n         });\r\n-      \r\n+\r\n       roleId = createResponse.body.data.id;\r\n     });\r\n \r\n     it(\"should delete role\", async () => {\r\n"
                },
                {
                    "date": 1746010859499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,60 @@\n const request = require(\"supertest\");\r\n const app = require(\"../app\");\r\n-const { sequelize } = require(\"../models\");\r\n+const { sequelize, User, Role } = require(\"../models\");\r\n+const bcrypt = require(\"bcryptjs\");\r\n \r\n describe(\"Role Management API Tests\", () => {\r\n   let token;\r\n \r\n   beforeAll(async () => {\r\n-    await sequelize.sync({ force: true });\r\n+    try {\r\n+      // 同步数据库\r\n+      await sequelize.sync({ force: true });\r\n \r\n-    const loginResponse = await request(app).post(\"/api/auth/login\").send({\r\n-      username: \"admin\",\r\n-      password: \"admin123\",\r\n-    });\r\n+      // 创建管理员用户\r\n+      const hashedPassword = await bcrypt.hash(\"admin123\", 10);\r\n+      const adminUser = await User.create({\r\n+        username: \"admin\",\r\n+        password: hashedPassword,\r\n+        email: \"admin@example.com\",\r\n+        status: \"active\"\r\n+      });\r\n \r\n-    expect(loginResponse.status).toBe(200);\r\n-    expect(loginResponse.body.code).toBe(1);\r\n-    expect(loginResponse.body.data.token).toBeTruthy();\r\n+      // 创建管理员角色\r\n+      const adminRole = await Role.create({\r\n+        name: \"管理员\",\r\n+        description: \"系统管理员\"\r\n+      });\r\n \r\n-    token = loginResponse.body.data.token;\r\n+      // 关联用户和角色\r\n+      await adminUser.addRole(adminRole);\r\n+\r\n+      // 登录获取token\r\n+      const loginResponse = await request(app)\r\n+        .post(\"/api/auth/login\")\r\n+        .send({\r\n+          username: \"admin\",\r\n+          password: \"admin123\"\r\n+        });\r\n+\r\n+      expect(loginResponse.status).toBe(200);\r\n+      expect(loginResponse.body.code).toBe(1);\r\n+      expect(loginResponse.body.data.token).toBeTruthy();\r\n+\r\n+      token = loginResponse.body.data.token;\r\n+    } catch (error) {\r\n+      console.error(\"Test setup failed:\", error);\r\n+      throw error;\r\n+    }\r\n   });\r\n \r\n   afterAll(async () => {\r\n-    await sequelize.close();\r\n+    try {\r\n+      await sequelize.close();\r\n+    } catch (error) {\r\n+      console.error(\"Failed to close database connection:\", error);\r\n+    }\r\n   });\r\n \r\n   describe(\"POST /api/roles\", () => {\r\n     it(\"should create a new role\", async () => {\r\n@@ -30,9 +62,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色\",\r\n-          description: \"这是一个测试角色\",\r\n+          description: \"这是一个测试角色\"\r\n         });\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n@@ -43,9 +75,9 @@\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          description: \"这是一个测试角色\",\r\n+          description: \"这是一个测试角色\"\r\n         });\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n@@ -72,9 +104,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色2\",\r\n-          description: \"这是另一个测试角色\",\r\n+          description: \"这是另一个测试角色\"\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n@@ -107,9 +139,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待更新角色\",\r\n-          description: \"这个角色将被更新\",\r\n+          description: \"这个角色将被更新\"\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n@@ -119,9 +151,9 @@\n         .put(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"已更新角色\",\r\n-          description: \"这个角色已经被更新\",\r\n+          description: \"这个角色已经被更新\"\r\n         });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n@@ -137,9 +169,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待删除角色\",\r\n-          description: \"这个角色将被删除\",\r\n+          description: \"这个角色将被删除\"\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n@@ -151,8 +183,9 @@\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n \r\n+      // 验证角色已被删除\r\n       const getResponse = await request(app)\r\n         .get(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`);\r\n \r\n"
                },
                {
                    "date": 1746010881966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,27 +16,25 @@\n       const adminUser = await User.create({\r\n         username: \"admin\",\r\n         password: hashedPassword,\r\n         email: \"admin@example.com\",\r\n-        status: \"active\"\r\n+        status: \"active\",\r\n       });\r\n \r\n       // 创建管理员角色\r\n       const adminRole = await Role.create({\r\n         name: \"管理员\",\r\n-        description: \"系统管理员\"\r\n+        description: \"系统管理员\",\r\n       });\r\n \r\n       // 关联用户和角色\r\n       await adminUser.addRole(adminRole);\r\n \r\n       // 登录获取token\r\n-      const loginResponse = await request(app)\r\n-        .post(\"/api/auth/login\")\r\n-        .send({\r\n-          username: \"admin\",\r\n-          password: \"admin123\"\r\n-        });\r\n+      const loginResponse = await request(app).post(\"/api/auth/login\").send({\r\n+        username: \"admin\",\r\n+        password: \"admin123\",\r\n+      });\r\n \r\n       expect(loginResponse.status).toBe(200);\r\n       expect(loginResponse.body.code).toBe(1);\r\n       expect(loginResponse.body.data.token).toBeTruthy();\r\n@@ -62,9 +60,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色\",\r\n-          description: \"这是一个测试角色\"\r\n+          description: \"这是一个测试角色\",\r\n         });\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n@@ -75,9 +73,9 @@\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n-          description: \"这是一个测试角色\"\r\n+          description: \"这是一个测试角色\",\r\n         });\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n@@ -104,9 +102,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"测试角色2\",\r\n-          description: \"这是另一个测试角色\"\r\n+          description: \"这是另一个测试角色\",\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n@@ -139,9 +137,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待更新角色\",\r\n-          description: \"这个角色将被更新\"\r\n+          description: \"这个角色将被更新\",\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n@@ -151,9 +149,9 @@\n         .put(`/api/roles/${roleId}`)\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"已更新角色\",\r\n-          description: \"这个角色已经被更新\"\r\n+          description: \"这个角色已经被更新\",\r\n         });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n@@ -169,9 +167,9 @@\n         .post(\"/api/roles\")\r\n         .set(\"Authorization\", `Bearer ${token}`)\r\n         .send({\r\n           name: \"待删除角色\",\r\n-          description: \"这个角色将被删除\"\r\n+          description: \"这个角色将被删除\",\r\n         });\r\n \r\n       roleId = createResponse.body.data.id;\r\n     });\r\n"
                },
                {
                    "date": 1746012762227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,193 +0,0 @@\n-const request = require(\"supertest\");\r\n-const app = require(\"../app\");\r\n-const { sequelize, User, Role } = require(\"../models\");\r\n-const bcrypt = require(\"bcryptjs\");\r\n-\r\n-describe(\"Role Management API Tests\", () => {\r\n-  let token;\r\n-\r\n-  beforeAll(async () => {\r\n-    try {\r\n-      // 同步数据库\r\n-      await sequelize.sync({ force: true });\r\n-\r\n-      // 创建管理员用户\r\n-      const hashedPassword = await bcrypt.hash(\"admin123\", 10);\r\n-      const adminUser = await User.create({\r\n-        username: \"admin\",\r\n-        password: hashedPassword,\r\n-        email: \"admin@example.com\",\r\n-        status: \"active\",\r\n-      });\r\n-\r\n-      // 创建管理员角色\r\n-      const adminRole = await Role.create({\r\n-        name: \"管理员\",\r\n-        description: \"系统管理员\",\r\n-      });\r\n-\r\n-      // 关联用户和角色\r\n-      await adminUser.addRole(adminRole);\r\n-\r\n-      // 登录获取token\r\n-      const loginResponse = await request(app).post(\"/api/auth/login\").send({\r\n-        username: \"admin\",\r\n-        password: \"admin123\",\r\n-      });\r\n-\r\n-      expect(loginResponse.status).toBe(200);\r\n-      expect(loginResponse.body.code).toBe(1);\r\n-      expect(loginResponse.body.data.token).toBeTruthy();\r\n-\r\n-      token = loginResponse.body.data.token;\r\n-    } catch (error) {\r\n-      console.error(\"Test setup failed:\", error);\r\n-      throw error;\r\n-    }\r\n-  });\r\n-\r\n-  afterAll(async () => {\r\n-    try {\r\n-      await sequelize.close();\r\n-    } catch (error) {\r\n-      console.error(\"Failed to close database connection:\", error);\r\n-    }\r\n-  });\r\n-\r\n-  describe(\"POST /api/roles\", () => {\r\n-    it(\"should create a new role\", async () => {\r\n-      const response = await request(app)\r\n-        .post(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          name: \"测试角色\",\r\n-          description: \"这是一个测试角色\",\r\n-        });\r\n-\r\n-      expect(response.status).toBe(201);\r\n-      expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.name).toBe(\"测试角色\");\r\n-    });\r\n-\r\n-    it(\"should fail to create role without name\", async () => {\r\n-      const response = await request(app)\r\n-        .post(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          description: \"这是一个测试角色\",\r\n-        });\r\n-\r\n-      expect(response.status).toBe(400);\r\n-      expect(response.body.code).toBe(0);\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"GET /api/roles\", () => {\r\n-    it(\"should get role list\", async () => {\r\n-      const response = await request(app)\r\n-        .get(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.code).toBe(1);\r\n-      expect(Array.isArray(response.body.data)).toBe(true);\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"GET /api/roles/:id\", () => {\r\n-    let roleId;\r\n-\r\n-    beforeAll(async () => {\r\n-      const createResponse = await request(app)\r\n-        .post(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          name: \"测试角色2\",\r\n-          description: \"这是另一个测试角色\",\r\n-        });\r\n-\r\n-      roleId = createResponse.body.data.id;\r\n-    });\r\n-\r\n-    it(\"should get role by id\", async () => {\r\n-      const response = await request(app)\r\n-        .get(`/api/roles/${roleId}`)\r\n-        .set(\"Authorization\", `Bearer ${token}`);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.id).toBe(roleId);\r\n-    });\r\n-\r\n-    it(\"should return 404 for non-existent role\", async () => {\r\n-      const response = await request(app)\r\n-        .get(\"/api/roles/999999\")\r\n-        .set(\"Authorization\", `Bearer ${token}`);\r\n-\r\n-      expect(response.status).toBe(404);\r\n-      expect(response.body.code).toBe(0);\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"PUT /api/roles/:id\", () => {\r\n-    let roleId;\r\n-\r\n-    beforeAll(async () => {\r\n-      const createResponse = await request(app)\r\n-        .post(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          name: \"待更新角色\",\r\n-          description: \"这个角色将被更新\",\r\n-        });\r\n-\r\n-      roleId = createResponse.body.data.id;\r\n-    });\r\n-\r\n-    it(\"should update role\", async () => {\r\n-      const response = await request(app)\r\n-        .put(`/api/roles/${roleId}`)\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          name: \"已更新角色\",\r\n-          description: \"这个角色已经被更新\",\r\n-        });\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.name).toBe(\"已更新角色\");\r\n-    });\r\n-  });\r\n-\r\n-  describe(\"DELETE /api/roles/:id\", () => {\r\n-    let roleId;\r\n-\r\n-    beforeAll(async () => {\r\n-      const createResponse = await request(app)\r\n-        .post(\"/api/roles\")\r\n-        .set(\"Authorization\", `Bearer ${token}`)\r\n-        .send({\r\n-          name: \"待删除角色\",\r\n-          description: \"这个角色将被删除\",\r\n-        });\r\n-\r\n-      roleId = createResponse.body.data.id;\r\n-    });\r\n-\r\n-    it(\"should delete role\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(`/api/roles/${roleId}`)\r\n-        .set(\"Authorization\", `Bearer ${token}`);\r\n-\r\n-      expect(response.status).toBe(200);\r\n-      expect(response.body.code).toBe(1);\r\n-\r\n-      // 验证角色已被删除\r\n-      const getResponse = await request(app)\r\n-        .get(`/api/roles/${roleId}`)\r\n-        .set(\"Authorization\", `Bearer ${token}`);\r\n-\r\n-      expect(getResponse.status).toBe(404);\r\n-    });\r\n-  });\r\n-});\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746010110259,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../app');\r\nconst { getTestUserToken } = require('./setup');\r\n\r\ndescribe('Role Module', () => {\r\n  let token;\r\n  let createdRoleId;\r\n\r\n  beforeAll(async () => {\r\n    token = await getTestUserToken();\r\n  });\r\n\r\n  describe('POST /api/roles', () => {\r\n    it('should create a new role', async () => {\r\n      const response = await request(app)\r\n        .post('/api/roles')\r\n        .set('Authorization', `Bearer ${token}`)\r\n        .send({\r\n          name: '测试角色',\r\n          code: 'test_role',\r\n          description: '用于测试的角色'\r\n        });\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty('id');\r\n      expect(response.body.data.name).toBe('测试角色');\r\n      \r\n      createdRoleId = response.body.data.id;\r\n    });\r\n\r\n    it('should fail to create role with duplicate code', async () => {\r\n      const response = await request(app)\r\n        .post('/api/roles')\r\n        .set('Authorization', `Bearer ${token}`)\r\n        .send({\r\n          name: '测试角色2',\r\n          code: 'test_role',\r\n          description: '重复的角色代码'\r\n        });\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('GET /api/roles', () => {\r\n    it('should get role list', async () => {\r\n      const response = await request(app)\r\n        .get('/api/roles')\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(Array.isArray(response.body.data)).toBe(true);\r\n      expect(response.body.data.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('GET /api/roles/:id', () => {\r\n    it('should get role by id', async () => {\r\n      const response = await request(app)\r\n        .get(`/api/roles/${createdRoleId}`)\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data.id).toBe(createdRoleId);\r\n      expect(response.body.data.name).toBe('测试角色');\r\n    });\r\n\r\n    it('should return 404 for non-existent role', async () => {\r\n      const response = await request(app)\r\n        .get('/api/roles/999999')\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/roles/:id', () => {\r\n    it('should update role', async () => {\r\n      const response = await request(app)\r\n        .put(`/api/roles/${createdRoleId}`)\r\n        .set('Authorization', `Bearer ${token}`)\r\n        .send({\r\n          name: '更新后的角色名',\r\n          description: '更新后的描述'\r\n        });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data.name).toBe('更新后的角色名');\r\n      expect(response.body.data.description).toBe('更新后的描述');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/roles/:id', () => {\r\n    it('should delete role', async () => {\r\n      const response = await request(app)\r\n        .delete(`/api/roles/${createdRoleId}`)\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n    });\r\n\r\n    it('should return 404 when deleting non-existent role', async () => {\r\n      const response = await request(app)\r\n        .delete(`/api/roles/${createdRoleId}`)\r\n        .set('Authorization', `Bearer ${token}`);\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n    });\r\n  });\r\n}); "
        }
    ]
}