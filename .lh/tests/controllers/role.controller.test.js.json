{
    "sourceFile": "tests/controllers/role.controller.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1746012240086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746012410402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,94 @@\n-const request = require('supertest');\r\n-const app = require('../../app');\r\n-const { getTestHeaders, generateRoleData } = require('../helpers');\r\n+const request = require(\"supertest\");\r\n+const app = require(\"../../app\");\r\n+const { getTestHeaders, generateRoleData } = require(\"../helpers\");\r\n \r\n-describe('Role Controller', () => {\r\n-  describe('POST /api/roles', () => {\r\n-    it('should create a new role when valid data is provided', async () => {\r\n+describe(\"Role Controller\", () => {\r\n+  describe(\"POST /api/roles\", () => {\r\n+    it(\"should create a new role when valid data is provided\", async () => {\r\n       const roleData = generateRoleData();\r\n \r\n       const response = await request(app)\r\n-        .post('/api/roles')\r\n+        .post(\"/api/roles\")\r\n         .set(getTestHeaders())\r\n         .send(roleData);\r\n \r\n       expect(response.status).toBe(201);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty('id');\r\n+      expect(response.body.data).toHaveProperty(\"id\");\r\n       expect(response.body.data.name).toBe(roleData.name);\r\n       expect(response.body.data.code).toBe(roleData.code);\r\n     });\r\n \r\n-    it('should return 400 when role code already exists', async () => {\r\n+    it(\"should return 400 when role code already exists\", async () => {\r\n       const roleData = generateRoleData();\r\n \r\n       // 先创建一个角色\r\n       await request(app)\r\n-        .post('/api/roles')\r\n+        .post(\"/api/roles\")\r\n         .set(getTestHeaders())\r\n         .send(roleData);\r\n \r\n       // 尝试创建相同code的角色\r\n       const response = await request(app)\r\n-        .post('/api/roles')\r\n+        .post(\"/api/roles\")\r\n         .set(getTestHeaders())\r\n         .send(roleData);\r\n \r\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n-      expect(response.body.msg).toBe('角色代码已存在');\r\n+      expect(response.body.msg).toBe(\"角色代码已存在\");\r\n     });\r\n \r\n-    it('should return 401 when no token is provided', async () => {\r\n+    it(\"should return 401 when no token is provided\", async () => {\r\n       const roleData = generateRoleData();\r\n \r\n-      const response = await request(app)\r\n-        .post('/api/roles')\r\n-        .send(roleData);\r\n+      const response = await request(app).post(\"/api/roles\").send(roleData);\r\n \r\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n-      expect(response.body.msg).toBe('未提供访问令牌');\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n     });\r\n   });\r\n \r\n-  describe('GET /api/roles', () => {\r\n-    it('should return list of roles', async () => {\r\n+  describe(\"GET /api/roles\", () => {\r\n+    it(\"should return list of roles\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/roles')\r\n+        .get(\"/api/roles\")\r\n         .set(getTestHeaders());\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n       expect(Array.isArray(response.body.data)).toBe(true);\r\n     });\r\n \r\n-    it('should support pagination', async () => {\r\n+    it(\"should support pagination\", async () => {\r\n       const response = await request(app)\r\n-        .get('/api/roles')\r\n+        .get(\"/api/roles\")\r\n         .query({ page: 1, pageSize: 10 })\r\n         .set(getTestHeaders());\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data).toHaveProperty('list');\r\n-      expect(response.body.data).toHaveProperty('total');\r\n-      expect(response.body.data).toHaveProperty('current', 1);\r\n-      expect(response.body.data).toHaveProperty('pageSize', 10);\r\n+      expect(response.body.data).toHaveProperty(\"list\");\r\n+      expect(response.body.data).toHaveProperty(\"total\");\r\n+      expect(response.body.data).toHaveProperty(\"current\", 1);\r\n+      expect(response.body.data).toHaveProperty(\"pageSize\", 10);\r\n     });\r\n   });\r\n \r\n-  describe('PUT /api/roles/:id', () => {\r\n-    it('should update role when valid data is provided', async () => {\r\n+  describe(\"PUT /api/roles/:id\", () => {\r\n+    it(\"should update role when valid data is provided\", async () => {\r\n       // 先创建一个角色\r\n       const createResponse = await request(app)\r\n-        .post('/api/roles')\r\n+        .post(\"/api/roles\")\r\n         .set(getTestHeaders())\r\n         .send(generateRoleData());\r\n \r\n       const roleId = createResponse.body.data.id;\r\n       const updateData = {\r\n-        name: '更新后的角色名称',\r\n-        description: '更新后的描述'\r\n+        name: \"更新后的角色名称\",\r\n+        description: \"更新后的描述\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/roles/${roleId}`)\r\n@@ -102,25 +100,25 @@\n       expect(response.body.data.name).toBe(updateData.name);\r\n       expect(response.body.data.description).toBe(updateData.description);\r\n     });\r\n \r\n-    it('should return 404 when role does not exist', async () => {\r\n+    it(\"should return 404 when role does not exist\", async () => {\r\n       const response = await request(app)\r\n-        .put('/api/roles/999999')\r\n+        .put(\"/api/roles/999999\")\r\n         .set(getTestHeaders())\r\n-        .send({ name: '测试角色' });\r\n+        .send({ name: \"测试角色\" });\r\n \r\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n-      expect(response.body.msg).toBe('角色不存在');\r\n+      expect(response.body.msg).toBe(\"角色不存在\");\r\n     });\r\n   });\r\n \r\n-  describe('DELETE /api/roles/:id', () => {\r\n-    it('should delete role successfully', async () => {\r\n+  describe(\"DELETE /api/roles/:id\", () => {\r\n+    it(\"should delete role successfully\", async () => {\r\n       // 先创建一个角色\r\n       const createResponse = await request(app)\r\n-        .post('/api/roles')\r\n+        .post(\"/api/roles\")\r\n         .set(getTestHeaders())\r\n         .send(generateRoleData());\r\n \r\n       const roleId = createResponse.body.data.id;\r\n@@ -130,18 +128,18 @@\n         .set(getTestHeaders());\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.msg).toBe('角色删除成功');\r\n+      expect(response.body.msg).toBe(\"角色删除成功\");\r\n     });\r\n \r\n-    it('should return 404 when trying to delete non-existent role', async () => {\r\n+    it(\"should return 404 when trying to delete non-existent role\", async () => {\r\n       const response = await request(app)\r\n-        .delete('/api/roles/999999')\r\n+        .delete(\"/api/roles/999999\")\r\n         .set(getTestHeaders());\r\n \r\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n-      expect(response.body.msg).toBe('角色不存在');\r\n\\ No newline at end of file\n+      expect(response.body.msg).toBe(\"角色不存在\");\r\n     });\r\n   });\r\n-});\n+});\r\n"
                },
                {
                    "date": 1746012942324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,17 @@\n const request = require(\"supertest\");\r\n const app = require(\"../../app\");\r\n-const { getTestHeaders, generateRoleData } = require(\"../helpers\");\r\n+const { getTestHeaders, generateRoleData, generateUserData, getTestToken } = require(\"../helpers\");\r\n \r\n describe(\"Role Controller\", () => {\r\n+  let testToken;\r\n+\r\n+  beforeEach(async () => {\r\n+    // 在每个测试前获取新的 token\r\n+    const userData = generateUserData();\r\n+    testToken = await getTestToken(userData);\r\n+  });\r\n+\r\n   describe(\"POST /api/roles\", () => {\r\n     it(\"should create a new role when valid data is provided\", async () => {\r\n       const roleData = generateRoleData();\r\n \r\n@@ -47,8 +55,43 @@\n       expect(response.status).toBe(401);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n     });\r\n+\r\n+    it(\"should create a new role\", async () => {\r\n+      const roleData = {\r\n+        name: \"testrole\",\r\n+        description: \"Test role description\"\r\n+      };\r\n+\r\n+      const response = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(roleData);\r\n+\r\n+      expect(response.status).toBe(201);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.data).toHaveProperty(\"id\");\r\n+      expect(response.body.data.name).toBe(roleData.name);\r\n+      expect(response.body.data.description).toBe(roleData.description);\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const roleData = {\r\n+        name: \"testrole\",\r\n+        description: \"Test role description\"\r\n+      };\r\n+\r\n+      const response = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(roleData);\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"GET /api/roles\", () => {\r\n     it(\"should return list of roles\", async () => {\r\n@@ -73,8 +116,33 @@\n       expect(response.body.data).toHaveProperty(\"total\");\r\n       expect(response.body.data).toHaveProperty(\"current\", 1);\r\n       expect(response.body.data).toHaveProperty(\"pageSize\", 10);\r\n     });\r\n+\r\n+    it(\"should return list of roles with pagination\", async () => {\r\n+      const response = await request(app)\r\n+        .get(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .query({ current: 1, pageSize: 10 });\r\n+\r\n+      expect(response.status).toBe(200);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.data).toHaveProperty(\"list\");\r\n+      expect(response.body.data).toHaveProperty(\"pagination\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"current\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"pageSize\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"total\");\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .get(\"/api/roles\")\r\n+        .query({ current: 1, pageSize: 10 });\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"PUT /api/roles/:id\", () => {\r\n     it(\"should update role when valid data is provided\", async () => {\r\n@@ -110,8 +178,50 @@\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"角色不存在\");\r\n     });\r\n+\r\n+    it(\"should update an existing role\", async () => {\r\n+      // 先创建角色\r\n+      const roleData = {\r\n+        name: \"testrole\",\r\n+        description: \"Test role description\"\r\n+      };\r\n+\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(roleData);\r\n+\r\n+      const roleId = createResponse.body.data.id;\r\n+      const updateData = {\r\n+        name: \"updatedrole\",\r\n+        description: \"Updated role description\"\r\n+      };\r\n+\r\n+      const response = await request(app)\r\n+        .put(`/api/roles/${roleId}`)\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(updateData);\r\n+\r\n+      expect(response.status).toBe(200);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.data.name).toBe(updateData.name);\r\n+      expect(response.body.data.description).toBe(updateData.description);\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .put(\"/api/roles/1\")\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send({ name: \"updated\" });\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"DELETE /api/roles/:id\", () => {\r\n     it(\"should delete role successfully\", async () => {\r\n@@ -140,6 +250,39 @@\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"角色不存在\");\r\n     });\r\n+\r\n+    it(\"should delete an existing role\", async () => {\r\n+      // 先创建角色\r\n+      const roleData = {\r\n+        name: \"testrole\",\r\n+        description: \"Test role description\"\r\n+      };\r\n+\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/roles\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(roleData);\r\n+\r\n+      const roleId = createResponse.body.data.id;\r\n+\r\n+      const response = await request(app)\r\n+        .delete(`/api/roles/${roleId}`)\r\n+        .set(\"Authorization\", `Bearer ${testToken}`);\r\n+\r\n+      expect(response.status).toBe(200);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.msg).toBe(\"角色删除成功\");\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .delete(\"/api/roles/1\");\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1746012957771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,12 @@\n const request = require(\"supertest\");\r\n const app = require(\"../../app\");\r\n-const { getTestHeaders, generateRoleData, generateUserData, getTestToken } = require(\"../helpers\");\r\n+const {\r\n+  getTestHeaders,\r\n+  generateRoleData,\r\n+  generateUserData,\r\n+  getTestToken,\r\n+} = require(\"../helpers\");\r\n \r\n describe(\"Role Controller\", () => {\r\n   let testToken;\r\n \r\n@@ -59,9 +64,9 @@\n \r\n     it(\"should create a new role\", async () => {\r\n       const roleData = {\r\n         name: \"testrole\",\r\n-        description: \"Test role description\"\r\n+        description: \"Test role description\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n@@ -78,9 +83,9 @@\n \r\n     it(\"should return 403 without token\", async () => {\r\n       const roleData = {\r\n         name: \"testrole\",\r\n-        description: \"Test role description\"\r\n+        description: \"Test role description\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .post(\"/api/roles\")\r\n@@ -183,9 +188,9 @@\n     it(\"should update an existing role\", async () => {\r\n       // 先创建角色\r\n       const roleData = {\r\n         name: \"testrole\",\r\n-        description: \"Test role description\"\r\n+        description: \"Test role description\",\r\n       };\r\n \r\n       const createResponse = await request(app)\r\n         .post(\"/api/roles\")\r\n@@ -195,9 +200,9 @@\n \r\n       const roleId = createResponse.body.data.id;\r\n       const updateData = {\r\n         name: \"updatedrole\",\r\n-        description: \"Updated role description\"\r\n+        description: \"Updated role description\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/roles/${roleId}`)\r\n@@ -255,9 +260,9 @@\n     it(\"should delete an existing role\", async () => {\r\n       // 先创建角色\r\n       const roleData = {\r\n         name: \"testrole\",\r\n-        description: \"Test role description\"\r\n+        description: \"Test role description\",\r\n       };\r\n \r\n       const createResponse = await request(app)\r\n         .post(\"/api/roles\")\r\n@@ -276,10 +281,9 @@\n       expect(response.body.msg).toBe(\"角色删除成功\");\r\n     });\r\n \r\n     it(\"should return 403 without token\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(\"/api/roles/1\");\r\n+      const response = await request(app).delete(\"/api/roles/1\");\r\n \r\n       expect(response.status).toBe(403);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n"
                }
            ],
            "date": 1746012240086,
            "name": "Commit-0",
            "content": "const request = require('supertest');\r\nconst app = require('../../app');\r\nconst { getTestHeaders, generateRoleData } = require('../helpers');\r\n\r\ndescribe('Role Controller', () => {\r\n  describe('POST /api/roles', () => {\r\n    it('should create a new role when valid data is provided', async () => {\r\n      const roleData = generateRoleData();\r\n\r\n      const response = await request(app)\r\n        .post('/api/roles')\r\n        .set(getTestHeaders())\r\n        .send(roleData);\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty('id');\r\n      expect(response.body.data.name).toBe(roleData.name);\r\n      expect(response.body.data.code).toBe(roleData.code);\r\n    });\r\n\r\n    it('should return 400 when role code already exists', async () => {\r\n      const roleData = generateRoleData();\r\n\r\n      // 先创建一个角色\r\n      await request(app)\r\n        .post('/api/roles')\r\n        .set(getTestHeaders())\r\n        .send(roleData);\r\n\r\n      // 尝试创建相同code的角色\r\n      const response = await request(app)\r\n        .post('/api/roles')\r\n        .set(getTestHeaders())\r\n        .send(roleData);\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe('角色代码已存在');\r\n    });\r\n\r\n    it('should return 401 when no token is provided', async () => {\r\n      const roleData = generateRoleData();\r\n\r\n      const response = await request(app)\r\n        .post('/api/roles')\r\n        .send(roleData);\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe('未提供访问令牌');\r\n    });\r\n  });\r\n\r\n  describe('GET /api/roles', () => {\r\n    it('should return list of roles', async () => {\r\n      const response = await request(app)\r\n        .get('/api/roles')\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(Array.isArray(response.body.data)).toBe(true);\r\n    });\r\n\r\n    it('should support pagination', async () => {\r\n      const response = await request(app)\r\n        .get('/api/roles')\r\n        .query({ page: 1, pageSize: 10 })\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty('list');\r\n      expect(response.body.data).toHaveProperty('total');\r\n      expect(response.body.data).toHaveProperty('current', 1);\r\n      expect(response.body.data).toHaveProperty('pageSize', 10);\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/roles/:id', () => {\r\n    it('should update role when valid data is provided', async () => {\r\n      // 先创建一个角色\r\n      const createResponse = await request(app)\r\n        .post('/api/roles')\r\n        .set(getTestHeaders())\r\n        .send(generateRoleData());\r\n\r\n      const roleId = createResponse.body.data.id;\r\n      const updateData = {\r\n        name: '更新后的角色名称',\r\n        description: '更新后的描述'\r\n      };\r\n\r\n      const response = await request(app)\r\n        .put(`/api/roles/${roleId}`)\r\n        .set(getTestHeaders())\r\n        .send(updateData);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data.name).toBe(updateData.name);\r\n      expect(response.body.data.description).toBe(updateData.description);\r\n    });\r\n\r\n    it('should return 404 when role does not exist', async () => {\r\n      const response = await request(app)\r\n        .put('/api/roles/999999')\r\n        .set(getTestHeaders())\r\n        .send({ name: '测试角色' });\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe('角色不存在');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/roles/:id', () => {\r\n    it('should delete role successfully', async () => {\r\n      // 先创建一个角色\r\n      const createResponse = await request(app)\r\n        .post('/api/roles')\r\n        .set(getTestHeaders())\r\n        .send(generateRoleData());\r\n\r\n      const roleId = createResponse.body.data.id;\r\n\r\n      const response = await request(app)\r\n        .delete(`/api/roles/${roleId}`)\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.msg).toBe('角色删除成功');\r\n    });\r\n\r\n    it('should return 404 when trying to delete non-existent role', async () => {\r\n      const response = await request(app)\r\n        .delete('/api/roles/999999')\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe('角色不存在');\r\n    });\r\n  });\r\n});"
        }
    ]
}