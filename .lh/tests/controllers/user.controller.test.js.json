{
    "sourceFile": "tests/controllers/user.controller.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1746012371786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746012410391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n describe(\"User Controller\", () => {\r\n   describe(\"POST /api/users\", () => {\r\n     it(\"should create a new user when valid data is provided\", async () => {\r\n       const userData = generateUserData();\r\n-      \r\n+\r\n       const response = await request(app)\r\n         .post(\"/api/users\")\r\n         .set(getTestHeaders())\r\n         .send(userData);\r\n@@ -21,9 +21,9 @@\n     });\r\n \r\n     it(\"should return 400 when username already exists\", async () => {\r\n       const userData = generateUserData();\r\n-      \r\n+\r\n       // 先创建一个用户\r\n       await request(app)\r\n         .post(\"/api/users\")\r\n         .set(getTestHeaders())\r\n@@ -64,9 +64,9 @@\n       expect(response.body.data).toHaveProperty(\"list\");\r\n       expect(response.body.data).toHaveProperty(\"total\");\r\n       expect(response.body.data).toHaveProperty(\"current\", 1);\r\n       expect(response.body.data).toHaveProperty(\"pageSize\", 10);\r\n-      \r\n+\r\n       // 验证用户列表数据结构\r\n       if (response.body.data.list.length > 0) {\r\n         const user = response.body.data.list[0];\r\n         expect(user).toHaveProperty(\"id\");\r\n@@ -91,9 +91,11 @@\n         .set(getTestHeaders());\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n-      expect(response.body.data.list.some(user => user.username === \"searchtest\")).toBe(true);\r\n+      expect(\r\n+        response.body.data.list.some((user) => user.username === \"searchtest\")\r\n+      ).toBe(true);\r\n     });\r\n   });\r\n \r\n   describe(\"PUT /api/users/:id\", () => {\r\n@@ -106,9 +108,9 @@\n \r\n       const userId = createResponse.body.data.id;\r\n       const updateData = {\r\n         email: \"updated@example.com\",\r\n-        status: 0\r\n+        status: 0,\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/users/${userId}`)\r\n@@ -195,5 +197,5 @@\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"用户不存在\");\r\n     });\r\n   });\r\n-}); \n\\ No newline at end of file\n+});\r\n"
                },
                {
                    "date": 1746012921904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,17 @@\n const request = require(\"supertest\");\r\n const app = require(\"../../app\");\r\n-const { getTestHeaders, generateUserData } = require(\"../helpers\");\r\n+const { getTestHeaders, generateUserData, getTestToken } = require(\"../helpers\");\r\n \r\n describe(\"User Controller\", () => {\r\n+  let testToken;\r\n+\r\n+  beforeEach(async () => {\r\n+    // 在每个测试前获取新的 token\r\n+    const userData = generateUserData();\r\n+    testToken = await getTestToken(userData);\r\n+  });\r\n+\r\n   describe(\"POST /api/users\", () => {\r\n     it(\"should create a new user when valid data is provided\", async () => {\r\n       const userData = generateUserData();\r\n \r\n@@ -49,33 +57,61 @@\n       expect(response.status).toBe(400);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toContain(\"必填\");\r\n     });\r\n+\r\n+    it(\"should create a new user\", async () => {\r\n+      const userData = generateUserData();\r\n+      const response = await request(app)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(userData);\r\n+\r\n+      expect(response.status).toBe(201);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.data).toHaveProperty(\"id\");\r\n+      expect(response.body.data.username).toBe(userData.username);\r\n+      expect(response.body.data.email).toBe(userData.email);\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const userData = generateUserData();\r\n+      const response = await request(app)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(userData);\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"GET /api/users\", () => {\r\n     it(\"should return list of users with pagination\", async () => {\r\n       const response = await request(app)\r\n         .get(\"/api/users\")\r\n-        .query({ page: 1, pageSize: 10 })\r\n-        .set(getTestHeaders());\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .query({ current: 1, pageSize: 10 });\r\n \r\n       expect(response.status).toBe(200);\r\n       expect(response.body.code).toBe(1);\r\n       expect(response.body.data).toHaveProperty(\"list\");\r\n-      expect(response.body.data).toHaveProperty(\"total\");\r\n-      expect(response.body.data).toHaveProperty(\"current\", 1);\r\n-      expect(response.body.data).toHaveProperty(\"pageSize\", 10);\r\n+      expect(response.body.data).toHaveProperty(\"pagination\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"current\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"pageSize\");\r\n+      expect(response.body.data.pagination).toHaveProperty(\"total\");\r\n+    });\r\n \r\n-      // 验证用户列表数据结构\r\n-      if (response.body.data.list.length > 0) {\r\n-        const user = response.body.data.list[0];\r\n-        expect(user).toHaveProperty(\"id\");\r\n-        expect(user).toHaveProperty(\"username\");\r\n-        expect(user).toHaveProperty(\"email\");\r\n-        expect(user).toHaveProperty(\"status\");\r\n-        expect(user).not.toHaveProperty(\"password\");\r\n-      }\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .get(\"/api/users\")\r\n+        .query({ current: 1, pageSize: 10 });\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n     });\r\n \r\n     it(\"should support search by username\", async () => {\r\n       // 先创建一个用户\r\n@@ -132,8 +168,46 @@\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"用户不存在\");\r\n     });\r\n+\r\n+    it(\"should update an existing user\", async () => {\r\n+      // 先创建用户\r\n+      const userData = generateUserData();\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(userData);\r\n+\r\n+      const userId = createResponse.body.data.id;\r\n+      const updateData = {\r\n+        username: \"updatedusername\",\r\n+        email: \"updated@example.com\"\r\n+      };\r\n+\r\n+      const response = await request(app)\r\n+        .put(`/api/users/${userId}`)\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(updateData);\r\n+\r\n+      expect(response.status).toBe(200);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.data.username).toBe(updateData.username);\r\n+      expect(response.body.data.email).toBe(updateData.email);\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .put(\"/api/users/1\")\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send({ username: \"updated\" });\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"DELETE /api/users/:id\", () => {\r\n     it(\"should delete user successfully\", async () => {\r\n@@ -162,8 +236,37 @@\n       expect(response.status).toBe(404);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"用户不存在\");\r\n     });\r\n+\r\n+    it(\"should delete an existing user\", async () => {\r\n+      // 先创建用户\r\n+      const userData = generateUserData();\r\n+      const createResponse = await request(app)\r\n+        .post(\"/api/users\")\r\n+        .set(\"Authorization\", `Bearer ${testToken}`)\r\n+        .set(\"Content-Type\", \"application/json\")\r\n+        .send(userData);\r\n+\r\n+      const userId = createResponse.body.data.id;\r\n+\r\n+      const response = await request(app)\r\n+        .delete(`/api/users/${userId}`)\r\n+        .set(\"Authorization\", `Bearer ${testToken}`);\r\n+\r\n+      expect(response.status).toBe(200);\r\n+      expect(response.body.code).toBe(1);\r\n+      expect(response.body.msg).toBe(\"用户删除成功\");\r\n+    });\r\n+\r\n+    it(\"should return 403 without token\", async () => {\r\n+      const response = await request(app)\r\n+        .delete(\"/api/users/1\");\r\n+\r\n+      expect(response.status).toBe(403);\r\n+      expect(response.body.code).toBe(0);\r\n+      expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n+    });\r\n   });\r\n \r\n   describe(\"GET /api/users/:id\", () => {\r\n     it(\"should return user details\", async () => {\r\n"
                },
                {
                    "date": 1746012957749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n const request = require(\"supertest\");\r\n const app = require(\"../../app\");\r\n-const { getTestHeaders, generateUserData, getTestToken } = require(\"../helpers\");\r\n+const {\r\n+  getTestHeaders,\r\n+  generateUserData,\r\n+  getTestToken,\r\n+} = require(\"../helpers\");\r\n \r\n describe(\"User Controller\", () => {\r\n   let testToken;\r\n \r\n@@ -181,9 +185,9 @@\n \r\n       const userId = createResponse.body.data.id;\r\n       const updateData = {\r\n         username: \"updatedusername\",\r\n-        email: \"updated@example.com\"\r\n+        email: \"updated@example.com\",\r\n       };\r\n \r\n       const response = await request(app)\r\n         .put(`/api/users/${userId}`)\r\n@@ -258,10 +262,9 @@\n       expect(response.body.msg).toBe(\"用户删除成功\");\r\n     });\r\n \r\n     it(\"should return 403 without token\", async () => {\r\n-      const response = await request(app)\r\n-        .delete(\"/api/users/1\");\r\n+      const response = await request(app).delete(\"/api/users/1\");\r\n \r\n       expect(response.status).toBe(403);\r\n       expect(response.body.code).toBe(0);\r\n       expect(response.body.msg).toBe(\"未提供访问令牌\");\r\n"
                }
            ],
            "date": 1746012371786,
            "name": "Commit-0",
            "content": "const request = require(\"supertest\");\r\nconst app = require(\"../../app\");\r\nconst { getTestHeaders, generateUserData } = require(\"../helpers\");\r\n\r\ndescribe(\"User Controller\", () => {\r\n  describe(\"POST /api/users\", () => {\r\n    it(\"should create a new user when valid data is provided\", async () => {\r\n      const userData = generateUserData();\r\n      \r\n      const response = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(userData);\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty(\"id\");\r\n      expect(response.body.data.username).toBe(userData.username);\r\n      expect(response.body.data.email).toBe(userData.email);\r\n      expect(response.body.data).not.toHaveProperty(\"password\"); // 确保返回数据中不包含密码\r\n    });\r\n\r\n    it(\"should return 400 when username already exists\", async () => {\r\n      const userData = generateUserData();\r\n      \r\n      // 先创建一个用户\r\n      await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(userData);\r\n\r\n      // 尝试创建相同用户名的用户\r\n      const response = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(userData);\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe(\"用户名已存在\");\r\n    });\r\n\r\n    it(\"should return 400 when required fields are missing\", async () => {\r\n      const response = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send({});\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toContain(\"必填\");\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/users\", () => {\r\n    it(\"should return list of users with pagination\", async () => {\r\n      const response = await request(app)\r\n        .get(\"/api/users\")\r\n        .query({ page: 1, pageSize: 10 })\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty(\"list\");\r\n      expect(response.body.data).toHaveProperty(\"total\");\r\n      expect(response.body.data).toHaveProperty(\"current\", 1);\r\n      expect(response.body.data).toHaveProperty(\"pageSize\", 10);\r\n      \r\n      // 验证用户列表数据结构\r\n      if (response.body.data.list.length > 0) {\r\n        const user = response.body.data.list[0];\r\n        expect(user).toHaveProperty(\"id\");\r\n        expect(user).toHaveProperty(\"username\");\r\n        expect(user).toHaveProperty(\"email\");\r\n        expect(user).toHaveProperty(\"status\");\r\n        expect(user).not.toHaveProperty(\"password\");\r\n      }\r\n    });\r\n\r\n    it(\"should support search by username\", async () => {\r\n      // 先创建一个用户\r\n      const userData = generateUserData({ username: \"searchtest\" });\r\n      await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(userData);\r\n\r\n      const response = await request(app)\r\n        .get(\"/api/users\")\r\n        .query({ username: \"searchtest\" })\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data.list.some(user => user.username === \"searchtest\")).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe(\"PUT /api/users/:id\", () => {\r\n    it(\"should update user when valid data is provided\", async () => {\r\n      // 先创建一个用户\r\n      const createResponse = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(generateUserData());\r\n\r\n      const userId = createResponse.body.data.id;\r\n      const updateData = {\r\n        email: \"updated@example.com\",\r\n        status: 0\r\n      };\r\n\r\n      const response = await request(app)\r\n        .put(`/api/users/${userId}`)\r\n        .set(getTestHeaders())\r\n        .send(updateData);\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data.email).toBe(updateData.email);\r\n      expect(response.body.data.status).toBe(updateData.status);\r\n    });\r\n\r\n    it(\"should return 404 when user does not exist\", async () => {\r\n      const response = await request(app)\r\n        .put(\"/api/users/999999\")\r\n        .set(getTestHeaders())\r\n        .send({ email: \"test@example.com\" });\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe(\"用户不存在\");\r\n    });\r\n  });\r\n\r\n  describe(\"DELETE /api/users/:id\", () => {\r\n    it(\"should delete user successfully\", async () => {\r\n      // 先创建一个用户\r\n      const createResponse = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(generateUserData());\r\n\r\n      const userId = createResponse.body.data.id;\r\n\r\n      const response = await request(app)\r\n        .delete(`/api/users/${userId}`)\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.msg).toBe(\"用户删除成功\");\r\n    });\r\n\r\n    it(\"should return 404 when trying to delete non-existent user\", async () => {\r\n      const response = await request(app)\r\n        .delete(\"/api/users/999999\")\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe(\"用户不存在\");\r\n    });\r\n  });\r\n\r\n  describe(\"GET /api/users/:id\", () => {\r\n    it(\"should return user details\", async () => {\r\n      // 先创建一个用户\r\n      const createResponse = await request(app)\r\n        .post(\"/api/users\")\r\n        .set(getTestHeaders())\r\n        .send(generateUserData());\r\n\r\n      const userId = createResponse.body.data.id;\r\n\r\n      const response = await request(app)\r\n        .get(`/api/users/${userId}`)\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body.code).toBe(1);\r\n      expect(response.body.data).toHaveProperty(\"id\", userId);\r\n      expect(response.body.data).toHaveProperty(\"username\");\r\n      expect(response.body.data).toHaveProperty(\"email\");\r\n      expect(response.body.data).toHaveProperty(\"status\");\r\n      expect(response.body.data).not.toHaveProperty(\"password\");\r\n    });\r\n\r\n    it(\"should return 404 when user does not exist\", async () => {\r\n      const response = await request(app)\r\n        .get(\"/api/users/999999\")\r\n        .set(getTestHeaders());\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body.code).toBe(0);\r\n      expect(response.body.msg).toBe(\"用户不存在\");\r\n    });\r\n  });\r\n}); "
        }
    ]
}